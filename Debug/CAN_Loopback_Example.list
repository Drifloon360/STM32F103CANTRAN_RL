
CAN_Loopback_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004880  08004880  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004880  08004880  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004880  08004880  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004884  08004884  00014884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000070  080048f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  080048f8  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c79c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1b  00000000  00000000  0002c835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  0002e550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  0002f2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e2b  00000000  00000000  0002ff58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d680  00000000  00000000  00047d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ade6  00000000  00000000  00055403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e01e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d0c  00000000  00000000  000e023c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080047d0 	.word	0x080047d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080047d0 	.word	0x080047d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ae:	2afd      	cmp	r2, #253	; 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	; 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_frsub>:
 80002c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002c8:	e002      	b.n	80002d0 <__addsf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_fsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002d0 <__addsf3>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	bf1f      	itttt	ne
 80002d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d8:	ea92 0f03 	teqne	r2, r3
 80002dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e4:	d06a      	beq.n	80003bc <__addsf3+0xec>
 80002e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ee:	bfc1      	itttt	gt
 80002f0:	18d2      	addgt	r2, r2, r3
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	4048      	eorgt	r0, r1
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	bfb8      	it	lt
 80002fa:	425b      	neglt	r3, r3
 80002fc:	2b19      	cmp	r3, #25
 80002fe:	bf88      	it	hi
 8000300:	4770      	bxhi	lr
 8000302:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000306:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800030a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4240      	negne	r0, r0
 8000312:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000316:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800031a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800031e:	bf18      	it	ne
 8000320:	4249      	negne	r1, r1
 8000322:	ea92 0f03 	teq	r2, r3
 8000326:	d03f      	beq.n	80003a8 <__addsf3+0xd8>
 8000328:	f1a2 0201 	sub.w	r2, r2, #1
 800032c:	fa41 fc03 	asr.w	ip, r1, r3
 8000330:	eb10 000c 	adds.w	r0, r0, ip
 8000334:	f1c3 0320 	rsb	r3, r3, #32
 8000338:	fa01 f103 	lsl.w	r1, r1, r3
 800033c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000340:	d502      	bpl.n	8000348 <__addsf3+0x78>
 8000342:	4249      	negs	r1, r1
 8000344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000348:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800034c:	d313      	bcc.n	8000376 <__addsf3+0xa6>
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000352:	d306      	bcc.n	8000362 <__addsf3+0x92>
 8000354:	0840      	lsrs	r0, r0, #1
 8000356:	ea4f 0131 	mov.w	r1, r1, rrx
 800035a:	f102 0201 	add.w	r2, r2, #1
 800035e:	2afe      	cmp	r2, #254	; 0xfe
 8000360:	d251      	bcs.n	8000406 <__addsf3+0x136>
 8000362:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036a:	bf08      	it	eq
 800036c:	f020 0001 	biceq.w	r0, r0, #1
 8000370:	ea40 0003 	orr.w	r0, r0, r3
 8000374:	4770      	bx	lr
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	eb40 0000 	adc.w	r0, r0, r0
 800037c:	3a01      	subs	r2, #1
 800037e:	bf28      	it	cs
 8000380:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000384:	d2ed      	bcs.n	8000362 <__addsf3+0x92>
 8000386:	fab0 fc80 	clz	ip, r0
 800038a:	f1ac 0c08 	sub.w	ip, ip, #8
 800038e:	ebb2 020c 	subs.w	r2, r2, ip
 8000392:	fa00 f00c 	lsl.w	r0, r0, ip
 8000396:	bfaa      	itet	ge
 8000398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800039c:	4252      	neglt	r2, r2
 800039e:	4318      	orrge	r0, r3
 80003a0:	bfbc      	itt	lt
 80003a2:	40d0      	lsrlt	r0, r2
 80003a4:	4318      	orrlt	r0, r3
 80003a6:	4770      	bx	lr
 80003a8:	f092 0f00 	teq	r2, #0
 80003ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003b0:	bf06      	itte	eq
 80003b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003b6:	3201      	addeq	r2, #1
 80003b8:	3b01      	subne	r3, #1
 80003ba:	e7b5      	b.n	8000328 <__addsf3+0x58>
 80003bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c4:	bf18      	it	ne
 80003c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ca:	d021      	beq.n	8000410 <__addsf3+0x140>
 80003cc:	ea92 0f03 	teq	r2, r3
 80003d0:	d004      	beq.n	80003dc <__addsf3+0x10c>
 80003d2:	f092 0f00 	teq	r2, #0
 80003d6:	bf08      	it	eq
 80003d8:	4608      	moveq	r0, r1
 80003da:	4770      	bx	lr
 80003dc:	ea90 0f01 	teq	r0, r1
 80003e0:	bf1c      	itt	ne
 80003e2:	2000      	movne	r0, #0
 80003e4:	4770      	bxne	lr
 80003e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003ea:	d104      	bne.n	80003f6 <__addsf3+0x126>
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	bf28      	it	cs
 80003f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003f4:	4770      	bx	lr
 80003f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003fa:	bf3c      	itt	cc
 80003fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000400:	4770      	bxcc	lr
 8000402:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000406:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800040a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800040e:	4770      	bx	lr
 8000410:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000414:	bf16      	itet	ne
 8000416:	4608      	movne	r0, r1
 8000418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800041c:	4601      	movne	r1, r0
 800041e:	0242      	lsls	r2, r0, #9
 8000420:	bf06      	itte	eq
 8000422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000426:	ea90 0f01 	teqeq	r0, r1
 800042a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800042e:	4770      	bx	lr

08000430 <__aeabi_ui2f>:
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e004      	b.n	8000440 <__aeabi_i2f+0x8>
 8000436:	bf00      	nop

08000438 <__aeabi_i2f>:
 8000438:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	ea5f 0c00 	movs.w	ip, r0
 8000444:	bf08      	it	eq
 8000446:	4770      	bxeq	lr
 8000448:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800044c:	4601      	mov	r1, r0
 800044e:	f04f 0000 	mov.w	r0, #0
 8000452:	e01c      	b.n	800048e <__aeabi_l2f+0x2a>

08000454 <__aeabi_ul2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e00a      	b.n	8000478 <__aeabi_l2f+0x14>
 8000462:	bf00      	nop

08000464 <__aeabi_l2f>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000470:	d502      	bpl.n	8000478 <__aeabi_l2f+0x14>
 8000472:	4240      	negs	r0, r0
 8000474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000478:	ea5f 0c01 	movs.w	ip, r1
 800047c:	bf02      	ittt	eq
 800047e:	4684      	moveq	ip, r0
 8000480:	4601      	moveq	r1, r0
 8000482:	2000      	moveq	r0, #0
 8000484:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000488:	bf08      	it	eq
 800048a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800048e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000492:	fabc f28c 	clz	r2, ip
 8000496:	3a08      	subs	r2, #8
 8000498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800049c:	db10      	blt.n	80004c0 <__aeabi_l2f+0x5c>
 800049e:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a2:	4463      	add	r3, ip
 80004a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a8:	f1c2 0220 	rsb	r2, r2, #32
 80004ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	eb43 0002 	adc.w	r0, r3, r2
 80004b8:	bf08      	it	eq
 80004ba:	f020 0001 	biceq.w	r0, r0, #1
 80004be:	4770      	bx	lr
 80004c0:	f102 0220 	add.w	r2, r2, #32
 80004c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d0:	fa21 f202 	lsr.w	r2, r1, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004de:	4770      	bx	lr

080004e0 <__aeabi_f2iz>:
 80004e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004e8:	d30f      	bcc.n	800050a <__aeabi_f2iz+0x2a>
 80004ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004f2:	d90d      	bls.n	8000510 <__aeabi_f2iz+0x30>
 80004f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004fc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000500:	fa23 f002 	lsr.w	r0, r3, r2
 8000504:	bf18      	it	ne
 8000506:	4240      	negne	r0, r0
 8000508:	4770      	bx	lr
 800050a:	f04f 0000 	mov.w	r0, #0
 800050e:	4770      	bx	lr
 8000510:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000514:	d101      	bne.n	800051a <__aeabi_f2iz+0x3a>
 8000516:	0242      	lsls	r2, r0, #9
 8000518:	d105      	bne.n	8000526 <__aeabi_f2iz+0x46>
 800051a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800051e:	bf08      	it	eq
 8000520:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000524:	4770      	bx	lr
 8000526:	f04f 0000 	mov.w	r0, #0
 800052a:	4770      	bx	lr

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000530:	b08b      	sub	sp, #44	; 0x2c
 8000532:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fd60 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f9ea 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 fafa 	bl	8000b34 <MX_GPIO_Init>
  MX_CAN_Init();
 8000540:	f000 fa2c 	bl	800099c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000544:	f000 facc 	bl	8000ae0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000548:	f000 fa7c 	bl	8000a44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //start timer request interrupt
  HAL_TIM_Base_Start_IT(&htim2);
 800054c:	4829      	ldr	r0, [pc, #164]	; (80005f4 <main+0xc8>)
 800054e:	f002 fbc7 	bl	8002ce0 <HAL_TIM_Base_Start_IT>

  //Start the CAN peripheral
  HAL_CAN_Start(&hcan);
 8000552:	4829      	ldr	r0, [pc, #164]	; (80005f8 <main+0xcc>)
 8000554:	f000 ff76 	bl	8001444 <HAL_CAN_Start>

  //Start notification and set to interrupt on pending message
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000558:	2102      	movs	r1, #2
 800055a:	4827      	ldr	r0, [pc, #156]	; (80005f8 <main+0xcc>)
 800055c:	f001 f9a1 	bl	80018a2 <HAL_CAN_ActivateNotification>

  //Set Arbitration and COntrol Fields of the TxField
  TxHeader.DLC = 8; 			//Specify length of data being sent (here 8 bytes)
 8000560:	4b26      	ldr	r3, [pc, #152]	; (80005fc <main+0xd0>)
 8000562:	2208      	movs	r2, #8
 8000564:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0; 			//Not using Extended ID
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <main+0xd0>)
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;	//Specify identifier type: std or extended (Here std)
 800056c:	4b23      	ldr	r3, [pc, #140]	; (80005fc <main+0xd0>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA; 	//Specify if sending data or remote frame (here data)
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <main+0xd0>)
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103; 		//ID for the CAN peripheral used for filtering (up to 11bit wide)
 8000578:	4b20      	ldr	r3, [pc, #128]	; (80005fc <main+0xd0>)
 800057a:	f240 1203 	movw	r2, #259	; 0x103
 800057e:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE; //Not used
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <main+0xd0>)
 8000582:	2200      	movs	r2, #0
 8000584:	751a      	strb	r2, [r3, #20]

  //Set Arbitration and COntrol Fields of the TxField
  TxHeaderData.DLC = 0; 			//Specify length of data being sent (here 8 bytes)
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <main+0xd4>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  TxHeaderData.ExtId = 0; 			//Not using Extended ID
 800058c:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <main+0xd4>)
 800058e:	2200      	movs	r2, #0
 8000590:	605a      	str	r2, [r3, #4]
  TxHeaderData.IDE = CAN_ID_STD;	//Specify identifier type: std or extended (Here std)
 8000592:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <main+0xd4>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  TxHeaderData.RTR = CAN_RTR_DATA; 	//Specify if sending data or remote frame (here data)
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <main+0xd4>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  TxHeaderData.StdId = 0x070; 		//ID for the CAN peripheral used for filtering (up to 11bit wide)
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <main+0xd4>)
 80005a0:	2270      	movs	r2, #112	; 0x70
 80005a2:	601a      	str	r2, [r3, #0]
  TxHeaderData.TransmitGlobalTime = DISABLE; //Not used
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <main+0xd4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	751a      	strb	r2, [r3, #20]
  dataBuff[3] = 4095;

  memcpy(TxData, dataBuff, 8);
	*/
  //Start UART Interrupt
  HAL_UART_Receive_IT(&huart1, usartRxBuff, 9);
 80005aa:	2209      	movs	r2, #9
 80005ac:	4915      	ldr	r1, [pc, #84]	; (8000604 <main+0xd8>)
 80005ae:	4816      	ldr	r0, [pc, #88]	; (8000608 <main+0xdc>)
 80005b0:	f003 f809 	bl	80035c6 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ba:	4814      	ldr	r0, [pc, #80]	; (800060c <main+0xe0>)
 80005bc:	f001 fef4 	bl	80023a8 <HAL_GPIO_WritePin>
  while (1)
  {
	//send the message (Should be received in the RxFifo0)
	if(usartDataInFlag){
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <main+0xe4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d044      	beq.n	8000652 <main+0x126>
		for(uint8_t i = 0; i<8; i++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	e02b      	b.n	8000626 <main+0xfa>
			if(usartRxBuff[i]>='1' && usartRxBuff[i] <= '9') {
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <main+0xd8>)
 80005d2:	5cd3      	ldrb	r3, [r2, r3]
 80005d4:	2b30      	cmp	r3, #48	; 0x30
 80005d6:	d91f      	bls.n	8000618 <main+0xec>
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <main+0xd8>)
 80005dc:	5cd3      	ldrb	r3, [r2, r3]
 80005de:	2b39      	cmp	r3, #57	; 0x39
 80005e0:	d81a      	bhi.n	8000618 <main+0xec>
				TxData[i] = (uint8_t) (usartRxBuff[i]-'0');
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	4a07      	ldr	r2, [pc, #28]	; (8000604 <main+0xd8>)
 80005e6:	5cd2      	ldrb	r2, [r2, r3]
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	3a30      	subs	r2, #48	; 0x30
 80005ec:	b2d1      	uxtb	r1, r2
 80005ee:	4a09      	ldr	r2, [pc, #36]	; (8000614 <main+0xe8>)
 80005f0:	54d1      	strb	r1, [r2, r3]
 80005f2:	e015      	b.n	8000620 <main+0xf4>
 80005f4:	200000b4 	.word	0x200000b4
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	20000148 	.word	0x20000148
 8000600:	20000160 	.word	0x20000160
 8000604:	200001e8 	.word	0x200001e8
 8000608:	200000fc 	.word	0x200000fc
 800060c:	40011000 	.word	0x40011000
 8000610:	20000144 	.word	0x20000144
 8000614:	20000198 	.word	0x20000198
			}
			else {TxData[i] = 0;}
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	4aa5      	ldr	r2, [pc, #660]	; (80008b0 <main+0x384>)
 800061c:	2100      	movs	r1, #0
 800061e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i<8; i++){
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	3301      	adds	r3, #1
 8000624:	73fb      	strb	r3, [r7, #15]
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b07      	cmp	r3, #7
 800062a:	d9d0      	bls.n	80005ce <main+0xa2>
		}


		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800062c:	4ba1      	ldr	r3, [pc, #644]	; (80008b4 <main+0x388>)
 800062e:	4aa0      	ldr	r2, [pc, #640]	; (80008b0 <main+0x384>)
 8000630:	49a1      	ldr	r1, [pc, #644]	; (80008b8 <main+0x38c>)
 8000632:	48a2      	ldr	r0, [pc, #648]	; (80008bc <main+0x390>)
 8000634:	f000 ff4a 	bl	80014cc <HAL_CAN_AddTxMessage>
		usartDataInFlag = RESET;
 8000638:	4ba1      	ldr	r3, [pc, #644]	; (80008c0 <main+0x394>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
		//clean up
		memset(usartRxBuff,'\0', 16);
 800063e:	2210      	movs	r2, #16
 8000640:	2100      	movs	r1, #0
 8000642:	48a0      	ldr	r0, [pc, #640]	; (80008c4 <main+0x398>)
 8000644:	f003 fc42 	bl	8003ecc <memset>
		HAL_UART_Receive_IT(&huart1, usartRxBuff, 9);
 8000648:	2209      	movs	r2, #9
 800064a:	499e      	ldr	r1, [pc, #632]	; (80008c4 <main+0x398>)
 800064c:	489e      	ldr	r0, [pc, #632]	; (80008c8 <main+0x39c>)
 800064e:	f002 ffba 	bl	80035c6 <HAL_UART_Receive_IT>
	}
	if(CanMsgInFlag){
 8000652:	4b9e      	ldr	r3, [pc, #632]	; (80008cc <main+0x3a0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d01f      	beq.n	800069a <main+0x16e>
		sprintf((char *)&usartBuff, "Toggle PIN%d %d\n", (int)dataPrep[0], (int)dataPrep[1]);
 800065a:	4b9d      	ldr	r3, [pc, #628]	; (80008d0 <main+0x3a4>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	4b9b      	ldr	r3, [pc, #620]	; (80008d0 <main+0x3a4>)
 8000662:	785b      	ldrb	r3, [r3, #1]
 8000664:	499b      	ldr	r1, [pc, #620]	; (80008d4 <main+0x3a8>)
 8000666:	489c      	ldr	r0, [pc, #624]	; (80008d8 <main+0x3ac>)
 8000668:	f003 fc38 	bl	8003edc <siprintf>
		HAL_UART_Transmit(&huart1, (unsigned char *)usartBuff, strlen((char *)usartBuff), HAL_MAX_DELAY);
 800066c:	489a      	ldr	r0, [pc, #616]	; (80008d8 <main+0x3ac>)
 800066e:	f7ff fd6d 	bl	800014c <strlen>
 8000672:	4603      	mov	r3, r0
 8000674:	b29a      	uxth	r2, r3
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	4997      	ldr	r1, [pc, #604]	; (80008d8 <main+0x3ac>)
 800067c:	4892      	ldr	r0, [pc, #584]	; (80008c8 <main+0x39c>)
 800067e:	f002 ff10 	bl	80034a2 <HAL_UART_Transmit>
		memset((char *)usartBuff, '\0', strlen((char *)usartBuff));
 8000682:	4895      	ldr	r0, [pc, #596]	; (80008d8 <main+0x3ac>)
 8000684:	f7ff fd62 	bl	800014c <strlen>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	4892      	ldr	r0, [pc, #584]	; (80008d8 <main+0x3ac>)
 8000690:	f003 fc1c 	bl	8003ecc <memset>
		CanMsgInFlag = RESET;
 8000694:	4b8d      	ldr	r3, [pc, #564]	; (80008cc <main+0x3a0>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
	/*sprintf((char *)&usartBuff, "%d %d %d %d %d\n", CanMsgInFlag, CanDataFlag1, CanDataFlag2, CanDataRqFlag, usartDataInFlag);
	HAL_UART_Transmit(&huart1, (unsigned char *)usartBuff, strlen((char *)usartBuff), HAL_MAX_DELAY);

	memset((char *)usartBuff, '\0', strlen((char *)usartBuff));
	*/
	if(CanDataFlag1 && CanDataFlag2){
 800069a:	4b90      	ldr	r3, [pc, #576]	; (80008dc <main+0x3b0>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	f000 80f6 	beq.w	8000890 <main+0x364>
 80006a4:	4b8e      	ldr	r3, [pc, #568]	; (80008e0 <main+0x3b4>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	f000 80f1 	beq.w	8000890 <main+0x364>
			sprintf((char *)&usartBuff, "%4d, %4d, %4d, %4d, %4d, %4d, %4d, %4d\n", (int)(slope1 * (float)dataBuff1[0] + offset1),(int)(slope2 * (float)dataBuff1[1]+offset2),(int)(slope3 * (float)dataBuff1[2]+offset3),(int)(slope4* (float)dataBuff1[3] + offset4), (int)(slope5 * dataBuff2[0]+ offset5),(int)(slope6 *dataBuff2[1] + offset6),(int)(slope7 * dataBuff2[2] +offset7),(int)(slope8 * dataBuff2[3]+offset8));
 80006ae:	4b8d      	ldr	r3, [pc, #564]	; (80008e4 <main+0x3b8>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff febc 	bl	8000430 <__aeabi_ui2f>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a8b      	ldr	r2, [pc, #556]	; (80008e8 <main+0x3bc>)
 80006bc:	4611      	mov	r1, r2
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fd4c 	bl	800015c <__aeabi_fmul>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b88      	ldr	r3, [pc, #544]	; (80008ec <main+0x3c0>)
 80006ca:	4619      	mov	r1, r3
 80006cc:	4610      	mov	r0, r2
 80006ce:	f7ff fdff 	bl	80002d0 <__addsf3>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff03 	bl	80004e0 <__aeabi_f2iz>
 80006da:	4680      	mov	r8, r0
 80006dc:	4b81      	ldr	r3, [pc, #516]	; (80008e4 <main+0x3b8>)
 80006de:	885b      	ldrh	r3, [r3, #2]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fea5 	bl	8000430 <__aeabi_ui2f>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a81      	ldr	r2, [pc, #516]	; (80008f0 <main+0x3c4>)
 80006ea:	4611      	mov	r1, r2
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fd35 	bl	800015c <__aeabi_fmul>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b7f      	ldr	r3, [pc, #508]	; (80008f4 <main+0x3c8>)
 80006f8:	4619      	mov	r1, r3
 80006fa:	4610      	mov	r0, r2
 80006fc:	f7ff fde8 	bl	80002d0 <__addsf3>
 8000700:	4603      	mov	r3, r0
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff feec 	bl	80004e0 <__aeabi_f2iz>
 8000708:	4681      	mov	r9, r0
 800070a:	4b76      	ldr	r3, [pc, #472]	; (80008e4 <main+0x3b8>)
 800070c:	889b      	ldrh	r3, [r3, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fe8e 	bl	8000430 <__aeabi_ui2f>
 8000714:	4603      	mov	r3, r0
 8000716:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800071a:	4611      	mov	r1, r2
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fd1d 	bl	800015c <__aeabi_fmul>
 8000722:	4603      	mov	r3, r0
 8000724:	461a      	mov	r2, r3
 8000726:	f04f 0300 	mov.w	r3, #0
 800072a:	4619      	mov	r1, r3
 800072c:	4610      	mov	r0, r2
 800072e:	f7ff fdcf 	bl	80002d0 <__addsf3>
 8000732:	4603      	mov	r3, r0
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fed3 	bl	80004e0 <__aeabi_f2iz>
 800073a:	4604      	mov	r4, r0
 800073c:	4b69      	ldr	r3, [pc, #420]	; (80008e4 <main+0x3b8>)
 800073e:	88db      	ldrh	r3, [r3, #6]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fe75 	bl	8000430 <__aeabi_ui2f>
 8000746:	4603      	mov	r3, r0
 8000748:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800074c:	4611      	mov	r1, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fd04 	bl	800015c <__aeabi_fmul>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	f04f 0300 	mov.w	r3, #0
 800075c:	4619      	mov	r1, r3
 800075e:	4610      	mov	r0, r2
 8000760:	f7ff fdb6 	bl	80002d0 <__addsf3>
 8000764:	4603      	mov	r3, r0
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff feba 	bl	80004e0 <__aeabi_f2iz>
 800076c:	4605      	mov	r5, r0
 800076e:	4b62      	ldr	r3, [pc, #392]	; (80008f8 <main+0x3cc>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fe60 	bl	8000438 <__aeabi_i2f>
 8000778:	4603      	mov	r3, r0
 800077a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800077e:	4611      	mov	r1, r2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fceb 	bl	800015c <__aeabi_fmul>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	4619      	mov	r1, r3
 8000790:	4610      	mov	r0, r2
 8000792:	f7ff fd9d 	bl	80002d0 <__addsf3>
 8000796:	4603      	mov	r3, r0
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fea1 	bl	80004e0 <__aeabi_f2iz>
 800079e:	4606      	mov	r6, r0
 80007a0:	4b55      	ldr	r3, [pc, #340]	; (80008f8 <main+0x3cc>)
 80007a2:	885b      	ldrh	r3, [r3, #2]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fe47 	bl	8000438 <__aeabi_i2f>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fcd2 	bl	800015c <__aeabi_fmul>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	4610      	mov	r0, r2
 80007c4:	f7ff fd84 	bl	80002d0 <__addsf3>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fe88 	bl	80004e0 <__aeabi_f2iz>
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	4b49      	ldr	r3, [pc, #292]	; (80008f8 <main+0x3cc>)
 80007d4:	889b      	ldrh	r3, [r3, #4]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fe2e 	bl	8000438 <__aeabi_i2f>
 80007dc:	4603      	mov	r3, r0
 80007de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fcb9 	bl	800015c <__aeabi_fmul>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461a      	mov	r2, r3
 80007ee:	f04f 0300 	mov.w	r3, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	4610      	mov	r0, r2
 80007f6:	f7ff fd6b 	bl	80002d0 <__addsf3>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fe6f 	bl	80004e0 <__aeabi_f2iz>
 8000802:	6038      	str	r0, [r7, #0]
 8000804:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <main+0x3cc>)
 8000806:	88db      	ldrh	r3, [r3, #6]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fe15 	bl	8000438 <__aeabi_i2f>
 800080e:	4603      	mov	r3, r0
 8000810:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000814:	4611      	mov	r1, r2
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fca0 	bl	800015c <__aeabi_fmul>
 800081c:	4603      	mov	r3, r0
 800081e:	461a      	mov	r2, r3
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	4619      	mov	r1, r3
 8000826:	4610      	mov	r0, r2
 8000828:	f7ff fd52 	bl	80002d0 <__addsf3>
 800082c:	4603      	mov	r3, r0
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff fe56 	bl	80004e0 <__aeabi_f2iz>
 8000834:	4603      	mov	r3, r0
 8000836:	9305      	str	r3, [sp, #20]
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	9304      	str	r3, [sp, #16]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	9303      	str	r3, [sp, #12]
 8000840:	9602      	str	r6, [sp, #8]
 8000842:	9501      	str	r5, [sp, #4]
 8000844:	9400      	str	r4, [sp, #0]
 8000846:	464b      	mov	r3, r9
 8000848:	4642      	mov	r2, r8
 800084a:	492c      	ldr	r1, [pc, #176]	; (80008fc <main+0x3d0>)
 800084c:	4822      	ldr	r0, [pc, #136]	; (80008d8 <main+0x3ac>)
 800084e:	f003 fb45 	bl	8003edc <siprintf>
			HAL_UART_Transmit(&huart1, (unsigned char *)usartBuff, strlen((char *)usartBuff), HAL_MAX_DELAY);
 8000852:	4821      	ldr	r0, [pc, #132]	; (80008d8 <main+0x3ac>)
 8000854:	f7ff fc7a 	bl	800014c <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	b29a      	uxth	r2, r3
 800085c:	f04f 33ff 	mov.w	r3, #4294967295
 8000860:	491d      	ldr	r1, [pc, #116]	; (80008d8 <main+0x3ac>)
 8000862:	4819      	ldr	r0, [pc, #100]	; (80008c8 <main+0x39c>)
 8000864:	f002 fe1d 	bl	80034a2 <HAL_UART_Transmit>
			memset((char *)usartBuff, '\0', strlen((char *)usartBuff));
 8000868:	481b      	ldr	r0, [pc, #108]	; (80008d8 <main+0x3ac>)
 800086a:	f7ff fc6f 	bl	800014c <strlen>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	2100      	movs	r1, #0
 8000874:	4818      	ldr	r0, [pc, #96]	; (80008d8 <main+0x3ac>)
 8000876:	f003 fb29 	bl	8003ecc <memset>
			CanDataFlag1 = RESET;
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <main+0x3b0>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
			CanDataFlag2 = RESET;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <main+0x3b4>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088a:	481d      	ldr	r0, [pc, #116]	; (8000900 <main+0x3d4>)
 800088c:	f001 fda4 	bl	80023d8 <HAL_GPIO_TogglePin>
	}
	if(CanDataRqFlag) {
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <main+0x3d8>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	f43f ae93 	beq.w	80005c0 <main+0x94>

		HAL_CAN_AddTxMessage(&hcan, &TxHeaderData, emptyFrame, &TxMailbox);
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <main+0x388>)
 800089c:	4a1a      	ldr	r2, [pc, #104]	; (8000908 <main+0x3dc>)
 800089e:	491b      	ldr	r1, [pc, #108]	; (800090c <main+0x3e0>)
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <main+0x390>)
 80008a2:	f000 fe13 	bl	80014cc <HAL_CAN_AddTxMessage>

		CanDataRqFlag = RESET;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <main+0x3d8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
	if(usartDataInFlag){
 80008ac:	e688      	b.n	80005c0 <main+0x94>
 80008ae:	bf00      	nop
 80008b0:	20000198 	.word	0x20000198
 80008b4:	20000194 	.word	0x20000194
 80008b8:	20000148 	.word	0x20000148
 80008bc:	2000008c 	.word	0x2000008c
 80008c0:	20000144 	.word	0x20000144
 80008c4:	200001e8 	.word	0x200001e8
 80008c8:	200000fc 	.word	0x200000fc
 80008cc:	20000140 	.word	0x20000140
 80008d0:	20000238 	.word	0x20000238
 80008d4:	080047e8 	.word	0x080047e8
 80008d8:	200001a8 	.word	0x200001a8
 80008dc:	20000141 	.word	0x20000141
 80008e0:	20000142 	.word	0x20000142
 80008e4:	20000228 	.word	0x20000228
 80008e8:	3d42f838 	.word	0x3d42f838
 80008ec:	c2fceb85 	.word	0xc2fceb85
 80008f0:	3d4154ca 	.word	0x3d4154ca
 80008f4:	c2fe2e14 	.word	0xc2fe2e14
 80008f8:	20000230 	.word	0x20000230
 80008fc:	080047fc 	.word	0x080047fc
 8000900:	40011000 	.word	0x40011000
 8000904:	20000143 	.word	0x20000143
 8000908:	20000240 	.word	0x20000240
 800090c:	20000160 	.word	0x20000160

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	; 0x40
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2228      	movs	r2, #40	; 0x28
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f003 fad4 	bl	8003ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000932:	2301      	movs	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800093a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000944:	2302      	movs	r3, #2
 8000946:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800094e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000952:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000954:	f107 0318 	add.w	r3, r7, #24
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fd57 	bl	800240c <HAL_RCC_OscConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000964:	f000 f99a 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000968:	230f      	movs	r3, #15
 800096a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096c:	2302      	movs	r3, #2
 800096e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2102      	movs	r1, #2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 ffc4 	bl	8002910 <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800098e:	f000 f985 	bl	8000c9c <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3740      	adds	r7, #64	; 0x40
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <MX_CAN_Init+0xa0>)
 80009a4:	4a26      	ldr	r2, [pc, #152]	; (8000a40 <MX_CAN_Init+0xa4>)
 80009a6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 20;
 80009a8:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <MX_CAN_Init+0xa0>)
 80009aa:	2214      	movs	r2, #20
 80009ac:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <MX_CAN_Init+0xa0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009b4:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_CAN_Init+0xa0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <MX_CAN_Init+0xa0>)
 80009bc:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80009c0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_CAN_Init+0xa0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_CAN_Init+0xa0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_CAN_Init+0xa0>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_CAN_Init+0xa0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_CAN_Init+0xa0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_CAN_Init+0xa0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_CAN_Init+0xa0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80009ec:	4813      	ldr	r0, [pc, #76]	; (8000a3c <MX_CAN_Init+0xa0>)
 80009ee:	f000 fb65 	bl	80010bc <HAL_CAN_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80009f8:	f000 f950 	bl	8000c9c <Error_Handler>

  //create a CAN filter config typdef struct
  CAN_FilterTypeDef canfilterconfig;

  //Set the CAN filter typedef elements
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;	//Enable or Disable Filters
 80009fc:	2301      	movs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;						//Specify which Filter bank to use
 8000a00:	230a      	movs	r3, #10
 8000a02:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x100<<5;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x100<<5;
 8000a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a16:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;				//Decides which bank belongs to slave CAN (useless as there is no CAN)
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24

  //Call CAN Filter Configuration function
  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <MX_CAN_Init+0xa0>)
 8000a2e:	f000 fc40 	bl	80012b2 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	; 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000008c 	.word	0x2000008c
 8000a40:	40006400 	.word	0x40006400

08000a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <MX_TIM2_Init+0x98>)
 8000a62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_TIM2_Init+0x98>)
 8000a6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_TIM2_Init+0x98>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3600-1;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_TIM2_Init+0x98>)
 8000a78:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000a7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_TIM2_Init+0x98>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_TIM2_Init+0x98>)
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a8a:	4814      	ldr	r0, [pc, #80]	; (8000adc <MX_TIM2_Init+0x98>)
 8000a8c:	f002 f8d8 	bl	8002c40 <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a96:	f000 f901 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480d      	ldr	r0, [pc, #52]	; (8000adc <MX_TIM2_Init+0x98>)
 8000aa8:	f002 fa6e 	bl	8002f88 <HAL_TIM_ConfigClockSource>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ab2:	f000 f8f3 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <MX_TIM2_Init+0x98>)
 8000ac4:	f002 fc36 	bl	8003334 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ace:	f000 f8e5 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000b4 	.word	0x200000b4

08000ae0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <MX_USART1_UART_Init+0x50>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b18:	f002 fc76 	bl	8003408 <HAL_UART_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b22:	f000 f8bb 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000fc 	.word	0x200000fc
 8000b30:	40013800 	.word	0x40013800

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_GPIO_Init+0x90>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <MX_GPIO_Init+0x90>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_GPIO_Init+0x90>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_GPIO_Init+0x90>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <MX_GPIO_Init+0x90>)
 8000b66:	f043 0320 	orr.w	r3, r3, #32
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_GPIO_Init+0x90>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0320 	and.w	r3, r3, #32
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_GPIO_Init+0x90>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a11      	ldr	r2, [pc, #68]	; (8000bc4 <MX_GPIO_Init+0x90>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_GPIO_Init+0x90>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b96:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <MX_GPIO_Init+0x94>)
 8000b98:	f001 fc06 	bl	80023a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_GPIO_Init+0x94>)
 8000bb6:	f001 fa7b 	bl	80020b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bba:	bf00      	nop
 8000bbc:	3720      	adds	r7, #32
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40011000 	.word	0x40011000

08000bcc <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 fd50 	bl	8001680 <HAL_CAN_GetRxMessage>
	if(RxHeader.StdId == 0x132) {
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8000be8:	d109      	bne.n	8000bfe <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		memcpy(dataPrep, RxData, 8);
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000bec:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000bee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bf2:	e883 0003 	stmia.w	r3, {r0, r1}
		CanMsgInFlag =SET;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
	}




}
 8000bfc:	e01d      	b.n	8000c3a <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	}else if(RxHeader.StdId == 0x171){
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f240 1271 	movw	r2, #369	; 0x171
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d109      	bne.n	8000c1e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
		memcpy(dataBuff1, RxData, 8);
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c12:	e883 0003 	stmia.w	r3, {r0, r1}
		CanDataFlag1 =SET;
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
}
 8000c1c:	e00d      	b.n	8000c3a <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	}else if(RxHeader.StdId == 0x172){
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 8000c26:	d108      	bne.n	8000c3a <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
		memcpy(dataBuff2, RxData, 8);
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8000c2a:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000c2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c30:	e883 0003 	stmia.w	r3, {r0, r1}
		CanDataFlag2 =SET;
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200001a0 	.word	0x200001a0
 8000c48:	20000178 	.word	0x20000178
 8000c4c:	20000238 	.word	0x20000238
 8000c50:	20000140 	.word	0x20000140
 8000c54:	20000228 	.word	0x20000228
 8000c58:	20000141 	.word	0x20000141
 8000c5c:	20000230 	.word	0x20000230
 8000c60:	20000142 	.word	0x20000142

08000c64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	usartDataInFlag = SET;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <HAL_UART_RxCpltCallback+0x18>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]

}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	20000144 	.word	0x20000144

08000c80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	CanDataRqFlag = SET;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]

}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	20000143 	.word	0x20000143

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_MspInit+0x40>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <HAL_MspInit+0x40>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6193      	str	r3, [r2, #24]
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_MspInit+0x40>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_MspInit+0x40>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <HAL_MspInit+0x40>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	61d3      	str	r3, [r2, #28]
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_MspInit+0x40>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	40021000 	.word	0x40021000

08000cec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a24      	ldr	r2, [pc, #144]	; (8000d98 <HAL_CAN_MspInit+0xac>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d141      	bne.n	8000d90 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <HAL_CAN_MspInit+0xb0>)
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <HAL_CAN_MspInit+0xb0>)
 8000d12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d16:	61d3      	str	r3, [r2, #28]
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <HAL_CAN_MspInit+0xb0>)
 8000d1a:	69db      	ldr	r3, [r3, #28]
 8000d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <HAL_CAN_MspInit+0xb0>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <HAL_CAN_MspInit+0xb0>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <HAL_CAN_MspInit+0xb0>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4813      	ldr	r0, [pc, #76]	; (8000da0 <HAL_CAN_MspInit+0xb4>)
 8000d52:	f001 f9ad 	bl	80020b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480d      	ldr	r0, [pc, #52]	; (8000da0 <HAL_CAN_MspInit+0xb4>)
 8000d6c:	f001 f9a0 	bl	80020b0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	2014      	movs	r0, #20
 8000d76:	f001 f8b4 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000d7a:	2014      	movs	r0, #20
 8000d7c:	f001 f8cd 	bl	8001f1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	2015      	movs	r0, #21
 8000d86:	f001 f8ac 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000d8a:	2015      	movs	r0, #21
 8000d8c:	f001 f8c5 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40006400 	.word	0x40006400
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010800 	.word	0x40010800

08000da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db4:	d113      	bne.n	8000dde <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_TIM_Base_MspInit+0x44>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <HAL_TIM_Base_MspInit+0x44>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_TIM_Base_MspInit+0x44>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	201c      	movs	r0, #28
 8000dd4:	f001 f885 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dd8:	201c      	movs	r0, #28
 8000dda:	f001 f89e 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a20      	ldr	r2, [pc, #128]	; (8000e88 <HAL_UART_MspInit+0x9c>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d139      	bne.n	8000e80 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <HAL_UART_MspInit+0xa0>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <HAL_UART_MspInit+0xa0>)
 8000e12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <HAL_UART_MspInit+0xa0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_UART_MspInit+0xa0>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <HAL_UART_MspInit+0xa0>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_UART_MspInit+0xa0>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <HAL_UART_MspInit+0xa4>)
 8000e52:	f001 f92d 	bl	80020b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4809      	ldr	r0, [pc, #36]	; (8000e90 <HAL_UART_MspInit+0xa4>)
 8000e6c:	f001 f920 	bl	80020b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2025      	movs	r0, #37	; 0x25
 8000e76:	f001 f834 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e7a:	2025      	movs	r0, #37	; 0x25
 8000e7c:	f001 f84d 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40013800 	.word	0x40013800
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010800 	.word	0x40010800

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr

08000ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eda:	f000 f8d3 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000eea:	f000 fcff 	bl	80018ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000008c 	.word	0x2000008c

08000ef8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <CAN1_RX1_IRQHandler+0x10>)
 8000efe:	f000 fcf5 	bl	80018ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000008c 	.word	0x2000008c

08000f0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <TIM2_IRQHandler+0x10>)
 8000f12:	f001 ff31 	bl	8002d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000b4 	.word	0x200000b4

08000f20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <USART1_IRQHandler+0x10>)
 8000f26:	f002 fb7f 	bl	8003628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000fc 	.word	0x200000fc

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f002 ff88 	bl	8003e78 <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20002800 	.word	0x20002800
 8000f94:	00000400 	.word	0x00000400
 8000f98:	20000248 	.word	0x20000248
 8000f9c:	20000260 	.word	0x20000260

08000fa0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	; (8000ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fd2:	f7ff ffe5 	bl	8000fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f002 ff55 	bl	8003e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fda:	f7ff faa7 	bl	800052c <main>
  bx lr
 8000fde:	4770      	bx	lr
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fe8:	08004888 	.word	0x08004888
  ldr r2, =_sbss
 8000fec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ff0:	20000260 	.word	0x20000260

08000ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC1_2_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_Init+0x28>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_Init+0x28>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001008:	2003      	movs	r0, #3
 800100a:	f000 ff5f 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100e:	200f      	movs	r0, #15
 8001010:	f000 f808 	bl	8001024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001014:	f7ff fe48 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40022000 	.word	0x40022000

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x54>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x58>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 ff77 	bl	8001f36 <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00e      	b.n	8001070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d80a      	bhi.n	800106e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f000 ff3f 	bl	8001ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_InitTick+0x5c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000000 	.word	0x20000000
 800107c:	20000008 	.word	0x20000008
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x1c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x20>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a03      	ldr	r2, [pc, #12]	; (80010a4 <HAL_IncTick+0x20>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	20000008 	.word	0x20000008
 80010a4:	2000024c 	.word	0x2000024c

080010a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <HAL_GetTick+0x10>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	2000024c 	.word	0x2000024c

080010bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e0ed      	b.n	80012aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d102      	bne.n	80010e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fe06 	bl	8000cec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f0:	f7ff ffda 	bl	80010a8 <HAL_GetTick>
 80010f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010f6:	e012      	b.n	800111e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f8:	f7ff ffd6 	bl	80010a8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b0a      	cmp	r3, #10
 8001104:	d90b      	bls.n	800111e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2205      	movs	r2, #5
 8001116:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e0c5      	b.n	80012aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0e5      	beq.n	80010f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0202 	bic.w	r2, r2, #2
 800113a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800113c:	f7ff ffb4 	bl	80010a8 <HAL_GetTick>
 8001140:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001142:	e012      	b.n	800116a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001144:	f7ff ffb0 	bl	80010a8 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b0a      	cmp	r3, #10
 8001150:	d90b      	bls.n	800116a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2205      	movs	r2, #5
 8001162:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e09f      	b.n	80012aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e5      	bne.n	8001144 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7e1b      	ldrb	r3, [r3, #24]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d108      	bne.n	8001192 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e007      	b.n	80011a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7e5b      	ldrb	r3, [r3, #25]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d108      	bne.n	80011bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e007      	b.n	80011cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7e9b      	ldrb	r3, [r3, #26]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d108      	bne.n	80011e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0220 	orr.w	r2, r2, #32
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e007      	b.n	80011f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0220 	bic.w	r2, r2, #32
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7edb      	ldrb	r3, [r3, #27]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d108      	bne.n	8001210 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0210 	bic.w	r2, r2, #16
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	e007      	b.n	8001220 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0210 	orr.w	r2, r2, #16
 800121e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7f1b      	ldrb	r3, [r3, #28]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d108      	bne.n	800123a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0208 	orr.w	r2, r2, #8
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e007      	b.n	800124a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0208 	bic.w	r2, r2, #8
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7f5b      	ldrb	r3, [r3, #29]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d108      	bne.n	8001264 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0204 	orr.w	r2, r2, #4
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e007      	b.n	8001274 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0204 	bic.w	r2, r2, #4
 8001272:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	ea42 0103 	orr.w	r1, r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b087      	sub	sp, #28
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80012ca:	7cfb      	ldrb	r3, [r7, #19]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d003      	beq.n	80012d8 <HAL_CAN_ConfigFilter+0x26>
 80012d0:	7cfb      	ldrb	r3, [r7, #19]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	f040 80aa 	bne.w	800142c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012de:	f043 0201 	orr.w	r2, r3, #1
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	2201      	movs	r2, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43db      	mvns	r3, r3
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d123      	bne.n	800135a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	43db      	mvns	r3, r3
 800131c:	401a      	ands	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001334:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3248      	adds	r2, #72	; 0x48
 800133a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800134e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001350:	6979      	ldr	r1, [r7, #20]
 8001352:	3348      	adds	r3, #72	; 0x48
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d122      	bne.n	80013a8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	431a      	orrs	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001382:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3248      	adds	r2, #72	; 0x48
 8001388:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800139c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800139e:	6979      	ldr	r1, [r7, #20]
 80013a0:	3348      	adds	r3, #72	; 0x48
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	440b      	add	r3, r1
 80013a6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d109      	bne.n	80013c4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013c2:	e007      	b.n	80013d4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	431a      	orrs	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d109      	bne.n	80013f0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013ee:	e007      	b.n	8001400 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	431a      	orrs	r2, r3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d107      	bne.n	8001418 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	431a      	orrs	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800141e:	f023 0201 	bic.w	r2, r3, #1
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	e006      	b.n	800143a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
  }
}
 800143a:	4618      	mov	r0, r3
 800143c:	371c      	adds	r7, #28
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d12e      	bne.n	80014b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2202      	movs	r2, #2
 800145c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001470:	f7ff fe1a 	bl	80010a8 <HAL_GetTick>
 8001474:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001476:	e012      	b.n	800149e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001478:	f7ff fe16 	bl	80010a8 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b0a      	cmp	r3, #10
 8001484:	d90b      	bls.n	800149e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2205      	movs	r2, #5
 8001496:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e012      	b.n	80014c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e5      	bne.n	8001478 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e006      	b.n	80014c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
  }
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ea:	7ffb      	ldrb	r3, [r7, #31]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d003      	beq.n	80014f8 <HAL_CAN_AddTxMessage+0x2c>
 80014f0:	7ffb      	ldrb	r3, [r7, #31]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	f040 80b8 	bne.w	8001668 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10a      	bne.n	8001518 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001508:	2b00      	cmp	r3, #0
 800150a:	d105      	bne.n	8001518 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 80a0 	beq.w	8001658 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	0e1b      	lsrs	r3, r3, #24
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d907      	bls.n	8001538 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e09e      	b.n	8001676 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001538:	2201      	movs	r2, #1
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	409a      	lsls	r2, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10d      	bne.n	8001566 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001554:	68f9      	ldr	r1, [r7, #12]
 8001556:	6809      	ldr	r1, [r1, #0]
 8001558:	431a      	orrs	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3318      	adds	r3, #24
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	440b      	add	r3, r1
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e00f      	b.n	8001586 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001570:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001576:	68f9      	ldr	r1, [r7, #12]
 8001578:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800157a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	3318      	adds	r3, #24
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	440b      	add	r3, r1
 8001584:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6819      	ldr	r1, [r3, #0]
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	691a      	ldr	r2, [r3, #16]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3318      	adds	r3, #24
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	440b      	add	r3, r1
 8001596:	3304      	adds	r3, #4
 8001598:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	7d1b      	ldrb	r3, [r3, #20]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d111      	bne.n	80015c6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3318      	adds	r3, #24
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	4413      	add	r3, r2
 80015ae:	3304      	adds	r3, #4
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	6811      	ldr	r1, [r2, #0]
 80015b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3318      	adds	r3, #24
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	440b      	add	r3, r1
 80015c2:	3304      	adds	r3, #4
 80015c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3307      	adds	r3, #7
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	061a      	lsls	r2, r3, #24
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3306      	adds	r3, #6
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	041b      	lsls	r3, r3, #16
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3305      	adds	r3, #5
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	4313      	orrs	r3, r2
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	3204      	adds	r2, #4
 80015e6:	7812      	ldrb	r2, [r2, #0]
 80015e8:	4610      	mov	r0, r2
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	6811      	ldr	r1, [r2, #0]
 80015ee:	ea43 0200 	orr.w	r2, r3, r0
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	440b      	add	r3, r1
 80015f8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3303      	adds	r3, #3
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	061a      	lsls	r2, r3, #24
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3302      	adds	r3, #2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	041b      	lsls	r3, r3, #16
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3301      	adds	r3, #1
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	4313      	orrs	r3, r2
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	4610      	mov	r0, r2
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	6811      	ldr	r1, [r2, #0]
 8001624:	ea43 0200 	orr.w	r2, r3, r0
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	440b      	add	r3, r1
 800162e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001632:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3318      	adds	r3, #24
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	4413      	add	r3, r2
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	6811      	ldr	r1, [r2, #0]
 8001646:	f043 0201 	orr.w	r2, r3, #1
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3318      	adds	r3, #24
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	440b      	add	r3, r1
 8001652:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	e00e      	b.n	8001676 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e006      	b.n	8001676 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
  }
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001694:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d003      	beq.n	80016a4 <HAL_CAN_GetRxMessage+0x24>
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	f040 80f3 	bne.w	800188a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10e      	bne.n	80016c8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d116      	bne.n	80016e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0e7      	b.n	8001898 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d107      	bne.n	80016e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0d8      	b.n	8001898 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	331b      	adds	r3, #27
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	4413      	add	r3, r2
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0204 	and.w	r2, r3, #4
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10c      	bne.n	800171e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	331b      	adds	r3, #27
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4413      	add	r3, r2
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	0d5b      	lsrs	r3, r3, #21
 8001714:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	e00b      	b.n	8001736 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	331b      	adds	r3, #27
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	08db      	lsrs	r3, r3, #3
 800172e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	331b      	adds	r3, #27
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	4413      	add	r3, r2
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0202 	and.w	r2, r3, #2
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	331b      	adds	r3, #27
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	4413      	add	r3, r2
 8001758:	3304      	adds	r3, #4
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 020f 	and.w	r2, r3, #15
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	331b      	adds	r3, #27
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	4413      	add	r3, r2
 8001770:	3304      	adds	r3, #4
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	b2da      	uxtb	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	331b      	adds	r3, #27
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	4413      	add	r3, r2
 8001788:	3304      	adds	r3, #4
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0c1b      	lsrs	r3, r3, #16
 800178e:	b29a      	uxth	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4413      	add	r3, r2
 800179e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	0a1a      	lsrs	r2, r3, #8
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0c1a      	lsrs	r2, r3, #16
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	3302      	adds	r3, #2
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	4413      	add	r3, r2
 80017e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	0e1a      	lsrs	r2, r3, #24
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	3303      	adds	r3, #3
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	3304      	adds	r3, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	4413      	add	r3, r2
 800181a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0a1a      	lsrs	r2, r3, #8
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3305      	adds	r3, #5
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0c1a      	lsrs	r2, r3, #16
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	3306      	adds	r3, #6
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	4413      	add	r3, r2
 800184e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0e1a      	lsrs	r2, r3, #24
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	3307      	adds	r3, #7
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d108      	bne.n	8001876 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0220 	orr.w	r2, r2, #32
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	e007      	b.n	8001886 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f042 0220 	orr.w	r2, r2, #32
 8001884:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e006      	b.n	8001898 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
  }
}
 8001898:	4618      	mov	r0, r3
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d002      	beq.n	80018c0 <HAL_CAN_ActivateNotification+0x1e>
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d109      	bne.n	80018d4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6959      	ldr	r1, [r3, #20]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	e006      	b.n	80018e2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
  }
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d07c      	beq.n	8001a2c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f983 	bl	8001c5a <HAL_CAN_TxMailbox0CompleteCallback>
 8001954:	e016      	b.n	8001984 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
 8001968:	e00c      	b.n	8001984 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d004      	beq.n	800197e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
 800197c:	e002      	b.n	8001984 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f986 	bl	8001c90 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198a:	2b00      	cmp	r3, #0
 800198c:	d024      	beq.n	80019d8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001996:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f962 	bl	8001c6c <HAL_CAN_TxMailbox1CompleteCallback>
 80019a8:	e016      	b.n	80019d8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d004      	beq.n	80019be <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
 80019bc:	e00c      	b.n	80019d8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
 80019d0:	e002      	b.n	80019d8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f965 	bl	8001ca2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d024      	beq.n	8001a2c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f941 	bl	8001c7e <HAL_CAN_TxMailbox2CompleteCallback>
 80019fc:	e016      	b.n	8001a2c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a10:	e00c      	b.n	8001a2c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
 8001a24:	e002      	b.n	8001a2c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f944 	bl	8001cb4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00c      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2210      	movs	r2, #16
 8001a4e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2208      	movs	r2, #8
 8001a6a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f92a 	bl	8001cc6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d009      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff f89e 	bl	8000bcc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00c      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2208      	movs	r2, #8
 8001ace:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f90a 	bl	8001cea <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d009      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f8f2 	bl	8001cd8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2210      	movs	r2, #16
 8001b0e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f8f3 	bl	8001cfc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00b      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2208      	movs	r2, #8
 8001b30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f8eb 	bl	8001d0e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d07b      	beq.n	8001c3a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d072      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d008      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d008      	beq.n	8001b84 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	f043 0302 	orr.w	r3, r3, #2
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d008      	beq.n	8001ba0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d043      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d03e      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bba:	2b60      	cmp	r3, #96	; 0x60
 8001bbc:	d02b      	beq.n	8001c16 <HAL_CAN_IRQHandler+0x32a>
 8001bbe:	2b60      	cmp	r3, #96	; 0x60
 8001bc0:	d82e      	bhi.n	8001c20 <HAL_CAN_IRQHandler+0x334>
 8001bc2:	2b50      	cmp	r3, #80	; 0x50
 8001bc4:	d022      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x320>
 8001bc6:	2b50      	cmp	r3, #80	; 0x50
 8001bc8:	d82a      	bhi.n	8001c20 <HAL_CAN_IRQHandler+0x334>
 8001bca:	2b40      	cmp	r3, #64	; 0x40
 8001bcc:	d019      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x316>
 8001bce:	2b40      	cmp	r3, #64	; 0x40
 8001bd0:	d826      	bhi.n	8001c20 <HAL_CAN_IRQHandler+0x334>
 8001bd2:	2b30      	cmp	r3, #48	; 0x30
 8001bd4:	d010      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x30c>
 8001bd6:	2b30      	cmp	r3, #48	; 0x30
 8001bd8:	d822      	bhi.n	8001c20 <HAL_CAN_IRQHandler+0x334>
 8001bda:	2b10      	cmp	r3, #16
 8001bdc:	d002      	beq.n	8001be4 <HAL_CAN_IRQHandler+0x2f8>
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d005      	beq.n	8001bee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001be2:	e01d      	b.n	8001c20 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	f043 0308 	orr.w	r3, r3, #8
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bec:	e019      	b.n	8001c22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	f043 0310 	orr.w	r3, r3, #16
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf6:	e014      	b.n	8001c22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	f043 0320 	orr.w	r3, r3, #32
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c00:	e00f      	b.n	8001c22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c0a:	e00a      	b.n	8001c22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c14:	e005      	b.n	8001c22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c1e:	e000      	b.n	8001c22 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c20:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699a      	ldr	r2, [r3, #24]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c30:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2204      	movs	r2, #4
 8001c38:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f867 	bl	8001d20 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr

08001d0e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
	...

08001d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d66:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	60d3      	str	r3, [r2, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <__NVIC_GetPriorityGrouping+0x18>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 0307 	and.w	r3, r3, #7
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	db0b      	blt.n	8001dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	f003 021f 	and.w	r2, r3, #31
 8001db0:	4906      	ldr	r1, [pc, #24]	; (8001dcc <__NVIC_EnableIRQ+0x34>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	2001      	movs	r0, #1
 8001dba:	fa00 f202 	lsl.w	r2, r0, r2
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	; (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	; (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
         );
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	; 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e98:	d301      	bcc.n	8001e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00f      	b.n	8001ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <SysTick_Config+0x40>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f7ff ff90 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb8:	2207      	movs	r2, #7
 8001eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	e000e010 	.word	0xe000e010

08001ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff2d 	bl	8001d34 <__NVIC_SetPriorityGrouping>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef4:	f7ff ff42 	bl	8001d7c <__NVIC_GetPriorityGrouping>
 8001ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	6978      	ldr	r0, [r7, #20]
 8001f00:	f7ff ff90 	bl	8001e24 <NVIC_EncodePriority>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff5f 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff35 	bl	8001d98 <__NVIC_EnableIRQ>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffa2 	bl	8001e88 <SysTick_Config>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d008      	beq.n	8001f76 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2204      	movs	r2, #4
 8001f68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e020      	b.n	8001fb8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 020e 	bic.w	r2, r2, #14
 8001f84:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d005      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2204      	movs	r2, #4
 8001fde:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e051      	b.n	800208a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 020e 	bic.w	r2, r2, #14
 8001ff4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a22      	ldr	r2, [pc, #136]	; (8002094 <HAL_DMA_Abort_IT+0xd0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d029      	beq.n	8002064 <HAL_DMA_Abort_IT+0xa0>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a20      	ldr	r2, [pc, #128]	; (8002098 <HAL_DMA_Abort_IT+0xd4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d022      	beq.n	8002060 <HAL_DMA_Abort_IT+0x9c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1f      	ldr	r2, [pc, #124]	; (800209c <HAL_DMA_Abort_IT+0xd8>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d01a      	beq.n	800205a <HAL_DMA_Abort_IT+0x96>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <HAL_DMA_Abort_IT+0xdc>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d012      	beq.n	8002054 <HAL_DMA_Abort_IT+0x90>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <HAL_DMA_Abort_IT+0xe0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00a      	beq.n	800204e <HAL_DMA_Abort_IT+0x8a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1a      	ldr	r2, [pc, #104]	; (80020a8 <HAL_DMA_Abort_IT+0xe4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d102      	bne.n	8002048 <HAL_DMA_Abort_IT+0x84>
 8002042:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002046:	e00e      	b.n	8002066 <HAL_DMA_Abort_IT+0xa2>
 8002048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800204c:	e00b      	b.n	8002066 <HAL_DMA_Abort_IT+0xa2>
 800204e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002052:	e008      	b.n	8002066 <HAL_DMA_Abort_IT+0xa2>
 8002054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002058:	e005      	b.n	8002066 <HAL_DMA_Abort_IT+0xa2>
 800205a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800205e:	e002      	b.n	8002066 <HAL_DMA_Abort_IT+0xa2>
 8002060:	2310      	movs	r3, #16
 8002062:	e000      	b.n	8002066 <HAL_DMA_Abort_IT+0xa2>
 8002064:	2301      	movs	r3, #1
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <HAL_DMA_Abort_IT+0xe8>)
 8002068:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	4798      	blx	r3
    } 
  }
  return status;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020008 	.word	0x40020008
 8002098:	4002001c 	.word	0x4002001c
 800209c:	40020030 	.word	0x40020030
 80020a0:	40020044 	.word	0x40020044
 80020a4:	40020058 	.word	0x40020058
 80020a8:	4002006c 	.word	0x4002006c
 80020ac:	40020000 	.word	0x40020000

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b08b      	sub	sp, #44	; 0x2c
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c2:	e161      	b.n	8002388 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020c4:	2201      	movs	r2, #1
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	429a      	cmp	r2, r3
 80020de:	f040 8150 	bne.w	8002382 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4a97      	ldr	r2, [pc, #604]	; (8002344 <HAL_GPIO_Init+0x294>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d05e      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 80020ec:	4a95      	ldr	r2, [pc, #596]	; (8002344 <HAL_GPIO_Init+0x294>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d875      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 80020f2:	4a95      	ldr	r2, [pc, #596]	; (8002348 <HAL_GPIO_Init+0x298>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d058      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 80020f8:	4a93      	ldr	r2, [pc, #588]	; (8002348 <HAL_GPIO_Init+0x298>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d86f      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 80020fe:	4a93      	ldr	r2, [pc, #588]	; (800234c <HAL_GPIO_Init+0x29c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d052      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 8002104:	4a91      	ldr	r2, [pc, #580]	; (800234c <HAL_GPIO_Init+0x29c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d869      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 800210a:	4a91      	ldr	r2, [pc, #580]	; (8002350 <HAL_GPIO_Init+0x2a0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d04c      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 8002110:	4a8f      	ldr	r2, [pc, #572]	; (8002350 <HAL_GPIO_Init+0x2a0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d863      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 8002116:	4a8f      	ldr	r2, [pc, #572]	; (8002354 <HAL_GPIO_Init+0x2a4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d046      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 800211c:	4a8d      	ldr	r2, [pc, #564]	; (8002354 <HAL_GPIO_Init+0x2a4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d85d      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 8002122:	2b12      	cmp	r3, #18
 8002124:	d82a      	bhi.n	800217c <HAL_GPIO_Init+0xcc>
 8002126:	2b12      	cmp	r3, #18
 8002128:	d859      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 800212a:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <HAL_GPIO_Init+0x80>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	080021ab 	.word	0x080021ab
 8002134:	08002185 	.word	0x08002185
 8002138:	08002197 	.word	0x08002197
 800213c:	080021d9 	.word	0x080021d9
 8002140:	080021df 	.word	0x080021df
 8002144:	080021df 	.word	0x080021df
 8002148:	080021df 	.word	0x080021df
 800214c:	080021df 	.word	0x080021df
 8002150:	080021df 	.word	0x080021df
 8002154:	080021df 	.word	0x080021df
 8002158:	080021df 	.word	0x080021df
 800215c:	080021df 	.word	0x080021df
 8002160:	080021df 	.word	0x080021df
 8002164:	080021df 	.word	0x080021df
 8002168:	080021df 	.word	0x080021df
 800216c:	080021df 	.word	0x080021df
 8002170:	080021df 	.word	0x080021df
 8002174:	0800218d 	.word	0x0800218d
 8002178:	080021a1 	.word	0x080021a1
 800217c:	4a76      	ldr	r2, [pc, #472]	; (8002358 <HAL_GPIO_Init+0x2a8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002182:	e02c      	b.n	80021de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	623b      	str	r3, [r7, #32]
          break;
 800218a:	e029      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	3304      	adds	r3, #4
 8002192:	623b      	str	r3, [r7, #32]
          break;
 8002194:	e024      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	3308      	adds	r3, #8
 800219c:	623b      	str	r3, [r7, #32]
          break;
 800219e:	e01f      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	330c      	adds	r3, #12
 80021a6:	623b      	str	r3, [r7, #32]
          break;
 80021a8:	e01a      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d102      	bne.n	80021b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021b2:	2304      	movs	r3, #4
 80021b4:	623b      	str	r3, [r7, #32]
          break;
 80021b6:	e013      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d105      	bne.n	80021cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c0:	2308      	movs	r3, #8
 80021c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	611a      	str	r2, [r3, #16]
          break;
 80021ca:	e009      	b.n	80021e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021cc:	2308      	movs	r3, #8
 80021ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	615a      	str	r2, [r3, #20]
          break;
 80021d6:	e003      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
          break;
 80021dc:	e000      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          break;
 80021de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2bff      	cmp	r3, #255	; 0xff
 80021e4:	d801      	bhi.n	80021ea <HAL_GPIO_Init+0x13a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	e001      	b.n	80021ee <HAL_GPIO_Init+0x13e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3304      	adds	r3, #4
 80021ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2bff      	cmp	r3, #255	; 0xff
 80021f4:	d802      	bhi.n	80021fc <HAL_GPIO_Init+0x14c>
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	e002      	b.n	8002202 <HAL_GPIO_Init+0x152>
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	3b08      	subs	r3, #8
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	210f      	movs	r1, #15
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	401a      	ands	r2, r3
 8002214:	6a39      	ldr	r1, [r7, #32]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	431a      	orrs	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 80a9 	beq.w	8002382 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002230:	4b4a      	ldr	r3, [pc, #296]	; (800235c <HAL_GPIO_Init+0x2ac>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a49      	ldr	r2, [pc, #292]	; (800235c <HAL_GPIO_Init+0x2ac>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	4b47      	ldr	r3, [pc, #284]	; (800235c <HAL_GPIO_Init+0x2ac>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002248:	4a45      	ldr	r2, [pc, #276]	; (8002360 <HAL_GPIO_Init+0x2b0>)
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002254:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	220f      	movs	r2, #15
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a3d      	ldr	r2, [pc, #244]	; (8002364 <HAL_GPIO_Init+0x2b4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00d      	beq.n	8002290 <HAL_GPIO_Init+0x1e0>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a3c      	ldr	r2, [pc, #240]	; (8002368 <HAL_GPIO_Init+0x2b8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d007      	beq.n	800228c <HAL_GPIO_Init+0x1dc>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3b      	ldr	r2, [pc, #236]	; (800236c <HAL_GPIO_Init+0x2bc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d101      	bne.n	8002288 <HAL_GPIO_Init+0x1d8>
 8002284:	2302      	movs	r3, #2
 8002286:	e004      	b.n	8002292 <HAL_GPIO_Init+0x1e2>
 8002288:	2303      	movs	r3, #3
 800228a:	e002      	b.n	8002292 <HAL_GPIO_Init+0x1e2>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_GPIO_Init+0x1e2>
 8002290:	2300      	movs	r3, #0
 8002292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002294:	f002 0203 	and.w	r2, r2, #3
 8002298:	0092      	lsls	r2, r2, #2
 800229a:	4093      	lsls	r3, r2
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022a2:	492f      	ldr	r1, [pc, #188]	; (8002360 <HAL_GPIO_Init+0x2b0>)
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022bc:	4b2c      	ldr	r3, [pc, #176]	; (8002370 <HAL_GPIO_Init+0x2c0>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	492b      	ldr	r1, [pc, #172]	; (8002370 <HAL_GPIO_Init+0x2c0>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022ca:	4b29      	ldr	r3, [pc, #164]	; (8002370 <HAL_GPIO_Init+0x2c0>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4927      	ldr	r1, [pc, #156]	; (8002370 <HAL_GPIO_Init+0x2c0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <HAL_GPIO_Init+0x2c0>)
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4921      	ldr	r1, [pc, #132]	; (8002370 <HAL_GPIO_Init+0x2c0>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022f2:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <HAL_GPIO_Init+0x2c0>)
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	491d      	ldr	r1, [pc, #116]	; (8002370 <HAL_GPIO_Init+0x2c0>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800230c:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_GPIO_Init+0x2c0>)
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	4917      	ldr	r1, [pc, #92]	; (8002370 <HAL_GPIO_Init+0x2c0>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_GPIO_Init+0x2c0>)
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	43db      	mvns	r3, r3
 8002322:	4913      	ldr	r1, [pc, #76]	; (8002370 <HAL_GPIO_Init+0x2c0>)
 8002324:	4013      	ands	r3, r2
 8002326:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01f      	beq.n	8002374 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002334:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <HAL_GPIO_Init+0x2c0>)
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	490d      	ldr	r1, [pc, #52]	; (8002370 <HAL_GPIO_Init+0x2c0>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	60cb      	str	r3, [r1, #12]
 8002340:	e01f      	b.n	8002382 <HAL_GPIO_Init+0x2d2>
 8002342:	bf00      	nop
 8002344:	10320000 	.word	0x10320000
 8002348:	10310000 	.word	0x10310000
 800234c:	10220000 	.word	0x10220000
 8002350:	10210000 	.word	0x10210000
 8002354:	10120000 	.word	0x10120000
 8002358:	10110000 	.word	0x10110000
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000
 8002364:	40010800 	.word	0x40010800
 8002368:	40010c00 	.word	0x40010c00
 800236c:	40011000 	.word	0x40011000
 8002370:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_GPIO_Init+0x2f4>)
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	43db      	mvns	r3, r3
 800237c:	4909      	ldr	r1, [pc, #36]	; (80023a4 <HAL_GPIO_Init+0x2f4>)
 800237e:	4013      	ands	r3, r2
 8002380:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	3301      	adds	r3, #1
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	fa22 f303 	lsr.w	r3, r2, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	f47f ae96 	bne.w	80020c4 <HAL_GPIO_Init+0x14>
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	372c      	adds	r7, #44	; 0x2c
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	40010400 	.word	0x40010400

080023a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
 80023b4:	4613      	mov	r3, r2
 80023b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023b8:	787b      	ldrb	r3, [r7, #1]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023be:	887a      	ldrh	r2, [r7, #2]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023c4:	e003      	b.n	80023ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023c6:	887b      	ldrh	r3, [r7, #2]
 80023c8:	041a      	lsls	r2, r3, #16
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	611a      	str	r2, [r3, #16]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4013      	ands	r3, r2
 80023f0:	041a      	lsls	r2, r3, #16
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43d9      	mvns	r1, r3
 80023f6:	887b      	ldrh	r3, [r7, #2]
 80023f8:	400b      	ands	r3, r1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	611a      	str	r2, [r3, #16]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
	...

0800240c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e272      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 8087 	beq.w	800253a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800242c:	4b92      	ldr	r3, [pc, #584]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b04      	cmp	r3, #4
 8002436:	d00c      	beq.n	8002452 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002438:	4b8f      	ldr	r3, [pc, #572]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d112      	bne.n	800246a <HAL_RCC_OscConfig+0x5e>
 8002444:	4b8c      	ldr	r3, [pc, #560]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002450:	d10b      	bne.n	800246a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002452:	4b89      	ldr	r3, [pc, #548]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d06c      	beq.n	8002538 <HAL_RCC_OscConfig+0x12c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d168      	bne.n	8002538 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e24c      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x76>
 8002474:	4b80      	ldr	r3, [pc, #512]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a7f      	ldr	r2, [pc, #508]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800247a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e02e      	b.n	80024e0 <HAL_RCC_OscConfig+0xd4>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x98>
 800248a:	4b7b      	ldr	r3, [pc, #492]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a7a      	ldr	r2, [pc, #488]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b78      	ldr	r3, [pc, #480]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a77      	ldr	r2, [pc, #476]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800249c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e01d      	b.n	80024e0 <HAL_RCC_OscConfig+0xd4>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0xbc>
 80024ae:	4b72      	ldr	r3, [pc, #456]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a71      	ldr	r2, [pc, #452]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6e      	ldr	r2, [pc, #440]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0xd4>
 80024c8:	4b6b      	ldr	r3, [pc, #428]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a6a      	ldr	r2, [pc, #424]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b68      	ldr	r3, [pc, #416]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a67      	ldr	r2, [pc, #412]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe fdde 	bl	80010a8 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe fdda 	bl	80010a8 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e200      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b5d      	ldr	r3, [pc, #372]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0xe4>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fdca 	bl	80010a8 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002518:	f7fe fdc6 	bl	80010a8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1ec      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x10c>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d063      	beq.n	800260e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002546:	4b4c      	ldr	r3, [pc, #304]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002552:	4b49      	ldr	r3, [pc, #292]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b08      	cmp	r3, #8
 800255c:	d11c      	bne.n	8002598 <HAL_RCC_OscConfig+0x18c>
 800255e:	4b46      	ldr	r3, [pc, #280]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d116      	bne.n	8002598 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256a:	4b43      	ldr	r3, [pc, #268]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x176>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d001      	beq.n	8002582 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e1c0      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4939      	ldr	r1, [pc, #228]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002596:	e03a      	b.n	800260e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a0:	4b36      	ldr	r3, [pc, #216]	; (800267c <HAL_RCC_OscConfig+0x270>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7fe fd7f 	bl	80010a8 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ae:	f7fe fd7b 	bl	80010a8 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e1a1      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4927      	ldr	r1, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
 80025e0:	e015      	b.n	800260e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e2:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_RCC_OscConfig+0x270>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fd5e 	bl	80010a8 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f0:	f7fe fd5a 	bl	80010a8 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e180      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d03a      	beq.n	8002690 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d019      	beq.n	8002656 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002622:	4b17      	ldr	r3, [pc, #92]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002628:	f7fe fd3e 	bl	80010a8 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002630:	f7fe fd3a 	bl	80010a8 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e160      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800264e:	2001      	movs	r0, #1
 8002650:	f000 fad8 	bl	8002c04 <RCC_Delay>
 8002654:	e01c      	b.n	8002690 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265c:	f7fe fd24 	bl	80010a8 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002662:	e00f      	b.n	8002684 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002664:	f7fe fd20 	bl	80010a8 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d908      	bls.n	8002684 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e146      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	42420000 	.word	0x42420000
 8002680:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002684:	4b92      	ldr	r3, [pc, #584]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1e9      	bne.n	8002664 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80a6 	beq.w	80027ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a2:	4b8b      	ldr	r3, [pc, #556]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10d      	bne.n	80026ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	4b88      	ldr	r3, [pc, #544]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	4a87      	ldr	r2, [pc, #540]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b8:	61d3      	str	r3, [r2, #28]
 80026ba:	4b85      	ldr	r3, [pc, #532]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c6:	2301      	movs	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ca:	4b82      	ldr	r3, [pc, #520]	; (80028d4 <HAL_RCC_OscConfig+0x4c8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d118      	bne.n	8002708 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d6:	4b7f      	ldr	r3, [pc, #508]	; (80028d4 <HAL_RCC_OscConfig+0x4c8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7e      	ldr	r2, [pc, #504]	; (80028d4 <HAL_RCC_OscConfig+0x4c8>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fce1 	bl	80010a8 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ea:	f7fe fcdd 	bl	80010a8 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b64      	cmp	r3, #100	; 0x64
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e103      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <HAL_RCC_OscConfig+0x4c8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x312>
 8002710:	4b6f      	ldr	r3, [pc, #444]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	4a6e      	ldr	r2, [pc, #440]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6213      	str	r3, [r2, #32]
 800271c:	e02d      	b.n	800277a <HAL_RCC_OscConfig+0x36e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x334>
 8002726:	4b6a      	ldr	r3, [pc, #424]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a69      	ldr	r2, [pc, #420]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6213      	str	r3, [r2, #32]
 8002732:	4b67      	ldr	r3, [pc, #412]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	4a66      	ldr	r2, [pc, #408]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	6213      	str	r3, [r2, #32]
 800273e:	e01c      	b.n	800277a <HAL_RCC_OscConfig+0x36e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b05      	cmp	r3, #5
 8002746:	d10c      	bne.n	8002762 <HAL_RCC_OscConfig+0x356>
 8002748:	4b61      	ldr	r3, [pc, #388]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4a60      	ldr	r2, [pc, #384]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	6213      	str	r3, [r2, #32]
 8002754:	4b5e      	ldr	r3, [pc, #376]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4a5d      	ldr	r2, [pc, #372]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6213      	str	r3, [r2, #32]
 8002760:	e00b      	b.n	800277a <HAL_RCC_OscConfig+0x36e>
 8002762:	4b5b      	ldr	r3, [pc, #364]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4a5a      	ldr	r2, [pc, #360]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	f023 0301 	bic.w	r3, r3, #1
 800276c:	6213      	str	r3, [r2, #32]
 800276e:	4b58      	ldr	r3, [pc, #352]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4a57      	ldr	r2, [pc, #348]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	f023 0304 	bic.w	r3, r3, #4
 8002778:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d015      	beq.n	80027ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002782:	f7fe fc91 	bl	80010a8 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7fe fc8d 	bl	80010a8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	; 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e0b1      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	4b4b      	ldr	r3, [pc, #300]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ee      	beq.n	800278a <HAL_RCC_OscConfig+0x37e>
 80027ac:	e014      	b.n	80027d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ae:	f7fe fc7b 	bl	80010a8 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b4:	e00a      	b.n	80027cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f7fe fc77 	bl	80010a8 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e09b      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027cc:	4b40      	ldr	r3, [pc, #256]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ee      	bne.n	80027b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d105      	bne.n	80027ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027de:	4b3c      	ldr	r3, [pc, #240]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4a3b      	ldr	r2, [pc, #236]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8087 	beq.w	8002902 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f4:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d061      	beq.n	80028c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d146      	bne.n	8002896 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002808:	4b33      	ldr	r3, [pc, #204]	; (80028d8 <HAL_RCC_OscConfig+0x4cc>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7fe fc4b 	bl	80010a8 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002816:	f7fe fc47 	bl	80010a8 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e06d      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f0      	bne.n	8002816 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283c:	d108      	bne.n	8002850 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	4921      	ldr	r1, [pc, #132]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002850:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a19      	ldr	r1, [r3, #32]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	430b      	orrs	r3, r1
 8002862:	491b      	ldr	r1, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <HAL_RCC_OscConfig+0x4cc>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7fe fc1b 	bl	80010a8 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002876:	f7fe fc17 	bl	80010a8 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e03d      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x46a>
 8002894:	e035      	b.n	8002902 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_RCC_OscConfig+0x4cc>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe fc04 	bl	80010a8 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fe fc00 	bl	80010a8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e026      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x498>
 80028c2:	e01e      	b.n	8002902 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e019      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
 80028d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCC_OscConfig+0x500>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d106      	bne.n	80028fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d001      	beq.n	8002902 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000

08002910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0d0      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002924:	4b6a      	ldr	r3, [pc, #424]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d910      	bls.n	8002954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b67      	ldr	r3, [pc, #412]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 0207 	bic.w	r2, r3, #7
 800293a:	4965      	ldr	r1, [pc, #404]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b63      	ldr	r3, [pc, #396]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0b8      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002976:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002984:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800298e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	494d      	ldr	r1, [pc, #308]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d040      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d115      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e07f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ce:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e073      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	4b3d      	ldr	r3, [pc, #244]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06b      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ee:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f023 0203 	bic.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4936      	ldr	r1, [pc, #216]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a00:	f7fe fb52 	bl	80010a8 <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a08:	f7fe fb4e 	bl	80010a8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e053      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 020c 	and.w	r2, r3, #12
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d1eb      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a30:	4b27      	ldr	r3, [pc, #156]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d210      	bcs.n	8002a60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 0207 	bic.w	r2, r3, #7
 8002a46:	4922      	ldr	r1, [pc, #136]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e032      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4916      	ldr	r1, [pc, #88]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a9e:	f000 f821 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	490a      	ldr	r1, [pc, #40]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	5ccb      	ldrb	r3, [r1, r3]
 8002ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab6:	4a09      	ldr	r2, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1cc>)
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1d0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fab0 	bl	8001024 <HAL_InitTick>

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	08004834 	.word	0x08004834
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	20000004 	.word	0x20000004

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	b490      	push	{r4, r7}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aea:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xac>)
 8002aec:	1d3c      	adds	r4, r7, #4
 8002aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002af4:	f240 2301 	movw	r3, #513	; 0x201
 8002af8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b0e:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d002      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x40>
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d003      	beq.n	8002b2a <HAL_RCC_GetSysClockFreq+0x46>
 8002b22:	e02b      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b24:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b26:	623b      	str	r3, [r7, #32]
      break;
 8002b28:	e02b      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	0c9b      	lsrs	r3, r3, #18
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	3328      	adds	r3, #40	; 0x28
 8002b34:	443b      	add	r3, r7
 8002b36:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b3a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d012      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b46:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	0c5b      	lsrs	r3, r3, #17
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	3328      	adds	r3, #40	; 0x28
 8002b52:	443b      	add	r3, r7
 8002b54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b5e:	fb03 f202 	mul.w	r2, r3, r2
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6a:	e004      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	623b      	str	r3, [r7, #32]
      break;
 8002b7a:	e002      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b7e:	623b      	str	r3, [r7, #32]
      break;
 8002b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b82:	6a3b      	ldr	r3, [r7, #32]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3728      	adds	r7, #40	; 0x28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc90      	pop	{r4, r7}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	08004824 	.word	0x08004824
 8002b94:	40021000 	.word	0x40021000
 8002b98:	007a1200 	.word	0x007a1200
 8002b9c:	003d0900 	.word	0x003d0900

08002ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba4:	4b02      	ldr	r3, [pc, #8]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	20000000 	.word	0x20000000

08002bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bb8:	f7ff fff2 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4903      	ldr	r1, [pc, #12]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	08004844 	.word	0x08004844

08002bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002be0:	f7ff ffde 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	0adb      	lsrs	r3, r3, #11
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	4903      	ldr	r1, [pc, #12]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	08004844 	.word	0x08004844

08002c04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <RCC_Delay+0x34>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <RCC_Delay+0x38>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	0a5b      	lsrs	r3, r3, #9
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c20:	bf00      	nop
  }
  while (Delay --);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1e5a      	subs	r2, r3, #1
 8002c26:	60fa      	str	r2, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f9      	bne.n	8002c20 <RCC_Delay+0x1c>
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	10624dd3 	.word	0x10624dd3

08002c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e041      	b.n	8002cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe f89c 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f000 fa6a 	bl	8003158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d001      	beq.n	8002cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e035      	b.n	8002d64 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <HAL_TIM_Base_Start_IT+0x90>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_TIM_Base_Start_IT+0x4e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d22:	d004      	beq.n	8002d2e <HAL_TIM_Base_Start_IT+0x4e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <HAL_TIM_Base_Start_IT+0x94>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d111      	bne.n	8002d52 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b06      	cmp	r3, #6
 8002d3e:	d010      	beq.n	8002d62 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d50:	e007      	b.n	8002d62 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40012c00 	.word	0x40012c00
 8002d74:	40000400 	.word	0x40000400

08002d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d122      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0202 	mvn.w	r2, #2
 8002da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f9b1 	bl	8003122 <HAL_TIM_IC_CaptureCallback>
 8002dc0:	e005      	b.n	8002dce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f9a4 	bl	8003110 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f9b3 	bl	8003134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d122      	bne.n	8002e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d11b      	bne.n	8002e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0204 	mvn.w	r2, #4
 8002df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f987 	bl	8003122 <HAL_TIM_IC_CaptureCallback>
 8002e14:	e005      	b.n	8002e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f97a 	bl	8003110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f989 	bl	8003134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d122      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d11b      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0208 	mvn.w	r2, #8
 8002e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2204      	movs	r2, #4
 8002e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f95d 	bl	8003122 <HAL_TIM_IC_CaptureCallback>
 8002e68:	e005      	b.n	8002e76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f950 	bl	8003110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f95f 	bl	8003134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d122      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d11b      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0210 	mvn.w	r2, #16
 8002ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f933 	bl	8003122 <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f926 	bl	8003110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f935 	bl	8003134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d10e      	bne.n	8002efc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d107      	bne.n	8002efc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0201 	mvn.w	r2, #1
 8002ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fec2 	bl	8000c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f06:	2b80      	cmp	r3, #128	; 0x80
 8002f08:	d10e      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f14:	2b80      	cmp	r3, #128	; 0x80
 8002f16:	d107      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fa67 	bl	80033f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	2b40      	cmp	r3, #64	; 0x40
 8002f34:	d10e      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f40:	2b40      	cmp	r3, #64	; 0x40
 8002f42:	d107      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f8f9 	bl	8003146 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d107      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0220 	mvn.w	r2, #32
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fa32 	bl	80033e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_TIM_ConfigClockSource+0x18>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e0b3      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x180>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fc6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd8:	d03e      	beq.n	8003058 <HAL_TIM_ConfigClockSource+0xd0>
 8002fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fde:	f200 8087 	bhi.w	80030f0 <HAL_TIM_ConfigClockSource+0x168>
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe6:	f000 8085 	beq.w	80030f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fee:	d87f      	bhi.n	80030f0 <HAL_TIM_ConfigClockSource+0x168>
 8002ff0:	2b70      	cmp	r3, #112	; 0x70
 8002ff2:	d01a      	beq.n	800302a <HAL_TIM_ConfigClockSource+0xa2>
 8002ff4:	2b70      	cmp	r3, #112	; 0x70
 8002ff6:	d87b      	bhi.n	80030f0 <HAL_TIM_ConfigClockSource+0x168>
 8002ff8:	2b60      	cmp	r3, #96	; 0x60
 8002ffa:	d050      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x116>
 8002ffc:	2b60      	cmp	r3, #96	; 0x60
 8002ffe:	d877      	bhi.n	80030f0 <HAL_TIM_ConfigClockSource+0x168>
 8003000:	2b50      	cmp	r3, #80	; 0x50
 8003002:	d03c      	beq.n	800307e <HAL_TIM_ConfigClockSource+0xf6>
 8003004:	2b50      	cmp	r3, #80	; 0x50
 8003006:	d873      	bhi.n	80030f0 <HAL_TIM_ConfigClockSource+0x168>
 8003008:	2b40      	cmp	r3, #64	; 0x40
 800300a:	d058      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x136>
 800300c:	2b40      	cmp	r3, #64	; 0x40
 800300e:	d86f      	bhi.n	80030f0 <HAL_TIM_ConfigClockSource+0x168>
 8003010:	2b30      	cmp	r3, #48	; 0x30
 8003012:	d064      	beq.n	80030de <HAL_TIM_ConfigClockSource+0x156>
 8003014:	2b30      	cmp	r3, #48	; 0x30
 8003016:	d86b      	bhi.n	80030f0 <HAL_TIM_ConfigClockSource+0x168>
 8003018:	2b20      	cmp	r3, #32
 800301a:	d060      	beq.n	80030de <HAL_TIM_ConfigClockSource+0x156>
 800301c:	2b20      	cmp	r3, #32
 800301e:	d867      	bhi.n	80030f0 <HAL_TIM_ConfigClockSource+0x168>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d05c      	beq.n	80030de <HAL_TIM_ConfigClockSource+0x156>
 8003024:	2b10      	cmp	r3, #16
 8003026:	d05a      	beq.n	80030de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003028:	e062      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6899      	ldr	r1, [r3, #8]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f000 f95c 	bl	80032f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800304c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	609a      	str	r2, [r3, #8]
      break;
 8003056:	e04e      	b.n	80030f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	6899      	ldr	r1, [r3, #8]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f000 f945 	bl	80032f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800307a:	609a      	str	r2, [r3, #8]
      break;
 800307c:	e03b      	b.n	80030f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6859      	ldr	r1, [r3, #4]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	461a      	mov	r2, r3
 800308c:	f000 f8bc 	bl	8003208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2150      	movs	r1, #80	; 0x50
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f913 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 800309c:	e02b      	b.n	80030f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6859      	ldr	r1, [r3, #4]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f000 f8da 	bl	8003264 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2160      	movs	r1, #96	; 0x60
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f903 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 80030bc:	e01b      	b.n	80030f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	6859      	ldr	r1, [r3, #4]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	461a      	mov	r2, r3
 80030cc:	f000 f89c 	bl	8003208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2140      	movs	r1, #64	; 0x40
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f8f3 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 80030dc:	e00b      	b.n	80030f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4619      	mov	r1, r3
 80030e8:	4610      	mov	r0, r2
 80030ea:	f000 f8ea 	bl	80032c2 <TIM_ITRx_SetConfig>
        break;
 80030ee:	e002      	b.n	80030f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030f0:	bf00      	nop
 80030f2:	e000      	b.n	80030f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a25      	ldr	r2, [pc, #148]	; (8003200 <TIM_Base_SetConfig+0xa8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d007      	beq.n	8003180 <TIM_Base_SetConfig+0x28>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003176:	d003      	beq.n	8003180 <TIM_Base_SetConfig+0x28>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a22      	ldr	r2, [pc, #136]	; (8003204 <TIM_Base_SetConfig+0xac>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d108      	bne.n	8003192 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <TIM_Base_SetConfig+0xa8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d007      	beq.n	80031aa <TIM_Base_SetConfig+0x52>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a0:	d003      	beq.n	80031aa <TIM_Base_SetConfig+0x52>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a17      	ldr	r2, [pc, #92]	; (8003204 <TIM_Base_SetConfig+0xac>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d108      	bne.n	80031bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a07      	ldr	r2, [pc, #28]	; (8003200 <TIM_Base_SetConfig+0xa8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d103      	bne.n	80031f0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	615a      	str	r2, [r3, #20]
}
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	40012c00 	.word	0x40012c00
 8003204:	40000400 	.word	0x40000400

08003208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	f023 0201 	bic.w	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f023 030a 	bic.w	r3, r3, #10
 8003244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	621a      	str	r2, [r3, #32]
}
 800325a:	bf00      	nop
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f023 0210 	bic.w	r2, r3, #16
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800328e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	031b      	lsls	r3, r3, #12
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	621a      	str	r2, [r3, #32]
}
 80032b8:	bf00      	nop
 80032ba:	371c      	adds	r7, #28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	f043 0307 	orr.w	r3, r3, #7
 80032e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b087      	sub	sp, #28
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003310:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	021a      	lsls	r2, r3, #8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	431a      	orrs	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4313      	orrs	r3, r2
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	609a      	str	r2, [r3, #8]
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003348:	2302      	movs	r3, #2
 800334a:	e041      	b.n	80033d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a14      	ldr	r2, [pc, #80]	; (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003398:	d004      	beq.n	80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a10      	ldr	r2, [pc, #64]	; (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d10c      	bne.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	40000400 	.word	0x40000400

080033e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e03f      	b.n	800349a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fcdc 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800344a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fc85 	bl	8003d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b08a      	sub	sp, #40	; 0x28
 80034a6:	af02      	add	r7, sp, #8
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d17c      	bne.n	80035bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <HAL_UART_Transmit+0x2c>
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e075      	b.n	80035be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_UART_Transmit+0x3e>
 80034dc:	2302      	movs	r3, #2
 80034de:	e06e      	b.n	80035be <HAL_UART_Transmit+0x11c>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2221      	movs	r2, #33	; 0x21
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034f6:	f7fd fdd7 	bl	80010a8 <HAL_GetTick>
 80034fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	88fa      	ldrh	r2, [r7, #6]
 8003500:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	88fa      	ldrh	r2, [r7, #6]
 8003506:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003510:	d108      	bne.n	8003524 <HAL_UART_Transmit+0x82>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e003      	b.n	800352c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003528:	2300      	movs	r3, #0
 800352a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003534:	e02a      	b.n	800358c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2200      	movs	r2, #0
 800353e:	2180      	movs	r1, #128	; 0x80
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 fa38 	bl	80039b6 <UART_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e036      	b.n	80035be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003564:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3302      	adds	r3, #2
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	e007      	b.n	800357e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	3301      	adds	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1cf      	bne.n	8003536 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	2140      	movs	r1, #64	; 0x40
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fa08 	bl	80039b6 <UART_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e006      	b.n	80035be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035bc:	2302      	movs	r3, #2
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	4613      	mov	r3, r2
 80035d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d11d      	bne.n	800361c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_UART_Receive_IT+0x26>
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e016      	b.n	800361e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_UART_Receive_IT+0x38>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e00f      	b.n	800361e <HAL_UART_Receive_IT+0x58>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	461a      	mov	r2, r3
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fa19 	bl	8003a4a <UART_Start_Receive_IT>
 8003618:	4603      	mov	r3, r0
 800361a:	e000      	b.n	800361e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003648:	2300      	movs	r3, #0
 800364a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10d      	bne.n	800367a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_UART_IRQHandler+0x52>
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fac9 	bl	8003c0a <UART_Receive_IT>
      return;
 8003678:	e17b      	b.n	8003972 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80b1 	beq.w	80037e4 <HAL_UART_IRQHandler+0x1bc>
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <HAL_UART_IRQHandler+0x70>
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80a6 	beq.w	80037e4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_UART_IRQHandler+0x90>
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_UART_IRQHandler+0xb0>
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f043 0202 	orr.w	r2, r3, #2
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_UART_IRQHandler+0xd0>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	f043 0204 	orr.w	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00f      	beq.n	8003722 <HAL_UART_IRQHandler+0xfa>
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <HAL_UART_IRQHandler+0xee>
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f043 0208 	orr.w	r2, r3, #8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 811e 	beq.w	8003968 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_UART_IRQHandler+0x11e>
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fa62 	bl	8003c0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d102      	bne.n	800376e <HAL_UART_IRQHandler+0x146>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d031      	beq.n	80037d2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f9a4 	bl	8003abc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d023      	beq.n	80037ca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003790:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	2b00      	cmp	r3, #0
 8003798:	d013      	beq.n	80037c2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	4a76      	ldr	r2, [pc, #472]	; (8003978 <HAL_UART_IRQHandler+0x350>)
 80037a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fc0c 	bl	8001fc4 <HAL_DMA_Abort_IT>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d016      	beq.n	80037e0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037bc:	4610      	mov	r0, r2
 80037be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c0:	e00e      	b.n	80037e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f8e3 	bl	800398e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	e00a      	b.n	80037e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8df 	bl	800398e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	e006      	b.n	80037e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f8db 	bl	800398e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037de:	e0c3      	b.n	8003968 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e0:	bf00      	nop
    return;
 80037e2:	e0c1      	b.n	8003968 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	f040 80a1 	bne.w	8003930 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 809b 	beq.w	8003930 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8095 	beq.w	8003930 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d04e      	beq.n	80038c8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003834:	8a3b      	ldrh	r3, [r7, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 8098 	beq.w	800396c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003840:	8a3a      	ldrh	r2, [r7, #16]
 8003842:	429a      	cmp	r2, r3
 8003844:	f080 8092 	bcs.w	800396c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8a3a      	ldrh	r2, [r7, #16]
 800384c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b20      	cmp	r3, #32
 8003856:	d02b      	beq.n	80038b0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003866:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003886:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0210 	bic.w	r2, r2, #16
 80038a4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fb4f 	bl	8001f4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	b29b      	uxth	r3, r3
 80038be:	4619      	mov	r1, r3
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f86d 	bl	80039a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80038c6:	e051      	b.n	800396c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d047      	beq.n	8003970 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80038e0:	8a7b      	ldrh	r3, [r7, #18]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d044      	beq.n	8003970 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038f4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0210 	bic.w	r2, r2, #16
 8003922:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003924:	8a7b      	ldrh	r3, [r7, #18]
 8003926:	4619      	mov	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f839 	bl	80039a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800392e:	e01f      	b.n	8003970 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <HAL_UART_IRQHandler+0x324>
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8f9 	bl	8003b3c <UART_Transmit_IT>
    return;
 800394a:	e012      	b.n	8003972 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00d      	beq.n	8003972 <HAL_UART_IRQHandler+0x34a>
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f93a 	bl	8003bda <UART_EndTransmit_IT>
    return;
 8003966:	e004      	b.n	8003972 <HAL_UART_IRQHandler+0x34a>
    return;
 8003968:	bf00      	nop
 800396a:	e002      	b.n	8003972 <HAL_UART_IRQHandler+0x34a>
      return;
 800396c:	bf00      	nop
 800396e:	e000      	b.n	8003972 <HAL_UART_IRQHandler+0x34a>
      return;
 8003970:	bf00      	nop
  }
}
 8003972:	3728      	adds	r7, #40	; 0x28
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	08003b15 	.word	0x08003b15

0800397c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	4613      	mov	r3, r2
 80039c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c6:	e02c      	b.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d028      	beq.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80039d6:	f7fd fb67 	bl	80010a8 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d21d      	bcs.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e00f      	b.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	bf0c      	ite	eq
 8003a32:	2301      	moveq	r3, #1
 8003a34:	2300      	movne	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d0c3      	beq.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	4613      	mov	r3, r2
 8003a56:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	88fa      	ldrh	r2, [r7, #6]
 8003a62:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	88fa      	ldrh	r2, [r7, #6]
 8003a68:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2222      	movs	r2, #34	; 0x22
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695a      	ldr	r2, [r3, #20]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0220 	orr.w	r2, r2, #32
 8003aae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ad2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d107      	bne.n	8003afc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0210 	bic.w	r2, r2, #16
 8003afa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff ff2d 	bl	800398e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b34:	bf00      	nop
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b21      	cmp	r3, #33	; 0x21
 8003b4e:	d13e      	bne.n	8003bce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b58:	d114      	bne.n	8003b84 <UART_Transmit_IT+0x48>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d110      	bne.n	8003b84 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	1c9a      	adds	r2, r3, #2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	621a      	str	r2, [r3, #32]
 8003b82:	e008      	b.n	8003b96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	1c59      	adds	r1, r3, #1
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6211      	str	r1, [r2, #32]
 8003b8e:	781a      	ldrb	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10f      	bne.n	8003bca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e000      	b.n	8003bd0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff febe 	bl	800397c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b22      	cmp	r3, #34	; 0x22
 8003c1c:	f040 8099 	bne.w	8003d52 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c28:	d117      	bne.n	8003c5a <UART_Receive_IT+0x50>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d113      	bne.n	8003c5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	1c9a      	adds	r2, r3, #2
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
 8003c58:	e026      	b.n	8003ca8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6c:	d007      	beq.n	8003c7e <UART_Receive_IT+0x74>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <UART_Receive_IT+0x82>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e008      	b.n	8003c9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d148      	bne.n	8003d4e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0220 	bic.w	r2, r2, #32
 8003cca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d123      	bne.n	8003d44 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0210 	bic.w	r2, r2, #16
 8003d10:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d10a      	bne.n	8003d36 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff fe2f 	bl	80039a0 <HAL_UARTEx_RxEventCallback>
 8003d42:	e002      	b.n	8003d4a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7fc ff8d 	bl	8000c64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e002      	b.n	8003d54 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e000      	b.n	8003d54 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
  }
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d96:	f023 030c 	bic.w	r3, r3, #12
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	430b      	orrs	r3, r1
 8003da2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <UART_SetConfig+0x114>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d103      	bne.n	8003dcc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003dc4:	f7fe ff0a 	bl	8002bdc <HAL_RCC_GetPCLK2Freq>
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	e002      	b.n	8003dd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003dcc:	f7fe fef2 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8003dd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	009a      	lsls	r2, r3, #2
 8003ddc:	441a      	add	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	4a22      	ldr	r2, [pc, #136]	; (8003e74 <UART_SetConfig+0x118>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	0119      	lsls	r1, r3, #4
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	009a      	lsls	r2, r3, #2
 8003dfc:	441a      	add	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e08:	4b1a      	ldr	r3, [pc, #104]	; (8003e74 <UART_SetConfig+0x118>)
 8003e0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	2064      	movs	r0, #100	; 0x64
 8003e12:	fb00 f303 	mul.w	r3, r0, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	3332      	adds	r3, #50	; 0x32
 8003e1c:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <UART_SetConfig+0x118>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e28:	4419      	add	r1, r3
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	009a      	lsls	r2, r3, #2
 8003e34:	441a      	add	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e40:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <UART_SetConfig+0x118>)
 8003e42:	fba3 0302 	umull	r0, r3, r3, r2
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	2064      	movs	r0, #100	; 0x64
 8003e4a:	fb00 f303 	mul.w	r3, r0, r3
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	3332      	adds	r3, #50	; 0x32
 8003e54:	4a07      	ldr	r2, [pc, #28]	; (8003e74 <UART_SetConfig+0x118>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	f003 020f 	and.w	r2, r3, #15
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	440a      	add	r2, r1
 8003e66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40013800 	.word	0x40013800
 8003e74:	51eb851f 	.word	0x51eb851f

08003e78 <__errno>:
 8003e78:	4b01      	ldr	r3, [pc, #4]	; (8003e80 <__errno+0x8>)
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	2000000c 	.word	0x2000000c

08003e84 <__libc_init_array>:
 8003e84:	b570      	push	{r4, r5, r6, lr}
 8003e86:	2600      	movs	r6, #0
 8003e88:	4d0c      	ldr	r5, [pc, #48]	; (8003ebc <__libc_init_array+0x38>)
 8003e8a:	4c0d      	ldr	r4, [pc, #52]	; (8003ec0 <__libc_init_array+0x3c>)
 8003e8c:	1b64      	subs	r4, r4, r5
 8003e8e:	10a4      	asrs	r4, r4, #2
 8003e90:	42a6      	cmp	r6, r4
 8003e92:	d109      	bne.n	8003ea8 <__libc_init_array+0x24>
 8003e94:	f000 fc9c 	bl	80047d0 <_init>
 8003e98:	2600      	movs	r6, #0
 8003e9a:	4d0a      	ldr	r5, [pc, #40]	; (8003ec4 <__libc_init_array+0x40>)
 8003e9c:	4c0a      	ldr	r4, [pc, #40]	; (8003ec8 <__libc_init_array+0x44>)
 8003e9e:	1b64      	subs	r4, r4, r5
 8003ea0:	10a4      	asrs	r4, r4, #2
 8003ea2:	42a6      	cmp	r6, r4
 8003ea4:	d105      	bne.n	8003eb2 <__libc_init_array+0x2e>
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eac:	4798      	blx	r3
 8003eae:	3601      	adds	r6, #1
 8003eb0:	e7ee      	b.n	8003e90 <__libc_init_array+0xc>
 8003eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb6:	4798      	blx	r3
 8003eb8:	3601      	adds	r6, #1
 8003eba:	e7f2      	b.n	8003ea2 <__libc_init_array+0x1e>
 8003ebc:	08004880 	.word	0x08004880
 8003ec0:	08004880 	.word	0x08004880
 8003ec4:	08004880 	.word	0x08004880
 8003ec8:	08004884 	.word	0x08004884

08003ecc <memset>:
 8003ecc:	4603      	mov	r3, r0
 8003ece:	4402      	add	r2, r0
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d100      	bne.n	8003ed6 <memset+0xa>
 8003ed4:	4770      	bx	lr
 8003ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eda:	e7f9      	b.n	8003ed0 <memset+0x4>

08003edc <siprintf>:
 8003edc:	b40e      	push	{r1, r2, r3}
 8003ede:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ee2:	b500      	push	{lr}
 8003ee4:	b09c      	sub	sp, #112	; 0x70
 8003ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ee8:	9002      	str	r0, [sp, #8]
 8003eea:	9006      	str	r0, [sp, #24]
 8003eec:	9107      	str	r1, [sp, #28]
 8003eee:	9104      	str	r1, [sp, #16]
 8003ef0:	4808      	ldr	r0, [pc, #32]	; (8003f14 <siprintf+0x38>)
 8003ef2:	4909      	ldr	r1, [pc, #36]	; (8003f18 <siprintf+0x3c>)
 8003ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ef8:	9105      	str	r1, [sp, #20]
 8003efa:	6800      	ldr	r0, [r0, #0]
 8003efc:	a902      	add	r1, sp, #8
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	f000 f868 	bl	8003fd4 <_svfiprintf_r>
 8003f04:	2200      	movs	r2, #0
 8003f06:	9b02      	ldr	r3, [sp, #8]
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	b01c      	add	sp, #112	; 0x70
 8003f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f10:	b003      	add	sp, #12
 8003f12:	4770      	bx	lr
 8003f14:	2000000c 	.word	0x2000000c
 8003f18:	ffff0208 	.word	0xffff0208

08003f1c <__ssputs_r>:
 8003f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f20:	688e      	ldr	r6, [r1, #8]
 8003f22:	4682      	mov	sl, r0
 8003f24:	429e      	cmp	r6, r3
 8003f26:	460c      	mov	r4, r1
 8003f28:	4690      	mov	r8, r2
 8003f2a:	461f      	mov	r7, r3
 8003f2c:	d838      	bhi.n	8003fa0 <__ssputs_r+0x84>
 8003f2e:	898a      	ldrh	r2, [r1, #12]
 8003f30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f34:	d032      	beq.n	8003f9c <__ssputs_r+0x80>
 8003f36:	6825      	ldr	r5, [r4, #0]
 8003f38:	6909      	ldr	r1, [r1, #16]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	eba5 0901 	sub.w	r9, r5, r1
 8003f40:	6965      	ldr	r5, [r4, #20]
 8003f42:	444b      	add	r3, r9
 8003f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f4c:	106d      	asrs	r5, r5, #1
 8003f4e:	429d      	cmp	r5, r3
 8003f50:	bf38      	it	cc
 8003f52:	461d      	movcc	r5, r3
 8003f54:	0553      	lsls	r3, r2, #21
 8003f56:	d531      	bpl.n	8003fbc <__ssputs_r+0xa0>
 8003f58:	4629      	mov	r1, r5
 8003f5a:	f000 fb6f 	bl	800463c <_malloc_r>
 8003f5e:	4606      	mov	r6, r0
 8003f60:	b950      	cbnz	r0, 8003f78 <__ssputs_r+0x5c>
 8003f62:	230c      	movs	r3, #12
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	f8ca 3000 	str.w	r3, [sl]
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f72:	81a3      	strh	r3, [r4, #12]
 8003f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f78:	464a      	mov	r2, r9
 8003f7a:	6921      	ldr	r1, [r4, #16]
 8003f7c:	f000 face 	bl	800451c <memcpy>
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8a:	81a3      	strh	r3, [r4, #12]
 8003f8c:	6126      	str	r6, [r4, #16]
 8003f8e:	444e      	add	r6, r9
 8003f90:	6026      	str	r6, [r4, #0]
 8003f92:	463e      	mov	r6, r7
 8003f94:	6165      	str	r5, [r4, #20]
 8003f96:	eba5 0509 	sub.w	r5, r5, r9
 8003f9a:	60a5      	str	r5, [r4, #8]
 8003f9c:	42be      	cmp	r6, r7
 8003f9e:	d900      	bls.n	8003fa2 <__ssputs_r+0x86>
 8003fa0:	463e      	mov	r6, r7
 8003fa2:	4632      	mov	r2, r6
 8003fa4:	4641      	mov	r1, r8
 8003fa6:	6820      	ldr	r0, [r4, #0]
 8003fa8:	f000 fac6 	bl	8004538 <memmove>
 8003fac:	68a3      	ldr	r3, [r4, #8]
 8003fae:	2000      	movs	r0, #0
 8003fb0:	1b9b      	subs	r3, r3, r6
 8003fb2:	60a3      	str	r3, [r4, #8]
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	4433      	add	r3, r6
 8003fb8:	6023      	str	r3, [r4, #0]
 8003fba:	e7db      	b.n	8003f74 <__ssputs_r+0x58>
 8003fbc:	462a      	mov	r2, r5
 8003fbe:	f000 fbb1 	bl	8004724 <_realloc_r>
 8003fc2:	4606      	mov	r6, r0
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d1e1      	bne.n	8003f8c <__ssputs_r+0x70>
 8003fc8:	4650      	mov	r0, sl
 8003fca:	6921      	ldr	r1, [r4, #16]
 8003fcc:	f000 face 	bl	800456c <_free_r>
 8003fd0:	e7c7      	b.n	8003f62 <__ssputs_r+0x46>
	...

08003fd4 <_svfiprintf_r>:
 8003fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd8:	4698      	mov	r8, r3
 8003fda:	898b      	ldrh	r3, [r1, #12]
 8003fdc:	4607      	mov	r7, r0
 8003fde:	061b      	lsls	r3, r3, #24
 8003fe0:	460d      	mov	r5, r1
 8003fe2:	4614      	mov	r4, r2
 8003fe4:	b09d      	sub	sp, #116	; 0x74
 8003fe6:	d50e      	bpl.n	8004006 <_svfiprintf_r+0x32>
 8003fe8:	690b      	ldr	r3, [r1, #16]
 8003fea:	b963      	cbnz	r3, 8004006 <_svfiprintf_r+0x32>
 8003fec:	2140      	movs	r1, #64	; 0x40
 8003fee:	f000 fb25 	bl	800463c <_malloc_r>
 8003ff2:	6028      	str	r0, [r5, #0]
 8003ff4:	6128      	str	r0, [r5, #16]
 8003ff6:	b920      	cbnz	r0, 8004002 <_svfiprintf_r+0x2e>
 8003ff8:	230c      	movs	r3, #12
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	e0d1      	b.n	80041a6 <_svfiprintf_r+0x1d2>
 8004002:	2340      	movs	r3, #64	; 0x40
 8004004:	616b      	str	r3, [r5, #20]
 8004006:	2300      	movs	r3, #0
 8004008:	9309      	str	r3, [sp, #36]	; 0x24
 800400a:	2320      	movs	r3, #32
 800400c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004010:	2330      	movs	r3, #48	; 0x30
 8004012:	f04f 0901 	mov.w	r9, #1
 8004016:	f8cd 800c 	str.w	r8, [sp, #12]
 800401a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80041c0 <_svfiprintf_r+0x1ec>
 800401e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004022:	4623      	mov	r3, r4
 8004024:	469a      	mov	sl, r3
 8004026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800402a:	b10a      	cbz	r2, 8004030 <_svfiprintf_r+0x5c>
 800402c:	2a25      	cmp	r2, #37	; 0x25
 800402e:	d1f9      	bne.n	8004024 <_svfiprintf_r+0x50>
 8004030:	ebba 0b04 	subs.w	fp, sl, r4
 8004034:	d00b      	beq.n	800404e <_svfiprintf_r+0x7a>
 8004036:	465b      	mov	r3, fp
 8004038:	4622      	mov	r2, r4
 800403a:	4629      	mov	r1, r5
 800403c:	4638      	mov	r0, r7
 800403e:	f7ff ff6d 	bl	8003f1c <__ssputs_r>
 8004042:	3001      	adds	r0, #1
 8004044:	f000 80aa 	beq.w	800419c <_svfiprintf_r+0x1c8>
 8004048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800404a:	445a      	add	r2, fp
 800404c:	9209      	str	r2, [sp, #36]	; 0x24
 800404e:	f89a 3000 	ldrb.w	r3, [sl]
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 80a2 	beq.w	800419c <_svfiprintf_r+0x1c8>
 8004058:	2300      	movs	r3, #0
 800405a:	f04f 32ff 	mov.w	r2, #4294967295
 800405e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004062:	f10a 0a01 	add.w	sl, sl, #1
 8004066:	9304      	str	r3, [sp, #16]
 8004068:	9307      	str	r3, [sp, #28]
 800406a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800406e:	931a      	str	r3, [sp, #104]	; 0x68
 8004070:	4654      	mov	r4, sl
 8004072:	2205      	movs	r2, #5
 8004074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004078:	4851      	ldr	r0, [pc, #324]	; (80041c0 <_svfiprintf_r+0x1ec>)
 800407a:	f000 fa41 	bl	8004500 <memchr>
 800407e:	9a04      	ldr	r2, [sp, #16]
 8004080:	b9d8      	cbnz	r0, 80040ba <_svfiprintf_r+0xe6>
 8004082:	06d0      	lsls	r0, r2, #27
 8004084:	bf44      	itt	mi
 8004086:	2320      	movmi	r3, #32
 8004088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800408c:	0711      	lsls	r1, r2, #28
 800408e:	bf44      	itt	mi
 8004090:	232b      	movmi	r3, #43	; 0x2b
 8004092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004096:	f89a 3000 	ldrb.w	r3, [sl]
 800409a:	2b2a      	cmp	r3, #42	; 0x2a
 800409c:	d015      	beq.n	80040ca <_svfiprintf_r+0xf6>
 800409e:	4654      	mov	r4, sl
 80040a0:	2000      	movs	r0, #0
 80040a2:	f04f 0c0a 	mov.w	ip, #10
 80040a6:	9a07      	ldr	r2, [sp, #28]
 80040a8:	4621      	mov	r1, r4
 80040aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040ae:	3b30      	subs	r3, #48	; 0x30
 80040b0:	2b09      	cmp	r3, #9
 80040b2:	d94e      	bls.n	8004152 <_svfiprintf_r+0x17e>
 80040b4:	b1b0      	cbz	r0, 80040e4 <_svfiprintf_r+0x110>
 80040b6:	9207      	str	r2, [sp, #28]
 80040b8:	e014      	b.n	80040e4 <_svfiprintf_r+0x110>
 80040ba:	eba0 0308 	sub.w	r3, r0, r8
 80040be:	fa09 f303 	lsl.w	r3, r9, r3
 80040c2:	4313      	orrs	r3, r2
 80040c4:	46a2      	mov	sl, r4
 80040c6:	9304      	str	r3, [sp, #16]
 80040c8:	e7d2      	b.n	8004070 <_svfiprintf_r+0x9c>
 80040ca:	9b03      	ldr	r3, [sp, #12]
 80040cc:	1d19      	adds	r1, r3, #4
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	9103      	str	r1, [sp, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	bfbb      	ittet	lt
 80040d6:	425b      	neglt	r3, r3
 80040d8:	f042 0202 	orrlt.w	r2, r2, #2
 80040dc:	9307      	strge	r3, [sp, #28]
 80040de:	9307      	strlt	r3, [sp, #28]
 80040e0:	bfb8      	it	lt
 80040e2:	9204      	strlt	r2, [sp, #16]
 80040e4:	7823      	ldrb	r3, [r4, #0]
 80040e6:	2b2e      	cmp	r3, #46	; 0x2e
 80040e8:	d10c      	bne.n	8004104 <_svfiprintf_r+0x130>
 80040ea:	7863      	ldrb	r3, [r4, #1]
 80040ec:	2b2a      	cmp	r3, #42	; 0x2a
 80040ee:	d135      	bne.n	800415c <_svfiprintf_r+0x188>
 80040f0:	9b03      	ldr	r3, [sp, #12]
 80040f2:	3402      	adds	r4, #2
 80040f4:	1d1a      	adds	r2, r3, #4
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	9203      	str	r2, [sp, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bfb8      	it	lt
 80040fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004102:	9305      	str	r3, [sp, #20]
 8004104:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80041c4 <_svfiprintf_r+0x1f0>
 8004108:	2203      	movs	r2, #3
 800410a:	4650      	mov	r0, sl
 800410c:	7821      	ldrb	r1, [r4, #0]
 800410e:	f000 f9f7 	bl	8004500 <memchr>
 8004112:	b140      	cbz	r0, 8004126 <_svfiprintf_r+0x152>
 8004114:	2340      	movs	r3, #64	; 0x40
 8004116:	eba0 000a 	sub.w	r0, r0, sl
 800411a:	fa03 f000 	lsl.w	r0, r3, r0
 800411e:	9b04      	ldr	r3, [sp, #16]
 8004120:	3401      	adds	r4, #1
 8004122:	4303      	orrs	r3, r0
 8004124:	9304      	str	r3, [sp, #16]
 8004126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800412a:	2206      	movs	r2, #6
 800412c:	4826      	ldr	r0, [pc, #152]	; (80041c8 <_svfiprintf_r+0x1f4>)
 800412e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004132:	f000 f9e5 	bl	8004500 <memchr>
 8004136:	2800      	cmp	r0, #0
 8004138:	d038      	beq.n	80041ac <_svfiprintf_r+0x1d8>
 800413a:	4b24      	ldr	r3, [pc, #144]	; (80041cc <_svfiprintf_r+0x1f8>)
 800413c:	bb1b      	cbnz	r3, 8004186 <_svfiprintf_r+0x1b2>
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	3307      	adds	r3, #7
 8004142:	f023 0307 	bic.w	r3, r3, #7
 8004146:	3308      	adds	r3, #8
 8004148:	9303      	str	r3, [sp, #12]
 800414a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800414c:	4433      	add	r3, r6
 800414e:	9309      	str	r3, [sp, #36]	; 0x24
 8004150:	e767      	b.n	8004022 <_svfiprintf_r+0x4e>
 8004152:	460c      	mov	r4, r1
 8004154:	2001      	movs	r0, #1
 8004156:	fb0c 3202 	mla	r2, ip, r2, r3
 800415a:	e7a5      	b.n	80040a8 <_svfiprintf_r+0xd4>
 800415c:	2300      	movs	r3, #0
 800415e:	f04f 0c0a 	mov.w	ip, #10
 8004162:	4619      	mov	r1, r3
 8004164:	3401      	adds	r4, #1
 8004166:	9305      	str	r3, [sp, #20]
 8004168:	4620      	mov	r0, r4
 800416a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800416e:	3a30      	subs	r2, #48	; 0x30
 8004170:	2a09      	cmp	r2, #9
 8004172:	d903      	bls.n	800417c <_svfiprintf_r+0x1a8>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0c5      	beq.n	8004104 <_svfiprintf_r+0x130>
 8004178:	9105      	str	r1, [sp, #20]
 800417a:	e7c3      	b.n	8004104 <_svfiprintf_r+0x130>
 800417c:	4604      	mov	r4, r0
 800417e:	2301      	movs	r3, #1
 8004180:	fb0c 2101 	mla	r1, ip, r1, r2
 8004184:	e7f0      	b.n	8004168 <_svfiprintf_r+0x194>
 8004186:	ab03      	add	r3, sp, #12
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	462a      	mov	r2, r5
 800418c:	4638      	mov	r0, r7
 800418e:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <_svfiprintf_r+0x1fc>)
 8004190:	a904      	add	r1, sp, #16
 8004192:	f3af 8000 	nop.w
 8004196:	1c42      	adds	r2, r0, #1
 8004198:	4606      	mov	r6, r0
 800419a:	d1d6      	bne.n	800414a <_svfiprintf_r+0x176>
 800419c:	89ab      	ldrh	r3, [r5, #12]
 800419e:	065b      	lsls	r3, r3, #25
 80041a0:	f53f af2c 	bmi.w	8003ffc <_svfiprintf_r+0x28>
 80041a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041a6:	b01d      	add	sp, #116	; 0x74
 80041a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ac:	ab03      	add	r3, sp, #12
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	462a      	mov	r2, r5
 80041b2:	4638      	mov	r0, r7
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <_svfiprintf_r+0x1fc>)
 80041b6:	a904      	add	r1, sp, #16
 80041b8:	f000 f87c 	bl	80042b4 <_printf_i>
 80041bc:	e7eb      	b.n	8004196 <_svfiprintf_r+0x1c2>
 80041be:	bf00      	nop
 80041c0:	0800484c 	.word	0x0800484c
 80041c4:	08004852 	.word	0x08004852
 80041c8:	08004856 	.word	0x08004856
 80041cc:	00000000 	.word	0x00000000
 80041d0:	08003f1d 	.word	0x08003f1d

080041d4 <_printf_common>:
 80041d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d8:	4616      	mov	r6, r2
 80041da:	4699      	mov	r9, r3
 80041dc:	688a      	ldr	r2, [r1, #8]
 80041de:	690b      	ldr	r3, [r1, #16]
 80041e0:	4607      	mov	r7, r0
 80041e2:	4293      	cmp	r3, r2
 80041e4:	bfb8      	it	lt
 80041e6:	4613      	movlt	r3, r2
 80041e8:	6033      	str	r3, [r6, #0]
 80041ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041ee:	460c      	mov	r4, r1
 80041f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041f4:	b10a      	cbz	r2, 80041fa <_printf_common+0x26>
 80041f6:	3301      	adds	r3, #1
 80041f8:	6033      	str	r3, [r6, #0]
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	0699      	lsls	r1, r3, #26
 80041fe:	bf42      	ittt	mi
 8004200:	6833      	ldrmi	r3, [r6, #0]
 8004202:	3302      	addmi	r3, #2
 8004204:	6033      	strmi	r3, [r6, #0]
 8004206:	6825      	ldr	r5, [r4, #0]
 8004208:	f015 0506 	ands.w	r5, r5, #6
 800420c:	d106      	bne.n	800421c <_printf_common+0x48>
 800420e:	f104 0a19 	add.w	sl, r4, #25
 8004212:	68e3      	ldr	r3, [r4, #12]
 8004214:	6832      	ldr	r2, [r6, #0]
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	42ab      	cmp	r3, r5
 800421a:	dc28      	bgt.n	800426e <_printf_common+0x9a>
 800421c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004220:	1e13      	subs	r3, r2, #0
 8004222:	6822      	ldr	r2, [r4, #0]
 8004224:	bf18      	it	ne
 8004226:	2301      	movne	r3, #1
 8004228:	0692      	lsls	r2, r2, #26
 800422a:	d42d      	bmi.n	8004288 <_printf_common+0xb4>
 800422c:	4649      	mov	r1, r9
 800422e:	4638      	mov	r0, r7
 8004230:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004234:	47c0      	blx	r8
 8004236:	3001      	adds	r0, #1
 8004238:	d020      	beq.n	800427c <_printf_common+0xa8>
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	68e5      	ldr	r5, [r4, #12]
 800423e:	f003 0306 	and.w	r3, r3, #6
 8004242:	2b04      	cmp	r3, #4
 8004244:	bf18      	it	ne
 8004246:	2500      	movne	r5, #0
 8004248:	6832      	ldr	r2, [r6, #0]
 800424a:	f04f 0600 	mov.w	r6, #0
 800424e:	68a3      	ldr	r3, [r4, #8]
 8004250:	bf08      	it	eq
 8004252:	1aad      	subeq	r5, r5, r2
 8004254:	6922      	ldr	r2, [r4, #16]
 8004256:	bf08      	it	eq
 8004258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800425c:	4293      	cmp	r3, r2
 800425e:	bfc4      	itt	gt
 8004260:	1a9b      	subgt	r3, r3, r2
 8004262:	18ed      	addgt	r5, r5, r3
 8004264:	341a      	adds	r4, #26
 8004266:	42b5      	cmp	r5, r6
 8004268:	d11a      	bne.n	80042a0 <_printf_common+0xcc>
 800426a:	2000      	movs	r0, #0
 800426c:	e008      	b.n	8004280 <_printf_common+0xac>
 800426e:	2301      	movs	r3, #1
 8004270:	4652      	mov	r2, sl
 8004272:	4649      	mov	r1, r9
 8004274:	4638      	mov	r0, r7
 8004276:	47c0      	blx	r8
 8004278:	3001      	adds	r0, #1
 800427a:	d103      	bne.n	8004284 <_printf_common+0xb0>
 800427c:	f04f 30ff 	mov.w	r0, #4294967295
 8004280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004284:	3501      	adds	r5, #1
 8004286:	e7c4      	b.n	8004212 <_printf_common+0x3e>
 8004288:	2030      	movs	r0, #48	; 0x30
 800428a:	18e1      	adds	r1, r4, r3
 800428c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004296:	4422      	add	r2, r4
 8004298:	3302      	adds	r3, #2
 800429a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800429e:	e7c5      	b.n	800422c <_printf_common+0x58>
 80042a0:	2301      	movs	r3, #1
 80042a2:	4622      	mov	r2, r4
 80042a4:	4649      	mov	r1, r9
 80042a6:	4638      	mov	r0, r7
 80042a8:	47c0      	blx	r8
 80042aa:	3001      	adds	r0, #1
 80042ac:	d0e6      	beq.n	800427c <_printf_common+0xa8>
 80042ae:	3601      	adds	r6, #1
 80042b0:	e7d9      	b.n	8004266 <_printf_common+0x92>
	...

080042b4 <_printf_i>:
 80042b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042b8:	7e0f      	ldrb	r7, [r1, #24]
 80042ba:	4691      	mov	r9, r2
 80042bc:	2f78      	cmp	r7, #120	; 0x78
 80042be:	4680      	mov	r8, r0
 80042c0:	460c      	mov	r4, r1
 80042c2:	469a      	mov	sl, r3
 80042c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042ca:	d807      	bhi.n	80042dc <_printf_i+0x28>
 80042cc:	2f62      	cmp	r7, #98	; 0x62
 80042ce:	d80a      	bhi.n	80042e6 <_printf_i+0x32>
 80042d0:	2f00      	cmp	r7, #0
 80042d2:	f000 80d9 	beq.w	8004488 <_printf_i+0x1d4>
 80042d6:	2f58      	cmp	r7, #88	; 0x58
 80042d8:	f000 80a4 	beq.w	8004424 <_printf_i+0x170>
 80042dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042e4:	e03a      	b.n	800435c <_printf_i+0xa8>
 80042e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042ea:	2b15      	cmp	r3, #21
 80042ec:	d8f6      	bhi.n	80042dc <_printf_i+0x28>
 80042ee:	a101      	add	r1, pc, #4	; (adr r1, 80042f4 <_printf_i+0x40>)
 80042f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042f4:	0800434d 	.word	0x0800434d
 80042f8:	08004361 	.word	0x08004361
 80042fc:	080042dd 	.word	0x080042dd
 8004300:	080042dd 	.word	0x080042dd
 8004304:	080042dd 	.word	0x080042dd
 8004308:	080042dd 	.word	0x080042dd
 800430c:	08004361 	.word	0x08004361
 8004310:	080042dd 	.word	0x080042dd
 8004314:	080042dd 	.word	0x080042dd
 8004318:	080042dd 	.word	0x080042dd
 800431c:	080042dd 	.word	0x080042dd
 8004320:	0800446f 	.word	0x0800446f
 8004324:	08004391 	.word	0x08004391
 8004328:	08004451 	.word	0x08004451
 800432c:	080042dd 	.word	0x080042dd
 8004330:	080042dd 	.word	0x080042dd
 8004334:	08004491 	.word	0x08004491
 8004338:	080042dd 	.word	0x080042dd
 800433c:	08004391 	.word	0x08004391
 8004340:	080042dd 	.word	0x080042dd
 8004344:	080042dd 	.word	0x080042dd
 8004348:	08004459 	.word	0x08004459
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	1d1a      	adds	r2, r3, #4
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	602a      	str	r2, [r5, #0]
 8004354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800435c:	2301      	movs	r3, #1
 800435e:	e0a4      	b.n	80044aa <_printf_i+0x1f6>
 8004360:	6820      	ldr	r0, [r4, #0]
 8004362:	6829      	ldr	r1, [r5, #0]
 8004364:	0606      	lsls	r6, r0, #24
 8004366:	f101 0304 	add.w	r3, r1, #4
 800436a:	d50a      	bpl.n	8004382 <_printf_i+0xce>
 800436c:	680e      	ldr	r6, [r1, #0]
 800436e:	602b      	str	r3, [r5, #0]
 8004370:	2e00      	cmp	r6, #0
 8004372:	da03      	bge.n	800437c <_printf_i+0xc8>
 8004374:	232d      	movs	r3, #45	; 0x2d
 8004376:	4276      	negs	r6, r6
 8004378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800437c:	230a      	movs	r3, #10
 800437e:	485e      	ldr	r0, [pc, #376]	; (80044f8 <_printf_i+0x244>)
 8004380:	e019      	b.n	80043b6 <_printf_i+0x102>
 8004382:	680e      	ldr	r6, [r1, #0]
 8004384:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004388:	602b      	str	r3, [r5, #0]
 800438a:	bf18      	it	ne
 800438c:	b236      	sxthne	r6, r6
 800438e:	e7ef      	b.n	8004370 <_printf_i+0xbc>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	6820      	ldr	r0, [r4, #0]
 8004394:	1d19      	adds	r1, r3, #4
 8004396:	6029      	str	r1, [r5, #0]
 8004398:	0601      	lsls	r1, r0, #24
 800439a:	d501      	bpl.n	80043a0 <_printf_i+0xec>
 800439c:	681e      	ldr	r6, [r3, #0]
 800439e:	e002      	b.n	80043a6 <_printf_i+0xf2>
 80043a0:	0646      	lsls	r6, r0, #25
 80043a2:	d5fb      	bpl.n	800439c <_printf_i+0xe8>
 80043a4:	881e      	ldrh	r6, [r3, #0]
 80043a6:	2f6f      	cmp	r7, #111	; 0x6f
 80043a8:	bf0c      	ite	eq
 80043aa:	2308      	moveq	r3, #8
 80043ac:	230a      	movne	r3, #10
 80043ae:	4852      	ldr	r0, [pc, #328]	; (80044f8 <_printf_i+0x244>)
 80043b0:	2100      	movs	r1, #0
 80043b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043b6:	6865      	ldr	r5, [r4, #4]
 80043b8:	2d00      	cmp	r5, #0
 80043ba:	bfa8      	it	ge
 80043bc:	6821      	ldrge	r1, [r4, #0]
 80043be:	60a5      	str	r5, [r4, #8]
 80043c0:	bfa4      	itt	ge
 80043c2:	f021 0104 	bicge.w	r1, r1, #4
 80043c6:	6021      	strge	r1, [r4, #0]
 80043c8:	b90e      	cbnz	r6, 80043ce <_printf_i+0x11a>
 80043ca:	2d00      	cmp	r5, #0
 80043cc:	d04d      	beq.n	800446a <_printf_i+0x1b6>
 80043ce:	4615      	mov	r5, r2
 80043d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80043d4:	fb03 6711 	mls	r7, r3, r1, r6
 80043d8:	5dc7      	ldrb	r7, [r0, r7]
 80043da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043de:	4637      	mov	r7, r6
 80043e0:	42bb      	cmp	r3, r7
 80043e2:	460e      	mov	r6, r1
 80043e4:	d9f4      	bls.n	80043d0 <_printf_i+0x11c>
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d10b      	bne.n	8004402 <_printf_i+0x14e>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	07de      	lsls	r6, r3, #31
 80043ee:	d508      	bpl.n	8004402 <_printf_i+0x14e>
 80043f0:	6923      	ldr	r3, [r4, #16]
 80043f2:	6861      	ldr	r1, [r4, #4]
 80043f4:	4299      	cmp	r1, r3
 80043f6:	bfde      	ittt	le
 80043f8:	2330      	movle	r3, #48	; 0x30
 80043fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004402:	1b52      	subs	r2, r2, r5
 8004404:	6122      	str	r2, [r4, #16]
 8004406:	464b      	mov	r3, r9
 8004408:	4621      	mov	r1, r4
 800440a:	4640      	mov	r0, r8
 800440c:	f8cd a000 	str.w	sl, [sp]
 8004410:	aa03      	add	r2, sp, #12
 8004412:	f7ff fedf 	bl	80041d4 <_printf_common>
 8004416:	3001      	adds	r0, #1
 8004418:	d14c      	bne.n	80044b4 <_printf_i+0x200>
 800441a:	f04f 30ff 	mov.w	r0, #4294967295
 800441e:	b004      	add	sp, #16
 8004420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004424:	4834      	ldr	r0, [pc, #208]	; (80044f8 <_printf_i+0x244>)
 8004426:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800442a:	6829      	ldr	r1, [r5, #0]
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004432:	6029      	str	r1, [r5, #0]
 8004434:	061d      	lsls	r5, r3, #24
 8004436:	d514      	bpl.n	8004462 <_printf_i+0x1ae>
 8004438:	07df      	lsls	r7, r3, #31
 800443a:	bf44      	itt	mi
 800443c:	f043 0320 	orrmi.w	r3, r3, #32
 8004440:	6023      	strmi	r3, [r4, #0]
 8004442:	b91e      	cbnz	r6, 800444c <_printf_i+0x198>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	f023 0320 	bic.w	r3, r3, #32
 800444a:	6023      	str	r3, [r4, #0]
 800444c:	2310      	movs	r3, #16
 800444e:	e7af      	b.n	80043b0 <_printf_i+0xfc>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	f043 0320 	orr.w	r3, r3, #32
 8004456:	6023      	str	r3, [r4, #0]
 8004458:	2378      	movs	r3, #120	; 0x78
 800445a:	4828      	ldr	r0, [pc, #160]	; (80044fc <_printf_i+0x248>)
 800445c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004460:	e7e3      	b.n	800442a <_printf_i+0x176>
 8004462:	0659      	lsls	r1, r3, #25
 8004464:	bf48      	it	mi
 8004466:	b2b6      	uxthmi	r6, r6
 8004468:	e7e6      	b.n	8004438 <_printf_i+0x184>
 800446a:	4615      	mov	r5, r2
 800446c:	e7bb      	b.n	80043e6 <_printf_i+0x132>
 800446e:	682b      	ldr	r3, [r5, #0]
 8004470:	6826      	ldr	r6, [r4, #0]
 8004472:	1d18      	adds	r0, r3, #4
 8004474:	6961      	ldr	r1, [r4, #20]
 8004476:	6028      	str	r0, [r5, #0]
 8004478:	0635      	lsls	r5, r6, #24
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	d501      	bpl.n	8004482 <_printf_i+0x1ce>
 800447e:	6019      	str	r1, [r3, #0]
 8004480:	e002      	b.n	8004488 <_printf_i+0x1d4>
 8004482:	0670      	lsls	r0, r6, #25
 8004484:	d5fb      	bpl.n	800447e <_printf_i+0x1ca>
 8004486:	8019      	strh	r1, [r3, #0]
 8004488:	2300      	movs	r3, #0
 800448a:	4615      	mov	r5, r2
 800448c:	6123      	str	r3, [r4, #16]
 800448e:	e7ba      	b.n	8004406 <_printf_i+0x152>
 8004490:	682b      	ldr	r3, [r5, #0]
 8004492:	2100      	movs	r1, #0
 8004494:	1d1a      	adds	r2, r3, #4
 8004496:	602a      	str	r2, [r5, #0]
 8004498:	681d      	ldr	r5, [r3, #0]
 800449a:	6862      	ldr	r2, [r4, #4]
 800449c:	4628      	mov	r0, r5
 800449e:	f000 f82f 	bl	8004500 <memchr>
 80044a2:	b108      	cbz	r0, 80044a8 <_printf_i+0x1f4>
 80044a4:	1b40      	subs	r0, r0, r5
 80044a6:	6060      	str	r0, [r4, #4]
 80044a8:	6863      	ldr	r3, [r4, #4]
 80044aa:	6123      	str	r3, [r4, #16]
 80044ac:	2300      	movs	r3, #0
 80044ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b2:	e7a8      	b.n	8004406 <_printf_i+0x152>
 80044b4:	462a      	mov	r2, r5
 80044b6:	4649      	mov	r1, r9
 80044b8:	4640      	mov	r0, r8
 80044ba:	6923      	ldr	r3, [r4, #16]
 80044bc:	47d0      	blx	sl
 80044be:	3001      	adds	r0, #1
 80044c0:	d0ab      	beq.n	800441a <_printf_i+0x166>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	079b      	lsls	r3, r3, #30
 80044c6:	d413      	bmi.n	80044f0 <_printf_i+0x23c>
 80044c8:	68e0      	ldr	r0, [r4, #12]
 80044ca:	9b03      	ldr	r3, [sp, #12]
 80044cc:	4298      	cmp	r0, r3
 80044ce:	bfb8      	it	lt
 80044d0:	4618      	movlt	r0, r3
 80044d2:	e7a4      	b.n	800441e <_printf_i+0x16a>
 80044d4:	2301      	movs	r3, #1
 80044d6:	4632      	mov	r2, r6
 80044d8:	4649      	mov	r1, r9
 80044da:	4640      	mov	r0, r8
 80044dc:	47d0      	blx	sl
 80044de:	3001      	adds	r0, #1
 80044e0:	d09b      	beq.n	800441a <_printf_i+0x166>
 80044e2:	3501      	adds	r5, #1
 80044e4:	68e3      	ldr	r3, [r4, #12]
 80044e6:	9903      	ldr	r1, [sp, #12]
 80044e8:	1a5b      	subs	r3, r3, r1
 80044ea:	42ab      	cmp	r3, r5
 80044ec:	dcf2      	bgt.n	80044d4 <_printf_i+0x220>
 80044ee:	e7eb      	b.n	80044c8 <_printf_i+0x214>
 80044f0:	2500      	movs	r5, #0
 80044f2:	f104 0619 	add.w	r6, r4, #25
 80044f6:	e7f5      	b.n	80044e4 <_printf_i+0x230>
 80044f8:	0800485d 	.word	0x0800485d
 80044fc:	0800486e 	.word	0x0800486e

08004500 <memchr>:
 8004500:	4603      	mov	r3, r0
 8004502:	b510      	push	{r4, lr}
 8004504:	b2c9      	uxtb	r1, r1
 8004506:	4402      	add	r2, r0
 8004508:	4293      	cmp	r3, r2
 800450a:	4618      	mov	r0, r3
 800450c:	d101      	bne.n	8004512 <memchr+0x12>
 800450e:	2000      	movs	r0, #0
 8004510:	e003      	b.n	800451a <memchr+0x1a>
 8004512:	7804      	ldrb	r4, [r0, #0]
 8004514:	3301      	adds	r3, #1
 8004516:	428c      	cmp	r4, r1
 8004518:	d1f6      	bne.n	8004508 <memchr+0x8>
 800451a:	bd10      	pop	{r4, pc}

0800451c <memcpy>:
 800451c:	440a      	add	r2, r1
 800451e:	4291      	cmp	r1, r2
 8004520:	f100 33ff 	add.w	r3, r0, #4294967295
 8004524:	d100      	bne.n	8004528 <memcpy+0xc>
 8004526:	4770      	bx	lr
 8004528:	b510      	push	{r4, lr}
 800452a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800452e:	4291      	cmp	r1, r2
 8004530:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004534:	d1f9      	bne.n	800452a <memcpy+0xe>
 8004536:	bd10      	pop	{r4, pc}

08004538 <memmove>:
 8004538:	4288      	cmp	r0, r1
 800453a:	b510      	push	{r4, lr}
 800453c:	eb01 0402 	add.w	r4, r1, r2
 8004540:	d902      	bls.n	8004548 <memmove+0x10>
 8004542:	4284      	cmp	r4, r0
 8004544:	4623      	mov	r3, r4
 8004546:	d807      	bhi.n	8004558 <memmove+0x20>
 8004548:	1e43      	subs	r3, r0, #1
 800454a:	42a1      	cmp	r1, r4
 800454c:	d008      	beq.n	8004560 <memmove+0x28>
 800454e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004552:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004556:	e7f8      	b.n	800454a <memmove+0x12>
 8004558:	4601      	mov	r1, r0
 800455a:	4402      	add	r2, r0
 800455c:	428a      	cmp	r2, r1
 800455e:	d100      	bne.n	8004562 <memmove+0x2a>
 8004560:	bd10      	pop	{r4, pc}
 8004562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800456a:	e7f7      	b.n	800455c <memmove+0x24>

0800456c <_free_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4605      	mov	r5, r0
 8004570:	2900      	cmp	r1, #0
 8004572:	d040      	beq.n	80045f6 <_free_r+0x8a>
 8004574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004578:	1f0c      	subs	r4, r1, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	bfb8      	it	lt
 800457e:	18e4      	addlt	r4, r4, r3
 8004580:	f000 f910 	bl	80047a4 <__malloc_lock>
 8004584:	4a1c      	ldr	r2, [pc, #112]	; (80045f8 <_free_r+0x8c>)
 8004586:	6813      	ldr	r3, [r2, #0]
 8004588:	b933      	cbnz	r3, 8004598 <_free_r+0x2c>
 800458a:	6063      	str	r3, [r4, #4]
 800458c:	6014      	str	r4, [r2, #0]
 800458e:	4628      	mov	r0, r5
 8004590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004594:	f000 b90c 	b.w	80047b0 <__malloc_unlock>
 8004598:	42a3      	cmp	r3, r4
 800459a:	d908      	bls.n	80045ae <_free_r+0x42>
 800459c:	6820      	ldr	r0, [r4, #0]
 800459e:	1821      	adds	r1, r4, r0
 80045a0:	428b      	cmp	r3, r1
 80045a2:	bf01      	itttt	eq
 80045a4:	6819      	ldreq	r1, [r3, #0]
 80045a6:	685b      	ldreq	r3, [r3, #4]
 80045a8:	1809      	addeq	r1, r1, r0
 80045aa:	6021      	streq	r1, [r4, #0]
 80045ac:	e7ed      	b.n	800458a <_free_r+0x1e>
 80045ae:	461a      	mov	r2, r3
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	b10b      	cbz	r3, 80045b8 <_free_r+0x4c>
 80045b4:	42a3      	cmp	r3, r4
 80045b6:	d9fa      	bls.n	80045ae <_free_r+0x42>
 80045b8:	6811      	ldr	r1, [r2, #0]
 80045ba:	1850      	adds	r0, r2, r1
 80045bc:	42a0      	cmp	r0, r4
 80045be:	d10b      	bne.n	80045d8 <_free_r+0x6c>
 80045c0:	6820      	ldr	r0, [r4, #0]
 80045c2:	4401      	add	r1, r0
 80045c4:	1850      	adds	r0, r2, r1
 80045c6:	4283      	cmp	r3, r0
 80045c8:	6011      	str	r1, [r2, #0]
 80045ca:	d1e0      	bne.n	800458e <_free_r+0x22>
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	4401      	add	r1, r0
 80045d2:	6011      	str	r1, [r2, #0]
 80045d4:	6053      	str	r3, [r2, #4]
 80045d6:	e7da      	b.n	800458e <_free_r+0x22>
 80045d8:	d902      	bls.n	80045e0 <_free_r+0x74>
 80045da:	230c      	movs	r3, #12
 80045dc:	602b      	str	r3, [r5, #0]
 80045de:	e7d6      	b.n	800458e <_free_r+0x22>
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	1821      	adds	r1, r4, r0
 80045e4:	428b      	cmp	r3, r1
 80045e6:	bf01      	itttt	eq
 80045e8:	6819      	ldreq	r1, [r3, #0]
 80045ea:	685b      	ldreq	r3, [r3, #4]
 80045ec:	1809      	addeq	r1, r1, r0
 80045ee:	6021      	streq	r1, [r4, #0]
 80045f0:	6063      	str	r3, [r4, #4]
 80045f2:	6054      	str	r4, [r2, #4]
 80045f4:	e7cb      	b.n	800458e <_free_r+0x22>
 80045f6:	bd38      	pop	{r3, r4, r5, pc}
 80045f8:	20000250 	.word	0x20000250

080045fc <sbrk_aligned>:
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	4e0e      	ldr	r6, [pc, #56]	; (8004638 <sbrk_aligned+0x3c>)
 8004600:	460c      	mov	r4, r1
 8004602:	6831      	ldr	r1, [r6, #0]
 8004604:	4605      	mov	r5, r0
 8004606:	b911      	cbnz	r1, 800460e <sbrk_aligned+0x12>
 8004608:	f000 f8bc 	bl	8004784 <_sbrk_r>
 800460c:	6030      	str	r0, [r6, #0]
 800460e:	4621      	mov	r1, r4
 8004610:	4628      	mov	r0, r5
 8004612:	f000 f8b7 	bl	8004784 <_sbrk_r>
 8004616:	1c43      	adds	r3, r0, #1
 8004618:	d00a      	beq.n	8004630 <sbrk_aligned+0x34>
 800461a:	1cc4      	adds	r4, r0, #3
 800461c:	f024 0403 	bic.w	r4, r4, #3
 8004620:	42a0      	cmp	r0, r4
 8004622:	d007      	beq.n	8004634 <sbrk_aligned+0x38>
 8004624:	1a21      	subs	r1, r4, r0
 8004626:	4628      	mov	r0, r5
 8004628:	f000 f8ac 	bl	8004784 <_sbrk_r>
 800462c:	3001      	adds	r0, #1
 800462e:	d101      	bne.n	8004634 <sbrk_aligned+0x38>
 8004630:	f04f 34ff 	mov.w	r4, #4294967295
 8004634:	4620      	mov	r0, r4
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	20000254 	.word	0x20000254

0800463c <_malloc_r>:
 800463c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004640:	1ccd      	adds	r5, r1, #3
 8004642:	f025 0503 	bic.w	r5, r5, #3
 8004646:	3508      	adds	r5, #8
 8004648:	2d0c      	cmp	r5, #12
 800464a:	bf38      	it	cc
 800464c:	250c      	movcc	r5, #12
 800464e:	2d00      	cmp	r5, #0
 8004650:	4607      	mov	r7, r0
 8004652:	db01      	blt.n	8004658 <_malloc_r+0x1c>
 8004654:	42a9      	cmp	r1, r5
 8004656:	d905      	bls.n	8004664 <_malloc_r+0x28>
 8004658:	230c      	movs	r3, #12
 800465a:	2600      	movs	r6, #0
 800465c:	603b      	str	r3, [r7, #0]
 800465e:	4630      	mov	r0, r6
 8004660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004664:	4e2e      	ldr	r6, [pc, #184]	; (8004720 <_malloc_r+0xe4>)
 8004666:	f000 f89d 	bl	80047a4 <__malloc_lock>
 800466a:	6833      	ldr	r3, [r6, #0]
 800466c:	461c      	mov	r4, r3
 800466e:	bb34      	cbnz	r4, 80046be <_malloc_r+0x82>
 8004670:	4629      	mov	r1, r5
 8004672:	4638      	mov	r0, r7
 8004674:	f7ff ffc2 	bl	80045fc <sbrk_aligned>
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	4604      	mov	r4, r0
 800467c:	d14d      	bne.n	800471a <_malloc_r+0xde>
 800467e:	6834      	ldr	r4, [r6, #0]
 8004680:	4626      	mov	r6, r4
 8004682:	2e00      	cmp	r6, #0
 8004684:	d140      	bne.n	8004708 <_malloc_r+0xcc>
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	4631      	mov	r1, r6
 800468a:	4638      	mov	r0, r7
 800468c:	eb04 0803 	add.w	r8, r4, r3
 8004690:	f000 f878 	bl	8004784 <_sbrk_r>
 8004694:	4580      	cmp	r8, r0
 8004696:	d13a      	bne.n	800470e <_malloc_r+0xd2>
 8004698:	6821      	ldr	r1, [r4, #0]
 800469a:	3503      	adds	r5, #3
 800469c:	1a6d      	subs	r5, r5, r1
 800469e:	f025 0503 	bic.w	r5, r5, #3
 80046a2:	3508      	adds	r5, #8
 80046a4:	2d0c      	cmp	r5, #12
 80046a6:	bf38      	it	cc
 80046a8:	250c      	movcc	r5, #12
 80046aa:	4638      	mov	r0, r7
 80046ac:	4629      	mov	r1, r5
 80046ae:	f7ff ffa5 	bl	80045fc <sbrk_aligned>
 80046b2:	3001      	adds	r0, #1
 80046b4:	d02b      	beq.n	800470e <_malloc_r+0xd2>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	442b      	add	r3, r5
 80046ba:	6023      	str	r3, [r4, #0]
 80046bc:	e00e      	b.n	80046dc <_malloc_r+0xa0>
 80046be:	6822      	ldr	r2, [r4, #0]
 80046c0:	1b52      	subs	r2, r2, r5
 80046c2:	d41e      	bmi.n	8004702 <_malloc_r+0xc6>
 80046c4:	2a0b      	cmp	r2, #11
 80046c6:	d916      	bls.n	80046f6 <_malloc_r+0xba>
 80046c8:	1961      	adds	r1, r4, r5
 80046ca:	42a3      	cmp	r3, r4
 80046cc:	6025      	str	r5, [r4, #0]
 80046ce:	bf18      	it	ne
 80046d0:	6059      	strne	r1, [r3, #4]
 80046d2:	6863      	ldr	r3, [r4, #4]
 80046d4:	bf08      	it	eq
 80046d6:	6031      	streq	r1, [r6, #0]
 80046d8:	5162      	str	r2, [r4, r5]
 80046da:	604b      	str	r3, [r1, #4]
 80046dc:	4638      	mov	r0, r7
 80046de:	f104 060b 	add.w	r6, r4, #11
 80046e2:	f000 f865 	bl	80047b0 <__malloc_unlock>
 80046e6:	f026 0607 	bic.w	r6, r6, #7
 80046ea:	1d23      	adds	r3, r4, #4
 80046ec:	1af2      	subs	r2, r6, r3
 80046ee:	d0b6      	beq.n	800465e <_malloc_r+0x22>
 80046f0:	1b9b      	subs	r3, r3, r6
 80046f2:	50a3      	str	r3, [r4, r2]
 80046f4:	e7b3      	b.n	800465e <_malloc_r+0x22>
 80046f6:	6862      	ldr	r2, [r4, #4]
 80046f8:	42a3      	cmp	r3, r4
 80046fa:	bf0c      	ite	eq
 80046fc:	6032      	streq	r2, [r6, #0]
 80046fe:	605a      	strne	r2, [r3, #4]
 8004700:	e7ec      	b.n	80046dc <_malloc_r+0xa0>
 8004702:	4623      	mov	r3, r4
 8004704:	6864      	ldr	r4, [r4, #4]
 8004706:	e7b2      	b.n	800466e <_malloc_r+0x32>
 8004708:	4634      	mov	r4, r6
 800470a:	6876      	ldr	r6, [r6, #4]
 800470c:	e7b9      	b.n	8004682 <_malloc_r+0x46>
 800470e:	230c      	movs	r3, #12
 8004710:	4638      	mov	r0, r7
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	f000 f84c 	bl	80047b0 <__malloc_unlock>
 8004718:	e7a1      	b.n	800465e <_malloc_r+0x22>
 800471a:	6025      	str	r5, [r4, #0]
 800471c:	e7de      	b.n	80046dc <_malloc_r+0xa0>
 800471e:	bf00      	nop
 8004720:	20000250 	.word	0x20000250

08004724 <_realloc_r>:
 8004724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004728:	4680      	mov	r8, r0
 800472a:	4614      	mov	r4, r2
 800472c:	460e      	mov	r6, r1
 800472e:	b921      	cbnz	r1, 800473a <_realloc_r+0x16>
 8004730:	4611      	mov	r1, r2
 8004732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004736:	f7ff bf81 	b.w	800463c <_malloc_r>
 800473a:	b92a      	cbnz	r2, 8004748 <_realloc_r+0x24>
 800473c:	f7ff ff16 	bl	800456c <_free_r>
 8004740:	4625      	mov	r5, r4
 8004742:	4628      	mov	r0, r5
 8004744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004748:	f000 f838 	bl	80047bc <_malloc_usable_size_r>
 800474c:	4284      	cmp	r4, r0
 800474e:	4607      	mov	r7, r0
 8004750:	d802      	bhi.n	8004758 <_realloc_r+0x34>
 8004752:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004756:	d812      	bhi.n	800477e <_realloc_r+0x5a>
 8004758:	4621      	mov	r1, r4
 800475a:	4640      	mov	r0, r8
 800475c:	f7ff ff6e 	bl	800463c <_malloc_r>
 8004760:	4605      	mov	r5, r0
 8004762:	2800      	cmp	r0, #0
 8004764:	d0ed      	beq.n	8004742 <_realloc_r+0x1e>
 8004766:	42bc      	cmp	r4, r7
 8004768:	4622      	mov	r2, r4
 800476a:	4631      	mov	r1, r6
 800476c:	bf28      	it	cs
 800476e:	463a      	movcs	r2, r7
 8004770:	f7ff fed4 	bl	800451c <memcpy>
 8004774:	4631      	mov	r1, r6
 8004776:	4640      	mov	r0, r8
 8004778:	f7ff fef8 	bl	800456c <_free_r>
 800477c:	e7e1      	b.n	8004742 <_realloc_r+0x1e>
 800477e:	4635      	mov	r5, r6
 8004780:	e7df      	b.n	8004742 <_realloc_r+0x1e>
	...

08004784 <_sbrk_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	2300      	movs	r3, #0
 8004788:	4d05      	ldr	r5, [pc, #20]	; (80047a0 <_sbrk_r+0x1c>)
 800478a:	4604      	mov	r4, r0
 800478c:	4608      	mov	r0, r1
 800478e:	602b      	str	r3, [r5, #0]
 8004790:	f7fc fbd0 	bl	8000f34 <_sbrk>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_sbrk_r+0x1a>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	b103      	cbz	r3, 800479e <_sbrk_r+0x1a>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	20000258 	.word	0x20000258

080047a4 <__malloc_lock>:
 80047a4:	4801      	ldr	r0, [pc, #4]	; (80047ac <__malloc_lock+0x8>)
 80047a6:	f000 b811 	b.w	80047cc <__retarget_lock_acquire_recursive>
 80047aa:	bf00      	nop
 80047ac:	2000025c 	.word	0x2000025c

080047b0 <__malloc_unlock>:
 80047b0:	4801      	ldr	r0, [pc, #4]	; (80047b8 <__malloc_unlock+0x8>)
 80047b2:	f000 b80c 	b.w	80047ce <__retarget_lock_release_recursive>
 80047b6:	bf00      	nop
 80047b8:	2000025c 	.word	0x2000025c

080047bc <_malloc_usable_size_r>:
 80047bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047c0:	1f18      	subs	r0, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bfbc      	itt	lt
 80047c6:	580b      	ldrlt	r3, [r1, r0]
 80047c8:	18c0      	addlt	r0, r0, r3
 80047ca:	4770      	bx	lr

080047cc <__retarget_lock_acquire_recursive>:
 80047cc:	4770      	bx	lr

080047ce <__retarget_lock_release_recursive>:
 80047ce:	4770      	bx	lr

080047d0 <_init>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr

080047dc <_fini>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	bf00      	nop
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr
