
CAN_Loopback_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a2c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004b38  08004b38  00005b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd8  08004bd8  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004bd8  08004bd8  00005bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004be0  08004be0  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be0  08004be0  00005be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004be4  08004be4  00005be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004be8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000060  08004c48  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08004c48  00006390  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df02  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed8  00000000  00000000  00013f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00015e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8b  00000000  00000000  00016be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cd6  00000000  00000000  0001766b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee63  00000000  00000000  0002f341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab9f  00000000  00000000  0003e1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8d43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e94  00000000  00000000  000c8d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ccc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b20 	.word	0x08004b20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08004b20 	.word	0x08004b20

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ae:	2afd      	cmp	r2, #253	@ 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	@ 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_frsub>:
 80002c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__addsf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_fsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002d0 <__addsf3>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	bf1f      	itttt	ne
 80002d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d8:	ea92 0f03 	teqne	r2, r3
 80002dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e4:	d06a      	beq.n	80003bc <__addsf3+0xec>
 80002e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ee:	bfc1      	itttt	gt
 80002f0:	18d2      	addgt	r2, r2, r3
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	4048      	eorgt	r0, r1
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	bfb8      	it	lt
 80002fa:	425b      	neglt	r3, r3
 80002fc:	2b19      	cmp	r3, #25
 80002fe:	bf88      	it	hi
 8000300:	4770      	bxhi	lr
 8000302:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000306:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4240      	negne	r0, r0
 8000312:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000316:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800031a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800031e:	bf18      	it	ne
 8000320:	4249      	negne	r1, r1
 8000322:	ea92 0f03 	teq	r2, r3
 8000326:	d03f      	beq.n	80003a8 <__addsf3+0xd8>
 8000328:	f1a2 0201 	sub.w	r2, r2, #1
 800032c:	fa41 fc03 	asr.w	ip, r1, r3
 8000330:	eb10 000c 	adds.w	r0, r0, ip
 8000334:	f1c3 0320 	rsb	r3, r3, #32
 8000338:	fa01 f103 	lsl.w	r1, r1, r3
 800033c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000340:	d502      	bpl.n	8000348 <__addsf3+0x78>
 8000342:	4249      	negs	r1, r1
 8000344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000348:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800034c:	d313      	bcc.n	8000376 <__addsf3+0xa6>
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000352:	d306      	bcc.n	8000362 <__addsf3+0x92>
 8000354:	0840      	lsrs	r0, r0, #1
 8000356:	ea4f 0131 	mov.w	r1, r1, rrx
 800035a:	f102 0201 	add.w	r2, r2, #1
 800035e:	2afe      	cmp	r2, #254	@ 0xfe
 8000360:	d251      	bcs.n	8000406 <__addsf3+0x136>
 8000362:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036a:	bf08      	it	eq
 800036c:	f020 0001 	biceq.w	r0, r0, #1
 8000370:	ea40 0003 	orr.w	r0, r0, r3
 8000374:	4770      	bx	lr
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	eb40 0000 	adc.w	r0, r0, r0
 800037c:	3a01      	subs	r2, #1
 800037e:	bf28      	it	cs
 8000380:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000384:	d2ed      	bcs.n	8000362 <__addsf3+0x92>
 8000386:	fab0 fc80 	clz	ip, r0
 800038a:	f1ac 0c08 	sub.w	ip, ip, #8
 800038e:	ebb2 020c 	subs.w	r2, r2, ip
 8000392:	fa00 f00c 	lsl.w	r0, r0, ip
 8000396:	bfaa      	itet	ge
 8000398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800039c:	4252      	neglt	r2, r2
 800039e:	4318      	orrge	r0, r3
 80003a0:	bfbc      	itt	lt
 80003a2:	40d0      	lsrlt	r0, r2
 80003a4:	4318      	orrlt	r0, r3
 80003a6:	4770      	bx	lr
 80003a8:	f092 0f00 	teq	r2, #0
 80003ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003b0:	bf06      	itte	eq
 80003b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003b6:	3201      	addeq	r2, #1
 80003b8:	3b01      	subne	r3, #1
 80003ba:	e7b5      	b.n	8000328 <__addsf3+0x58>
 80003bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c4:	bf18      	it	ne
 80003c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ca:	d021      	beq.n	8000410 <__addsf3+0x140>
 80003cc:	ea92 0f03 	teq	r2, r3
 80003d0:	d004      	beq.n	80003dc <__addsf3+0x10c>
 80003d2:	f092 0f00 	teq	r2, #0
 80003d6:	bf08      	it	eq
 80003d8:	4608      	moveq	r0, r1
 80003da:	4770      	bx	lr
 80003dc:	ea90 0f01 	teq	r0, r1
 80003e0:	bf1c      	itt	ne
 80003e2:	2000      	movne	r0, #0
 80003e4:	4770      	bxne	lr
 80003e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003ea:	d104      	bne.n	80003f6 <__addsf3+0x126>
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	bf28      	it	cs
 80003f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003f4:	4770      	bx	lr
 80003f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003fa:	bf3c      	itt	cc
 80003fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000400:	4770      	bxcc	lr
 8000402:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000406:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800040a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800040e:	4770      	bx	lr
 8000410:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000414:	bf16      	itet	ne
 8000416:	4608      	movne	r0, r1
 8000418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800041c:	4601      	movne	r1, r0
 800041e:	0242      	lsls	r2, r0, #9
 8000420:	bf06      	itte	eq
 8000422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000426:	ea90 0f01 	teqeq	r0, r1
 800042a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800042e:	4770      	bx	lr

08000430 <__aeabi_ui2f>:
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e004      	b.n	8000440 <__aeabi_i2f+0x8>
 8000436:	bf00      	nop

08000438 <__aeabi_i2f>:
 8000438:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	ea5f 0c00 	movs.w	ip, r0
 8000444:	bf08      	it	eq
 8000446:	4770      	bxeq	lr
 8000448:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800044c:	4601      	mov	r1, r0
 800044e:	f04f 0000 	mov.w	r0, #0
 8000452:	e01c      	b.n	800048e <__aeabi_l2f+0x2a>

08000454 <__aeabi_ul2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e00a      	b.n	8000478 <__aeabi_l2f+0x14>
 8000462:	bf00      	nop

08000464 <__aeabi_l2f>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000470:	d502      	bpl.n	8000478 <__aeabi_l2f+0x14>
 8000472:	4240      	negs	r0, r0
 8000474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000478:	ea5f 0c01 	movs.w	ip, r1
 800047c:	bf02      	ittt	eq
 800047e:	4684      	moveq	ip, r0
 8000480:	4601      	moveq	r1, r0
 8000482:	2000      	moveq	r0, #0
 8000484:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000488:	bf08      	it	eq
 800048a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800048e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000492:	fabc f28c 	clz	r2, ip
 8000496:	3a08      	subs	r2, #8
 8000498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800049c:	db10      	blt.n	80004c0 <__aeabi_l2f+0x5c>
 800049e:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a2:	4463      	add	r3, ip
 80004a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a8:	f1c2 0220 	rsb	r2, r2, #32
 80004ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	eb43 0002 	adc.w	r0, r3, r2
 80004b8:	bf08      	it	eq
 80004ba:	f020 0001 	biceq.w	r0, r0, #1
 80004be:	4770      	bx	lr
 80004c0:	f102 0220 	add.w	r2, r2, #32
 80004c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d0:	fa21 f202 	lsr.w	r2, r1, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004de:	4770      	bx	lr

080004e0 <__aeabi_f2iz>:
 80004e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004e8:	d30f      	bcc.n	800050a <__aeabi_f2iz+0x2a>
 80004ea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004f2:	d90d      	bls.n	8000510 <__aeabi_f2iz+0x30>
 80004f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004fc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000500:	fa23 f002 	lsr.w	r0, r3, r2
 8000504:	bf18      	it	ne
 8000506:	4240      	negne	r0, r0
 8000508:	4770      	bx	lr
 800050a:	f04f 0000 	mov.w	r0, #0
 800050e:	4770      	bx	lr
 8000510:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000514:	d101      	bne.n	800051a <__aeabi_f2iz+0x3a>
 8000516:	0242      	lsls	r2, r0, #9
 8000518:	d105      	bne.n	8000526 <__aeabi_f2iz+0x46>
 800051a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800051e:	bf08      	it	eq
 8000520:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000524:	4770      	bx	lr
 8000526:	f04f 0000 	mov.w	r0, #0
 800052a:	4770      	bx	lr

0800052c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
}
 8000534:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000536:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <__NVIC_SystemReset+0x24>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800053e:	4904      	ldr	r1, [pc, #16]	@ (8000550 <__NVIC_SystemReset+0x24>)
 8000540:	4b04      	ldr	r3, [pc, #16]	@ (8000554 <__NVIC_SystemReset+0x28>)
 8000542:	4313      	orrs	r3, r2
 8000544:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000546:	f3bf 8f4f 	dsb	sy
}
 800054a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <__NVIC_SystemReset+0x20>
 8000550:	e000ed00 	.word	0xe000ed00
 8000554:	05fa0004 	.word	0x05fa0004

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800055c:	b08d      	sub	sp, #52	@ 0x34
 800055e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f000 fdae 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 fa24 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 fb34 	bl	8000bd4 <MX_GPIO_Init>
  MX_CAN_Init();
 800056c:	f000 fa66 	bl	8000a3c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000570:	f000 fb06 	bl	8000b80 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000574:	f000 fab6 	bl	8000ae4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //start timer request interrupt
  HAL_TIM_Base_Start_IT(&htim2);
 8000578:	4820      	ldr	r0, [pc, #128]	@ (80005fc <main+0xa4>)
 800057a:	f002 fc11 	bl	8002da0 <HAL_TIM_Base_Start_IT>

  //Start the CAN peripheral
  HAL_CAN_Start(&hcan);
 800057e:	4820      	ldr	r0, [pc, #128]	@ (8000600 <main+0xa8>)
 8000580:	f000 ffc4 	bl	800150c <HAL_CAN_Start>

  //Start notification and set to interrupt on pending message
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000584:	2102      	movs	r1, #2
 8000586:	481e      	ldr	r0, [pc, #120]	@ (8000600 <main+0xa8>)
 8000588:	f001 f9f4 	bl	8001974 <HAL_CAN_ActivateNotification>

  //Set Arbitration and COntrol Fields of the TxField
  TxHeader.DLC = 8; 			//Specify length of data being sent (here 8 bytes)
 800058c:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <main+0xac>)
 800058e:	2208      	movs	r2, #8
 8000590:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0; 			//Not using Extended ID
 8000592:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <main+0xac>)
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;	//Specify identifier type: std or extended (Here std)
 8000598:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <main+0xac>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA; 	//Specify if sending data or remote frame (here data)
 800059e:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <main+0xac>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103; 		//ID for the CAN peripheral used for filtering (up to 11bit wide)
 80005a4:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <main+0xac>)
 80005a6:	f240 1203 	movw	r2, #259	@ 0x103
 80005aa:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE; //Not used
 80005ac:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <main+0xac>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	751a      	strb	r2, [r3, #20]

  //Set Arbitration and COntrol Fields of the TxField
  TxHeaderData.DLC = 0; 			//Specify length of data being sent (here 8 bytes)
 80005b2:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <main+0xb0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  TxHeaderData.ExtId = 0; 			//Not using Extended ID
 80005b8:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <main+0xb0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
  TxHeaderData.IDE = CAN_ID_STD;	//Specify identifier type: std or extended (Here std)
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <main+0xb0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  TxHeaderData.RTR = CAN_RTR_DATA; 	//Specify if sending data or remote frame (here data)
 80005c4:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <main+0xb0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  TxHeaderData.StdId = 0x070; 		//ID for the CAN peripheral used for filtering (up to 11bit wide)
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <main+0xb0>)
 80005cc:	2270      	movs	r2, #112	@ 0x70
 80005ce:	601a      	str	r2, [r3, #0]
  TxHeaderData.TransmitGlobalTime = DISABLE; //Not used
 80005d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <main+0xb0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	751a      	strb	r2, [r3, #20]
  dataBuff[3] = 4095;

  memcpy(TxData, dataBuff, 8);
	*/
  //Start UART Interrupt
  HAL_UART_Receive_IT(&huart1, usartRxBuff, 9);
 80005d6:	2209      	movs	r2, #9
 80005d8:	490c      	ldr	r1, [pc, #48]	@ (800060c <main+0xb4>)
 80005da:	480d      	ldr	r0, [pc, #52]	@ (8000610 <main+0xb8>)
 80005dc:	f003 f84b 	bl	8003676 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e6:	480b      	ldr	r0, [pc, #44]	@ (8000614 <main+0xbc>)
 80005e8:	f001 ff48 	bl	800247c <HAL_GPIO_WritePin>
  while (1)
  {
	//send the message (Should be received in the RxFifo0)
	if(usartDataInFlag){
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <main+0xc0>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d032      	beq.n	800065a <main+0x102>
		for(uint8_t i = 0; i<8; i++){
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	e019      	b.n	800062e <main+0xd6>
 80005fa:	bf00      	nop
 80005fc:	200000a4 	.word	0x200000a4
 8000600:	2000007c 	.word	0x2000007c
 8000604:	2000013c 	.word	0x2000013c
 8000608:	20000154 	.word	0x20000154
 800060c:	200001dc 	.word	0x200001dc
 8000610:	200000ec 	.word	0x200000ec
 8000614:	40011000 	.word	0x40011000
 8000618:	20000138 	.word	0x20000138
//			if(usartRxBuff[i]>='1' && usartRxBuff[i] <= '9') {
//				TxData[i] = (uint8_t) (usartRxBuff[i]-'0');
//			}
//			else {TxData[i] = 0;}
			TxData[i] = usartRxBuff[i]; // NF 11/16
 800061c:	7bfa      	ldrb	r2, [r7, #15]
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	49a7      	ldr	r1, [pc, #668]	@ (80008c0 <main+0x368>)
 8000622:	5c89      	ldrb	r1, [r1, r2]
 8000624:	4aa7      	ldr	r2, [pc, #668]	@ (80008c4 <main+0x36c>)
 8000626:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i<8; i++){
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	3301      	adds	r3, #1
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	2b07      	cmp	r3, #7
 8000632:	d9f3      	bls.n	800061c <main+0xc4>
		}


		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000634:	4ba4      	ldr	r3, [pc, #656]	@ (80008c8 <main+0x370>)
 8000636:	4aa3      	ldr	r2, [pc, #652]	@ (80008c4 <main+0x36c>)
 8000638:	49a4      	ldr	r1, [pc, #656]	@ (80008cc <main+0x374>)
 800063a:	48a5      	ldr	r0, [pc, #660]	@ (80008d0 <main+0x378>)
 800063c:	f000 ffaa 	bl	8001594 <HAL_CAN_AddTxMessage>
		usartDataInFlag = RESET;
 8000640:	4ba4      	ldr	r3, [pc, #656]	@ (80008d4 <main+0x37c>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
		//clean up
		memset(usartRxBuff,'\0', 16);
 8000646:	2210      	movs	r2, #16
 8000648:	2100      	movs	r1, #0
 800064a:	489d      	ldr	r0, [pc, #628]	@ (80008c0 <main+0x368>)
 800064c:	f003 fdd8 	bl	8004200 <memset>
		HAL_UART_Receive_IT(&huart1, usartRxBuff, 9);
 8000650:	2209      	movs	r2, #9
 8000652:	499b      	ldr	r1, [pc, #620]	@ (80008c0 <main+0x368>)
 8000654:	48a0      	ldr	r0, [pc, #640]	@ (80008d8 <main+0x380>)
 8000656:	f003 f80e 	bl	8003676 <HAL_UART_Receive_IT>
	}
	if(CanMsgInFlag){
 800065a:	4ba0      	ldr	r3, [pc, #640]	@ (80008dc <main+0x384>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d044      	beq.n	80006ec <main+0x194>
		//sprintf((char *)&usartBuff, "Toggle PIN%d %d\n", (int)dataPrep[0], (int)dataPrep[1]);
		sprintf((char * ) &usartBuff, "PS%i%i%i%i%i%i%i%i%i\n",
			  (int) (dataPrep[0] & (0x1 << 0)),
 8000662:	4b9f      	ldr	r3, [pc, #636]	@ (80008e0 <main+0x388>)
 8000664:	781b      	ldrb	r3, [r3, #0]
		sprintf((char * ) &usartBuff, "PS%i%i%i%i%i%i%i%i%i\n",
 8000666:	f003 0201 	and.w	r2, r3, #1
			  (int) (dataPrep[0] & (0x1 << 1)),
 800066a:	4b9d      	ldr	r3, [pc, #628]	@ (80008e0 <main+0x388>)
 800066c:	781b      	ldrb	r3, [r3, #0]
		sprintf((char * ) &usartBuff, "PS%i%i%i%i%i%i%i%i%i\n",
 800066e:	f003 0302 	and.w	r3, r3, #2
			  (int) (dataPrep[1]),
 8000672:	499b      	ldr	r1, [pc, #620]	@ (80008e0 <main+0x388>)
 8000674:	7849      	ldrb	r1, [r1, #1]
		sprintf((char * ) &usartBuff, "PS%i%i%i%i%i%i%i%i%i\n",
 8000676:	4608      	mov	r0, r1
			  (int) (dataPrep[2]),
 8000678:	4999      	ldr	r1, [pc, #612]	@ (80008e0 <main+0x388>)
 800067a:	7889      	ldrb	r1, [r1, #2]
		sprintf((char * ) &usartBuff, "PS%i%i%i%i%i%i%i%i%i\n",
 800067c:	460c      	mov	r4, r1
			  (int) (dataPrep[3]),
 800067e:	4998      	ldr	r1, [pc, #608]	@ (80008e0 <main+0x388>)
 8000680:	78c9      	ldrb	r1, [r1, #3]
		sprintf((char * ) &usartBuff, "PS%i%i%i%i%i%i%i%i%i\n",
 8000682:	460d      	mov	r5, r1
			  (int) (dataPrep[4]),
 8000684:	4996      	ldr	r1, [pc, #600]	@ (80008e0 <main+0x388>)
 8000686:	7909      	ldrb	r1, [r1, #4]
		sprintf((char * ) &usartBuff, "PS%i%i%i%i%i%i%i%i%i\n",
 8000688:	460e      	mov	r6, r1
			  (int) (dataPrep[5]),
 800068a:	4995      	ldr	r1, [pc, #596]	@ (80008e0 <main+0x388>)
 800068c:	7949      	ldrb	r1, [r1, #5]
		sprintf((char * ) &usartBuff, "PS%i%i%i%i%i%i%i%i%i\n",
 800068e:	6079      	str	r1, [r7, #4]
			  (int) (dataPrep[6]),
 8000690:	4993      	ldr	r1, [pc, #588]	@ (80008e0 <main+0x388>)
 8000692:	7989      	ldrb	r1, [r1, #6]
		sprintf((char * ) &usartBuff, "PS%i%i%i%i%i%i%i%i%i\n",
 8000694:	6039      	str	r1, [r7, #0]
			  (int) (dataPrep[7])
 8000696:	4992      	ldr	r1, [pc, #584]	@ (80008e0 <main+0x388>)
 8000698:	79c9      	ldrb	r1, [r1, #7]
		sprintf((char * ) &usartBuff, "PS%i%i%i%i%i%i%i%i%i\n",
 800069a:	9106      	str	r1, [sp, #24]
 800069c:	f8d7 c000 	ldr.w	ip, [r7]
 80006a0:	f8cd c014 	str.w	ip, [sp, #20]
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	9104      	str	r1, [sp, #16]
 80006a8:	9603      	str	r6, [sp, #12]
 80006aa:	9502      	str	r5, [sp, #8]
 80006ac:	9401      	str	r4, [sp, #4]
 80006ae:	9000      	str	r0, [sp, #0]
 80006b0:	498c      	ldr	r1, [pc, #560]	@ (80008e4 <main+0x38c>)
 80006b2:	488d      	ldr	r0, [pc, #564]	@ (80008e8 <main+0x390>)
 80006b4:	f003 fd84 	bl	80041c0 <siprintf>
		);
		HAL_UART_Transmit(&huart1, (unsigned char *)usartBuff, strlen((char *)usartBuff), HAL_MAX_DELAY);
 80006b8:	488b      	ldr	r0, [pc, #556]	@ (80008e8 <main+0x390>)
 80006ba:	f7ff fd47 	bl	800014c <strlen>
 80006be:	4603      	mov	r3, r0
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	4988      	ldr	r1, [pc, #544]	@ (80008e8 <main+0x390>)
 80006c8:	4883      	ldr	r0, [pc, #524]	@ (80008d8 <main+0x380>)
 80006ca:	f002 ff51 	bl	8003570 <HAL_UART_Transmit>
		memset((char *)usartBuff, '\0', strlen((char *)usartBuff));
 80006ce:	4886      	ldr	r0, [pc, #536]	@ (80008e8 <main+0x390>)
 80006d0:	f7ff fd3c 	bl	800014c <strlen>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	4883      	ldr	r0, [pc, #524]	@ (80008e8 <main+0x390>)
 80006dc:	f003 fd90 	bl	8004200 <memset>
		CanMsgInFlag = RESET;
 80006e0:	4b7e      	ldr	r3, [pc, #504]	@ (80008dc <main+0x384>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
		timCount = 0;
 80006e6:	4b81      	ldr	r3, [pc, #516]	@ (80008ec <main+0x394>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	801a      	strh	r2, [r3, #0]
	/*sprintf((char *)&usartBuff, "%d %d %d %d %d\n", CanMsgInFlag, CanDataFlag1, CanDataFlag2, CanDataRqFlag, usartDataInFlag);
	HAL_UART_Transmit(&huart1, (unsigned char *)usartBuff, strlen((char *)usartBuff), HAL_MAX_DELAY);

	memset((char *)usartBuff, '\0', strlen((char *)usartBuff));
	*/
	if(CanDataFlag1 && CanDataFlag2){
 80006ec:	4b80      	ldr	r3, [pc, #512]	@ (80008f0 <main+0x398>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	f000 8131 	beq.w	8000958 <main+0x400>
 80006f6:	4b7f      	ldr	r3, [pc, #508]	@ (80008f4 <main+0x39c>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	f000 812c 	beq.w	8000958 <main+0x400>

			sprintf((char *)&usartBuff, "%4i, %4i, %4i, %4i, %4i, %4i, %4i, %4i\n", (int)(slope1 * (float)signedBuff1[0] + offset1),(int)(slope2 * (float)signedBuff1[1]+offset2),(int)(slope3 * (float)signedBuff1[2]+offset3),(int)(slope4* (float)signedBuff1[3] + offset4), (int)(slope5 * dataBuff2[0]+ offset5),(int)(slope6 *dataBuff2[1] + offset6),(int)(slope7 * dataBuff2[2] +offset7),(int)(slope8 * dataBuff2[3]+offset8));
 8000700:	4b7d      	ldr	r3, [pc, #500]	@ (80008f8 <main+0x3a0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fe95 	bl	8000438 <__aeabi_i2f>
 800070e:	4603      	mov	r3, r0
 8000710:	4a7a      	ldr	r2, [pc, #488]	@ (80008fc <main+0x3a4>)
 8000712:	4611      	mov	r1, r2
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fd21 	bl	800015c <__aeabi_fmul>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	4b78      	ldr	r3, [pc, #480]	@ (8000900 <main+0x3a8>)
 8000720:	4619      	mov	r1, r3
 8000722:	4610      	mov	r0, r2
 8000724:	f7ff fdd4 	bl	80002d0 <__addsf3>
 8000728:	4603      	mov	r3, r0
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fed8 	bl	80004e0 <__aeabi_f2iz>
 8000730:	4680      	mov	r8, r0
 8000732:	4b71      	ldr	r3, [pc, #452]	@ (80008f8 <main+0x3a0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	3302      	adds	r3, #2
 8000738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fe7b 	bl	8000438 <__aeabi_i2f>
 8000742:	4603      	mov	r3, r0
 8000744:	4a6f      	ldr	r2, [pc, #444]	@ (8000904 <main+0x3ac>)
 8000746:	4611      	mov	r1, r2
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fd07 	bl	800015c <__aeabi_fmul>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	4b6d      	ldr	r3, [pc, #436]	@ (8000908 <main+0x3b0>)
 8000754:	4619      	mov	r1, r3
 8000756:	4610      	mov	r0, r2
 8000758:	f7ff fdba 	bl	80002d0 <__addsf3>
 800075c:	4603      	mov	r3, r0
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff febe 	bl	80004e0 <__aeabi_f2iz>
 8000764:	4681      	mov	r9, r0
 8000766:	4b64      	ldr	r3, [pc, #400]	@ (80008f8 <main+0x3a0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3304      	adds	r3, #4
 800076c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fe61 	bl	8000438 <__aeabi_i2f>
 8000776:	4603      	mov	r3, r0
 8000778:	4a64      	ldr	r2, [pc, #400]	@ (800090c <main+0x3b4>)
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fced 	bl	800015c <__aeabi_fmul>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	4b62      	ldr	r3, [pc, #392]	@ (8000910 <main+0x3b8>)
 8000788:	4619      	mov	r1, r3
 800078a:	4610      	mov	r0, r2
 800078c:	f7ff fda0 	bl	80002d0 <__addsf3>
 8000790:	4603      	mov	r3, r0
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fea4 	bl	80004e0 <__aeabi_f2iz>
 8000798:	4604      	mov	r4, r0
 800079a:	4b57      	ldr	r3, [pc, #348]	@ (80008f8 <main+0x3a0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3306      	adds	r3, #6
 80007a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fe47 	bl	8000438 <__aeabi_i2f>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a59      	ldr	r2, [pc, #356]	@ (8000914 <main+0x3bc>)
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fcd3 	bl	800015c <__aeabi_fmul>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b57      	ldr	r3, [pc, #348]	@ (8000918 <main+0x3c0>)
 80007bc:	4619      	mov	r1, r3
 80007be:	4610      	mov	r0, r2
 80007c0:	f7ff fd86 	bl	80002d0 <__addsf3>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fe8a 	bl	80004e0 <__aeabi_f2iz>
 80007cc:	4605      	mov	r5, r0
 80007ce:	4b53      	ldr	r3, [pc, #332]	@ (800091c <main+0x3c4>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fe30 	bl	8000438 <__aeabi_i2f>
 80007d8:	4603      	mov	r3, r0
 80007da:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fcbb 	bl	800015c <__aeabi_fmul>
 80007e6:	4603      	mov	r3, r0
 80007e8:	461a      	mov	r2, r3
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	4619      	mov	r1, r3
 80007f0:	4610      	mov	r0, r2
 80007f2:	f7ff fd6d 	bl	80002d0 <__addsf3>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fe71 	bl	80004e0 <__aeabi_f2iz>
 80007fe:	4606      	mov	r6, r0
 8000800:	4b46      	ldr	r3, [pc, #280]	@ (800091c <main+0x3c4>)
 8000802:	885b      	ldrh	r3, [r3, #2]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fe17 	bl	8000438 <__aeabi_i2f>
 800080a:	4603      	mov	r3, r0
 800080c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fca2 	bl	800015c <__aeabi_fmul>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	4619      	mov	r1, r3
 8000822:	4610      	mov	r0, r2
 8000824:	f7ff fd54 	bl	80002d0 <__addsf3>
 8000828:	4603      	mov	r3, r0
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fe58 	bl	80004e0 <__aeabi_f2iz>
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	4b3a      	ldr	r3, [pc, #232]	@ (800091c <main+0x3c4>)
 8000834:	889b      	ldrh	r3, [r3, #4]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fdfe 	bl	8000438 <__aeabi_i2f>
 800083c:	4603      	mov	r3, r0
 800083e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fc89 	bl	800015c <__aeabi_fmul>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	f04f 0300 	mov.w	r3, #0
 8000852:	4619      	mov	r1, r3
 8000854:	4610      	mov	r0, r2
 8000856:	f7ff fd3b 	bl	80002d0 <__addsf3>
 800085a:	4603      	mov	r3, r0
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fe3f 	bl	80004e0 <__aeabi_f2iz>
 8000862:	6038      	str	r0, [r7, #0]
 8000864:	4b2d      	ldr	r3, [pc, #180]	@ (800091c <main+0x3c4>)
 8000866:	88db      	ldrh	r3, [r3, #6]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fde5 	bl	8000438 <__aeabi_i2f>
 800086e:	4603      	mov	r3, r0
 8000870:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fc70 	bl	800015c <__aeabi_fmul>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	4619      	mov	r1, r3
 8000886:	4610      	mov	r0, r2
 8000888:	f7ff fd22 	bl	80002d0 <__addsf3>
 800088c:	4603      	mov	r3, r0
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fe26 	bl	80004e0 <__aeabi_f2iz>
 8000894:	4603      	mov	r3, r0
 8000896:	9305      	str	r3, [sp, #20]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	9304      	str	r3, [sp, #16]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	9303      	str	r3, [sp, #12]
 80008a0:	9602      	str	r6, [sp, #8]
 80008a2:	9501      	str	r5, [sp, #4]
 80008a4:	9400      	str	r4, [sp, #0]
 80008a6:	464b      	mov	r3, r9
 80008a8:	4642      	mov	r2, r8
 80008aa:	491d      	ldr	r1, [pc, #116]	@ (8000920 <main+0x3c8>)
 80008ac:	480e      	ldr	r0, [pc, #56]	@ (80008e8 <main+0x390>)
 80008ae:	f003 fc87 	bl	80041c0 <siprintf>
			HAL_UART_Transmit(&huart1, (unsigned char *)usartBuff, strlen((char *)usartBuff), HAL_MAX_DELAY);
 80008b2:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <main+0x390>)
 80008b4:	f7ff fc4a 	bl	800014c <strlen>
 80008b8:	4603      	mov	r3, r0
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	e032      	b.n	8000924 <main+0x3cc>
 80008be:	bf00      	nop
 80008c0:	200001dc 	.word	0x200001dc
 80008c4:	2000018c 	.word	0x2000018c
 80008c8:	20000188 	.word	0x20000188
 80008cc:	2000013c 	.word	0x2000013c
 80008d0:	2000007c 	.word	0x2000007c
 80008d4:	20000138 	.word	0x20000138
 80008d8:	200000ec 	.word	0x200000ec
 80008dc:	20000134 	.word	0x20000134
 80008e0:	2000022c 	.word	0x2000022c
 80008e4:	08004b38 	.word	0x08004b38
 80008e8:	2000019c 	.word	0x2000019c
 80008ec:	2000023c 	.word	0x2000023c
 80008f0:	20000135 	.word	0x20000135
 80008f4:	20000136 	.word	0x20000136
 80008f8:	20000000 	.word	0x20000000
 80008fc:	3e6fec57 	.word	0x3e6fec57
 8000900:	c41f0e14 	.word	0xc41f0e14
 8000904:	3d4154ca 	.word	0x3d4154ca
 8000908:	c2fe2e14 	.word	0xc2fe2e14
 800090c:	3d408312 	.word	0x3d408312
 8000910:	c2f94ccd 	.word	0xc2f94ccd
 8000914:	3d3f4880 	.word	0x3d3f4880
 8000918:	c3038a3d 	.word	0xc3038a3d
 800091c:	20000224 	.word	0x20000224
 8000920:	08004b50 	.word	0x08004b50
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	4916      	ldr	r1, [pc, #88]	@ (8000984 <main+0x42c>)
 800092a:	4817      	ldr	r0, [pc, #92]	@ (8000988 <main+0x430>)
 800092c:	f002 fe20 	bl	8003570 <HAL_UART_Transmit>
			memset((char *)usartBuff, '\0', strlen((char *)usartBuff));
 8000930:	4814      	ldr	r0, [pc, #80]	@ (8000984 <main+0x42c>)
 8000932:	f7ff fc0b 	bl	800014c <strlen>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	4811      	ldr	r0, [pc, #68]	@ (8000984 <main+0x42c>)
 800093e:	f003 fc5f 	bl	8004200 <memset>
			CanDataFlag1 = RESET;
 8000942:	4b12      	ldr	r3, [pc, #72]	@ (800098c <main+0x434>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
			CanDataFlag2 = RESET;
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <main+0x438>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800094e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000952:	4810      	ldr	r0, [pc, #64]	@ (8000994 <main+0x43c>)
 8000954:	f001 fdaa 	bl	80024ac <HAL_GPIO_TogglePin>
	}
	if(CanDataRqFlag) {
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <main+0x440>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d008      	beq.n	8000972 <main+0x41a>

		HAL_CAN_AddTxMessage(&hcan, &TxHeaderData, emptyFrame, &TxMailbox);
 8000960:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <main+0x444>)
 8000962:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <main+0x448>)
 8000964:	490f      	ldr	r1, [pc, #60]	@ (80009a4 <main+0x44c>)
 8000966:	4810      	ldr	r0, [pc, #64]	@ (80009a8 <main+0x450>)
 8000968:	f000 fe14 	bl	8001594 <HAL_CAN_AddTxMessage>

		CanDataRqFlag = RESET;
 800096c:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <main+0x440>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]


	}

	if (timCount > 60000) {
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <main+0x454>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800097a:	4293      	cmp	r3, r2
 800097c:	f67f ae36 	bls.w	80005ec <main+0x94>

		NVIC_SystemReset();
 8000980:	f7ff fdd4 	bl	800052c <__NVIC_SystemReset>
 8000984:	2000019c 	.word	0x2000019c
 8000988:	200000ec 	.word	0x200000ec
 800098c:	20000135 	.word	0x20000135
 8000990:	20000136 	.word	0x20000136
 8000994:	40011000 	.word	0x40011000
 8000998:	20000137 	.word	0x20000137
 800099c:	20000188 	.word	0x20000188
 80009a0:	20000234 	.word	0x20000234
 80009a4:	20000154 	.word	0x20000154
 80009a8:	2000007c 	.word	0x2000007c
 80009ac:	2000023c 	.word	0x2000023c

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b090      	sub	sp, #64	@ 0x40
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	2228      	movs	r2, #40	@ 0x28
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f003 fc1e 	bl	8004200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e0:	2301      	movs	r3, #1
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009ee:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80009f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0318 	add.w	r3, r7, #24
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fd71 	bl	80024e0 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a04:	f000 f99a 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2102      	movs	r1, #2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 ffde 	bl	80029e4 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a2e:	f000 f985 	bl	8000d3c <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3740      	adds	r7, #64	@ 0x40
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a42:	4b26      	ldr	r3, [pc, #152]	@ (8000adc <MX_CAN_Init+0xa0>)
 8000a44:	4a26      	ldr	r2, [pc, #152]	@ (8000ae0 <MX_CAN_Init+0xa4>)
 8000a46:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 20;
 8000a48:	4b24      	ldr	r3, [pc, #144]	@ (8000adc <MX_CAN_Init+0xa0>)
 8000a4a:	2214      	movs	r2, #20
 8000a4c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a4e:	4b23      	ldr	r3, [pc, #140]	@ (8000adc <MX_CAN_Init+0xa0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a54:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <MX_CAN_Init+0xa0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <MX_CAN_Init+0xa0>)
 8000a5c:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8000a60:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a62:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <MX_CAN_Init+0xa0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <MX_CAN_Init+0xa0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_CAN_Init+0xa0>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a74:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <MX_CAN_Init+0xa0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <MX_CAN_Init+0xa0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <MX_CAN_Init+0xa0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <MX_CAN_Init+0xa0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a8c:	4813      	ldr	r0, [pc, #76]	@ (8000adc <MX_CAN_Init+0xa0>)
 8000a8e:	f000 fb79 	bl	8001184 <HAL_CAN_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000a98:	f000 f950 	bl	8000d3c <Error_Handler>

  //create a CAN filter config typdef struct
  CAN_FilterTypeDef canfilterconfig;

  //Set the CAN filter typedef elements
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;	//Enable or Disable Filters
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;						//Specify which Filter bank to use
 8000aa0:	230a      	movs	r3, #10
 8000aa2:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x100<<5;
 8000aa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aac:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x100<<5;
 8000ab2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab6:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;				//Decides which bank belongs to slave CAN (useless as there is no CAN)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24

  //Call CAN Filter Configuration function
  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4803      	ldr	r0, [pc, #12]	@ (8000adc <MX_CAN_Init+0xa0>)
 8000ace:	f000 fc54 	bl	800137a <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	@ 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000007c 	.word	0x2000007c
 8000ae0:	40006400 	.word	0x40006400

08000ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	463b      	mov	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b00:	4b1e      	ldr	r3, [pc, #120]	@ (8000b7c <MX_TIM2_Init+0x98>)
 8000b02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <MX_TIM2_Init+0x98>)
 8000b0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <MX_TIM2_Init+0x98>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3600-1;
 8000b16:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <MX_TIM2_Init+0x98>)
 8000b18:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8000b1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <MX_TIM2_Init+0x98>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b24:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <MX_TIM2_Init+0x98>)
 8000b26:	2280      	movs	r2, #128	@ 0x80
 8000b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b2a:	4814      	ldr	r0, [pc, #80]	@ (8000b7c <MX_TIM2_Init+0x98>)
 8000b2c:	f002 f8e8 	bl	8002d00 <HAL_TIM_Base_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b36:	f000 f901 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	4619      	mov	r1, r3
 8000b46:	480d      	ldr	r0, [pc, #52]	@ (8000b7c <MX_TIM2_Init+0x98>)
 8000b48:	f002 fa7e 	bl	8003048 <HAL_TIM_ConfigClockSource>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b52:	f000 f8f3 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b5e:	463b      	mov	r3, r7
 8000b60:	4619      	mov	r1, r3
 8000b62:	4806      	ldr	r0, [pc, #24]	@ (8000b7c <MX_TIM2_Init+0x98>)
 8000b64:	f002 fc4a 	bl	80033fc <HAL_TIMEx_MasterConfigSynchronization>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b6e:	f000 f8e5 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200000a4 	.word	0x200000a4

08000b80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	@ (8000bd0 <MX_USART1_UART_Init+0x50>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000b8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_USART1_UART_Init+0x4c>)
 8000bb8:	f002 fc8a 	bl	80034d0 <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bc2:	f000 f8bb 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000ec 	.word	0x200000ec
 8000bd0:	40013800 	.word	0x40013800

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a1d      	ldr	r2, [pc, #116]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0310 	and.w	r3, r3, #16
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c00:	4b18      	ldr	r3, [pc, #96]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a17      	ldr	r2, [pc, #92]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000c06:	f043 0320 	orr.w	r3, r3, #32
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0320 	and.w	r3, r3, #32
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a11      	ldr	r2, [pc, #68]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c36:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <MX_GPIO_Init+0x94>)
 8000c38:	f001 fc20 	bl	800247c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	4619      	mov	r1, r3
 8000c54:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <MX_GPIO_Init+0x94>)
 8000c56:	f001 fa95 	bl	8002184 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3720      	adds	r7, #32
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40011000 	.word	0x40011000

08000c6c <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_SYSTICK_Callback(void) {

	timCount++;
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000c74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000c76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f000 fd59 	bl	8001732 <HAL_CAN_GetRxMessage>
	if(RxHeader.StdId == 0x132) {
 8000c80:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8000c88:	d109      	bne.n	8000c9e <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		memcpy(dataPrep, RxData, 8);
 8000c8a:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000c8c:	4a15      	ldr	r2, [pc, #84]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c92:	e883 0003 	stmia.w	r3, {r0, r1}
		CanMsgInFlag =SET;
 8000c96:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
	}




}
 8000c9c:	e01d      	b.n	8000cda <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	}else if(RxHeader.StdId == 0x171){
 8000c9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f240 1271 	movw	r2, #369	@ 0x171
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d109      	bne.n	8000cbe <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
		memcpy(dataBuff1, RxData, 8);
 8000caa:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cb2:	e883 0003 	stmia.w	r3, {r0, r1}
		CanDataFlag1 =SET;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
}
 8000cbc:	e00d      	b.n	8000cda <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
	}else if(RxHeader.StdId == 0x172){
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f5b3 7fb9 	cmp.w	r3, #370	@ 0x172
 8000cc6:	d108      	bne.n	8000cda <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
		memcpy(dataBuff2, RxData, 8);
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8000cca:	4a06      	ldr	r2, [pc, #24]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000ccc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd0:	e883 0003 	stmia.w	r3, {r0, r1}
		CanDataFlag2 =SET;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000194 	.word	0x20000194
 8000ce8:	2000016c 	.word	0x2000016c
 8000cec:	2000022c 	.word	0x2000022c
 8000cf0:	20000134 	.word	0x20000134
 8000cf4:	2000021c 	.word	0x2000021c
 8000cf8:	20000135 	.word	0x20000135
 8000cfc:	20000224 	.word	0x20000224
 8000d00:	20000136 	.word	0x20000136

08000d04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	usartDataInFlag = SET;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	@ (8000d1c <HAL_UART_RxCpltCallback+0x18>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]

}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000138 	.word	0x20000138

08000d20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	CanDataRqFlag = SET;
 8000d28:	4b03      	ldr	r3, [pc, #12]	@ (8000d38 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]

}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	20000137 	.word	0x20000137

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <Error_Handler+0x8>

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_MspInit+0x5c>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <HAL_MspInit+0x5c>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <HAL_MspInit+0x5c>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <HAL_MspInit+0x5c>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000da4 <HAL_MspInit+0x5c>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <HAL_MspInit+0x5c>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <HAL_MspInit+0x60>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <HAL_MspInit+0x60>)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010000 	.word	0x40010000

08000dac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a24      	ldr	r2, [pc, #144]	@ (8000e58 <HAL_CAN_MspInit+0xac>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d141      	bne.n	8000e50 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dcc:	4b23      	ldr	r3, [pc, #140]	@ (8000e5c <HAL_CAN_MspInit+0xb0>)
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	4a22      	ldr	r2, [pc, #136]	@ (8000e5c <HAL_CAN_MspInit+0xb0>)
 8000dd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dd6:	61d3      	str	r3, [r2, #28]
 8000dd8:	4b20      	ldr	r3, [pc, #128]	@ (8000e5c <HAL_CAN_MspInit+0xb0>)
 8000dda:	69db      	ldr	r3, [r3, #28]
 8000ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <HAL_CAN_MspInit+0xb0>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a1c      	ldr	r2, [pc, #112]	@ (8000e5c <HAL_CAN_MspInit+0xb0>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <HAL_CAN_MspInit+0xb0>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dfc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0310 	add.w	r3, r7, #16
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4813      	ldr	r0, [pc, #76]	@ (8000e60 <HAL_CAN_MspInit+0xb4>)
 8000e12:	f001 f9b7 	bl	8002184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480d      	ldr	r0, [pc, #52]	@ (8000e60 <HAL_CAN_MspInit+0xb4>)
 8000e2c:	f001 f9aa 	bl	8002184 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2014      	movs	r0, #20
 8000e36:	f001 f8bc 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000e3a:	2014      	movs	r0, #20
 8000e3c:	f001 f8d5 	bl	8001fea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	2015      	movs	r0, #21
 8000e46:	f001 f8b4 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e4a:	2015      	movs	r0, #21
 8000e4c:	f001 f8cd 	bl	8001fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40006400 	.word	0x40006400
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010800 	.word	0x40010800

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e74:	d113      	bne.n	8000e9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	201c      	movs	r0, #28
 8000e94:	f001 f88d 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e98:	201c      	movs	r0, #28
 8000e9a:	f001 f8a6 	bl	8001fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a20      	ldr	r2, [pc, #128]	@ (8000f48 <HAL_UART_MspInit+0x9c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d139      	bne.n	8000f40 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <HAL_UART_MspInit+0xa0>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8000f4c <HAL_UART_MspInit+0xa0>)
 8000ed2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <HAL_UART_MspInit+0xa0>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <HAL_UART_MspInit+0xa0>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a18      	ldr	r2, [pc, #96]	@ (8000f4c <HAL_UART_MspInit+0xa0>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <HAL_UART_MspInit+0xa0>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000efc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480f      	ldr	r0, [pc, #60]	@ (8000f50 <HAL_UART_MspInit+0xa4>)
 8000f12:	f001 f937 	bl	8002184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4809      	ldr	r0, [pc, #36]	@ (8000f50 <HAL_UART_MspInit+0xa4>)
 8000f2c:	f001 f92a 	bl	8002184 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2100      	movs	r1, #0
 8000f34:	2025      	movs	r0, #37	@ 0x25
 8000f36:	f001 f83c 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f3a:	2025      	movs	r0, #37	@ 0x25
 8000f3c:	f001 f855 	bl	8001fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010800 	.word	0x40010800

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <NMI_Handler+0x4>

08000f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f8d2 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000fb2:	f000 fd04 	bl	80019be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000007c 	.word	0x2000007c

08000fc0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <CAN1_RX1_IRQHandler+0x10>)
 8000fc6:	f000 fcfa 	bl	80019be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000007c 	.word	0x2000007c

08000fd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <TIM2_IRQHandler+0x10>)
 8000fda:	f001 ff2d 	bl	8002e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000a4 	.word	0x200000a4

08000fe8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <USART1_IRQHandler+0x10>)
 8000fee:	f002 fb67 	bl	80036c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000ec 	.word	0x200000ec

08000ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001004:	4a14      	ldr	r2, [pc, #80]	@ (8001058 <_sbrk+0x5c>)
 8001006:	4b15      	ldr	r3, [pc, #84]	@ (800105c <_sbrk+0x60>)
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001010:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001018:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <_sbrk+0x64>)
 800101a:	4a12      	ldr	r2, [pc, #72]	@ (8001064 <_sbrk+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	429a      	cmp	r2, r3
 800102a:	d207      	bcs.n	800103c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800102c:	f003 f8f0 	bl	8004210 <__errno>
 8001030:	4603      	mov	r3, r0
 8001032:	220c      	movs	r2, #12
 8001034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	e009      	b.n	8001050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800103c:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001042:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <_sbrk+0x64>)
 800104c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20002800 	.word	0x20002800
 800105c:	00000400 	.word	0x00000400
 8001060:	20000240 	.word	0x20000240
 8001064:	20000390 	.word	0x20000390

08001068 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	@ (80010ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	@ (80010b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800109a:	f7ff ffe5 	bl	8001068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109e:	f003 f8bd 	bl	800421c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010a2:	f7ff fa59 	bl	8000558 <main>
  bx lr
 80010a6:	4770      	bx	lr
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010b0:	08004be8 	.word	0x08004be8
  ldr r2, =_sbss
 80010b4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010b8:	20000390 	.word	0x20000390

080010bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_2_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <HAL_Init+0x28>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	@ (80010e8 <HAL_Init+0x28>)
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 ff63 	bl	8001f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	200f      	movs	r0, #15
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fe34 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40022000 	.word	0x40022000

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 ff7b 	bl	8002006 <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 ff43 	bl	8001fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	@ (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000004 	.word	0x20000004
 8001144:	2000000c 	.word	0x2000000c
 8001148:	20000008 	.word	0x20000008

0800114c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_IncTick+0x1c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b05      	ldr	r3, [pc, #20]	@ (800116c <HAL_IncTick+0x20>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a03      	ldr	r2, [pc, #12]	@ (800116c <HAL_IncTick+0x20>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	2000000c 	.word	0x2000000c
 800116c:	20000244 	.word	0x20000244

08001170 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b02      	ldr	r3, [pc, #8]	@ (8001180 <HAL_GetTick+0x10>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	20000244 	.word	0x20000244

08001184 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e0ed      	b.n	8001372 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d102      	bne.n	80011a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fe02 	bl	8000dac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0201 	orr.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011b8:	f7ff ffda 	bl	8001170 <HAL_GetTick>
 80011bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011be:	e012      	b.n	80011e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011c0:	f7ff ffd6 	bl	8001170 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b0a      	cmp	r3, #10
 80011cc:	d90b      	bls.n	80011e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2205      	movs	r2, #5
 80011de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e0c5      	b.n	8001372 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0e5      	beq.n	80011c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0202 	bic.w	r2, r2, #2
 8001202:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001204:	f7ff ffb4 	bl	8001170 <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800120a:	e012      	b.n	8001232 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800120c:	f7ff ffb0 	bl	8001170 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b0a      	cmp	r3, #10
 8001218:	d90b      	bls.n	8001232 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2205      	movs	r2, #5
 800122a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e09f      	b.n	8001372 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1e5      	bne.n	800120c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7e1b      	ldrb	r3, [r3, #24]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d108      	bne.n	800125a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	e007      	b.n	800126a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001268:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7e5b      	ldrb	r3, [r3, #25]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d108      	bne.n	8001284 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e007      	b.n	8001294 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001292:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7e9b      	ldrb	r3, [r3, #26]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d108      	bne.n	80012ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0220 	orr.w	r2, r2, #32
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e007      	b.n	80012be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0220 	bic.w	r2, r2, #32
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7edb      	ldrb	r3, [r3, #27]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d108      	bne.n	80012d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0210 	bic.w	r2, r2, #16
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	e007      	b.n	80012e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0210 	orr.w	r2, r2, #16
 80012e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7f1b      	ldrb	r3, [r3, #28]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d108      	bne.n	8001302 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0208 	orr.w	r2, r2, #8
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	e007      	b.n	8001312 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0208 	bic.w	r2, r2, #8
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7f5b      	ldrb	r3, [r3, #29]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d108      	bne.n	800132c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f042 0204 	orr.w	r2, r2, #4
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e007      	b.n	800133c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0204 	bic.w	r2, r2, #4
 800133a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	ea42 0103 	orr.w	r1, r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	1e5a      	subs	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800137a:	b480      	push	{r7}
 800137c:	b087      	sub	sp, #28
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001390:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001392:	7cfb      	ldrb	r3, [r7, #19]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d003      	beq.n	80013a0 <HAL_CAN_ConfigFilter+0x26>
 8001398:	7cfb      	ldrb	r3, [r7, #19]
 800139a:	2b02      	cmp	r3, #2
 800139c:	f040 80aa 	bne.w	80014f4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013a6:	f043 0201 	orr.w	r2, r3, #1
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	f003 031f 	and.w	r3, r3, #31
 80013b8:	2201      	movs	r2, #1
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d123      	bne.n	8001422 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	401a      	ands	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3248      	adds	r2, #72	@ 0x48
 8001402:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001416:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001418:	6979      	ldr	r1, [r7, #20]
 800141a:	3348      	adds	r3, #72	@ 0x48
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	440b      	add	r3, r1
 8001420:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d122      	bne.n	8001470 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	431a      	orrs	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800144a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3248      	adds	r2, #72	@ 0x48
 8001450:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001464:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001466:	6979      	ldr	r1, [r7, #20]
 8001468:	3348      	adds	r3, #72	@ 0x48
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d109      	bne.n	800148c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43db      	mvns	r3, r3
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800148a:	e007      	b.n	800149c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	431a      	orrs	r2, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d109      	bne.n	80014b8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80014b6:	e007      	b.n	80014c8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d107      	bne.n	80014e0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	431a      	orrs	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014e6:	f023 0201 	bic.w	r2, r3, #1
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e006      	b.n	8001502 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
  }
}
 8001502:	4618      	mov	r0, r3
 8001504:	371c      	adds	r7, #28
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3020 	ldrb.w	r3, [r3, #32]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b01      	cmp	r3, #1
 800151e:	d12e      	bne.n	800157e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2202      	movs	r2, #2
 8001524:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001538:	f7ff fe1a 	bl	8001170 <HAL_GetTick>
 800153c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800153e:	e012      	b.n	8001566 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001540:	f7ff fe16 	bl	8001170 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b0a      	cmp	r3, #10
 800154c:	d90b      	bls.n	8001566 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2205      	movs	r2, #5
 800155e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e012      	b.n	800158c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1e5      	bne.n	8001540 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e006      	b.n	800158c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
  }
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	@ 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015b2:	7ffb      	ldrb	r3, [r7, #31]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d003      	beq.n	80015c0 <HAL_CAN_AddTxMessage+0x2c>
 80015b8:	7ffb      	ldrb	r3, [r7, #31]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	f040 80ad 	bne.w	800171a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10a      	bne.n	80015e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d105      	bne.n	80015e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8095 	beq.w	800170a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	0e1b      	lsrs	r3, r3, #24
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015ea:	2201      	movs	r2, #1
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10d      	bne.n	8001618 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001606:	68f9      	ldr	r1, [r7, #12]
 8001608:	6809      	ldr	r1, [r1, #0]
 800160a:	431a      	orrs	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3318      	adds	r3, #24
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	440b      	add	r3, r1
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	e00f      	b.n	8001638 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001622:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001628:	68f9      	ldr	r1, [r7, #12]
 800162a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800162c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3318      	adds	r3, #24
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	440b      	add	r3, r1
 8001636:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6819      	ldr	r1, [r3, #0]
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3318      	adds	r3, #24
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	440b      	add	r3, r1
 8001648:	3304      	adds	r3, #4
 800164a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	7d1b      	ldrb	r3, [r3, #20]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d111      	bne.n	8001678 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3318      	adds	r3, #24
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	4413      	add	r3, r2
 8001660:	3304      	adds	r3, #4
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	6811      	ldr	r1, [r2, #0]
 8001668:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3318      	adds	r3, #24
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	440b      	add	r3, r1
 8001674:	3304      	adds	r3, #4
 8001676:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3307      	adds	r3, #7
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	061a      	lsls	r2, r3, #24
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3306      	adds	r3, #6
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3305      	adds	r3, #5
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	4313      	orrs	r3, r2
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	3204      	adds	r2, #4
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	4610      	mov	r0, r2
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	6811      	ldr	r1, [r2, #0]
 80016a0:	ea43 0200 	orr.w	r2, r3, r0
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	440b      	add	r3, r1
 80016aa:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80016ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3303      	adds	r3, #3
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	061a      	lsls	r2, r3, #24
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3302      	adds	r3, #2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3301      	adds	r3, #1
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	4313      	orrs	r3, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	7812      	ldrb	r2, [r2, #0]
 80016d0:	4610      	mov	r0, r2
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	6811      	ldr	r1, [r2, #0]
 80016d6:	ea43 0200 	orr.w	r2, r3, r0
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	440b      	add	r3, r1
 80016e0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80016e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3318      	adds	r3, #24
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	4413      	add	r3, r2
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	6811      	ldr	r1, [r2, #0]
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	3318      	adds	r3, #24
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	440b      	add	r3, r1
 8001704:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e00e      	b.n	8001728 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e006      	b.n	8001728 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
  }
}
 8001728:	4618      	mov	r0, r3
 800172a:	3724      	adds	r7, #36	@ 0x24
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001732:	b480      	push	{r7}
 8001734:	b087      	sub	sp, #28
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001746:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001748:	7dfb      	ldrb	r3, [r7, #23]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d003      	beq.n	8001756 <HAL_CAN_GetRxMessage+0x24>
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	2b02      	cmp	r3, #2
 8001752:	f040 8103 	bne.w	800195c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10e      	bne.n	800177a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d116      	bne.n	8001798 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0f7      	b.n	800196a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d107      	bne.n	8001798 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0e8      	b.n	800196a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	331b      	adds	r3, #27
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	4413      	add	r3, r2
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0204 	and.w	r2, r3, #4
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10c      	bne.n	80017d0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	331b      	adds	r3, #27
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	4413      	add	r3, r2
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	0d5b      	lsrs	r3, r3, #21
 80017c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e00b      	b.n	80017e8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	331b      	adds	r3, #27
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	4413      	add	r3, r2
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	08db      	lsrs	r3, r3, #3
 80017e0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	331b      	adds	r3, #27
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	4413      	add	r3, r2
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0202 	and.w	r2, r3, #2
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	331b      	adds	r3, #27
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	4413      	add	r3, r2
 800180a:	3304      	adds	r3, #4
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2208      	movs	r2, #8
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	e00b      	b.n	8001836 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	331b      	adds	r3, #27
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	4413      	add	r3, r2
 800182a:	3304      	adds	r3, #4
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 020f 	and.w	r2, r3, #15
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	331b      	adds	r3, #27
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	4413      	add	r3, r2
 8001842:	3304      	adds	r3, #4
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	b2da      	uxtb	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	331b      	adds	r3, #27
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	3304      	adds	r3, #4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	0c1b      	lsrs	r3, r3, #16
 8001860:	b29a      	uxth	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	4413      	add	r3, r2
 8001870:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	4413      	add	r3, r2
 8001886:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0a1a      	lsrs	r2, r3, #8
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	3301      	adds	r3, #1
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	4413      	add	r3, r2
 80018a0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	0c1a      	lsrs	r2, r3, #16
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	3302      	adds	r3, #2
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0e1a      	lsrs	r2, r3, #24
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	3303      	adds	r3, #3
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	3304      	adds	r3, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	0a1a      	lsrs	r2, r3, #8
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	3305      	adds	r3, #5
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	4413      	add	r3, r2
 8001906:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0c1a      	lsrs	r2, r3, #16
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	3306      	adds	r3, #6
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	4413      	add	r3, r2
 8001920:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	0e1a      	lsrs	r2, r3, #24
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	3307      	adds	r3, #7
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d108      	bne.n	8001948 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0220 	orr.w	r2, r2, #32
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	e007      	b.n	8001958 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0220 	orr.w	r2, r2, #32
 8001956:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	e006      	b.n	800196a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
  }
}
 800196a:	4618      	mov	r0, r3
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001984:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d002      	beq.n	8001992 <HAL_CAN_ActivateNotification+0x1e>
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d109      	bne.n	80019a6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6959      	ldr	r1, [r3, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e006      	b.n	80019b4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019aa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
  }
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b08a      	sub	sp, #40	@ 0x28
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d07c      	beq.n	8001afe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d023      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2201      	movs	r2, #1
 8001a14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f983 	bl	8001d2c <HAL_CAN_TxMailbox0CompleteCallback>
 8001a26:	e016      	b.n	8001a56 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d004      	beq.n	8001a3c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a3a:	e00c      	b.n	8001a56 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d004      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4e:	e002      	b.n	8001a56 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f986 	bl	8001d62 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d024      	beq.n	8001aaa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f962 	bl	8001d3e <HAL_CAN_TxMailbox1CompleteCallback>
 8001a7a:	e016      	b.n	8001aaa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d004      	beq.n	8001a90 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a8e:	e00c      	b.n	8001aaa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d004      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa2:	e002      	b.n	8001aaa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f965 	bl	8001d74 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d024      	beq.n	8001afe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001abc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f941 	bl	8001d50 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ace:	e016      	b.n	8001afe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae2:	e00c      	b.n	8001afe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d004      	beq.n	8001af8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af6:	e002      	b.n	8001afe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f944 	bl	8001d86 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00c      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2210      	movs	r2, #16
 8001b20:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00b      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f92a 	bl	8001d98 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff f885 	bl	8000c6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00c      	beq.n	8001b86 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2210      	movs	r2, #16
 8001b84:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	f003 0320 	and.w	r3, r3, #32
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00b      	beq.n	8001ba8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d006      	beq.n	8001ba8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2208      	movs	r2, #8
 8001ba0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f90a 	bl	8001dbc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d009      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f8f2 	bl	8001daa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00b      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d006      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2210      	movs	r2, #16
 8001be0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8f3 	bl	8001dce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00b      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2208      	movs	r2, #8
 8001c02:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f8eb 	bl	8001de0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d07b      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d072      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d043      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d03e      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c8c:	2b60      	cmp	r3, #96	@ 0x60
 8001c8e:	d02b      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0x32a>
 8001c90:	2b60      	cmp	r3, #96	@ 0x60
 8001c92:	d82e      	bhi.n	8001cf2 <HAL_CAN_IRQHandler+0x334>
 8001c94:	2b50      	cmp	r3, #80	@ 0x50
 8001c96:	d022      	beq.n	8001cde <HAL_CAN_IRQHandler+0x320>
 8001c98:	2b50      	cmp	r3, #80	@ 0x50
 8001c9a:	d82a      	bhi.n	8001cf2 <HAL_CAN_IRQHandler+0x334>
 8001c9c:	2b40      	cmp	r3, #64	@ 0x40
 8001c9e:	d019      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x316>
 8001ca0:	2b40      	cmp	r3, #64	@ 0x40
 8001ca2:	d826      	bhi.n	8001cf2 <HAL_CAN_IRQHandler+0x334>
 8001ca4:	2b30      	cmp	r3, #48	@ 0x30
 8001ca6:	d010      	beq.n	8001cca <HAL_CAN_IRQHandler+0x30c>
 8001ca8:	2b30      	cmp	r3, #48	@ 0x30
 8001caa:	d822      	bhi.n	8001cf2 <HAL_CAN_IRQHandler+0x334>
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d002      	beq.n	8001cb6 <HAL_CAN_IRQHandler+0x2f8>
 8001cb0:	2b20      	cmp	r3, #32
 8001cb2:	d005      	beq.n	8001cc0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cb4:	e01d      	b.n	8001cf2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cbe:	e019      	b.n	8001cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	f043 0310 	orr.w	r3, r3, #16
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cc8:	e014      	b.n	8001cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	f043 0320 	orr.w	r3, r3, #32
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cd2:	e00f      	b.n	8001cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cdc:	e00a      	b.n	8001cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ce6:	e005      	b.n	8001cf4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cf0:	e000      	b.n	8001cf4 <HAL_CAN_IRQHandler+0x336>
            break;
 8001cf2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001d02:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d008      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f867 	bl	8001df2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d24:	bf00      	nop
 8001d26:	3728      	adds	r7, #40	@ 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <__NVIC_SetPriorityGrouping>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e14:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_GetPriorityGrouping>:
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e50:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <__NVIC_GetPriorityGrouping+0x18>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0307 	and.w	r3, r3, #7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_EnableIRQ>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	db0b      	blt.n	8001e92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4906      	ldr	r1, [pc, #24]	@ (8001e9c <__NVIC_EnableIRQ+0x34>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2001      	movs	r0, #1
 8001e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	e000e100 	.word	0xe000e100

08001ea0 <__NVIC_SetPriority>:
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	db0a      	blt.n	8001eca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	490c      	ldr	r1, [pc, #48]	@ (8001eec <__NVIC_SetPriority+0x4c>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	0112      	lsls	r2, r2, #4
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ec8:	e00a      	b.n	8001ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4908      	ldr	r1, [pc, #32]	@ (8001ef0 <__NVIC_SetPriority+0x50>)
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	3b04      	subs	r3, #4
 8001ed8:	0112      	lsls	r2, r2, #4
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	440b      	add	r3, r1
 8001ede:	761a      	strb	r2, [r3, #24]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000e100 	.word	0xe000e100
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <NVIC_EncodePriority>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	@ 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f1c3 0307 	rsb	r3, r3, #7
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	bf28      	it	cs
 8001f12:	2304      	movcs	r3, #4
 8001f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d902      	bls.n	8001f24 <NVIC_EncodePriority+0x30>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3b03      	subs	r3, #3
 8001f22:	e000      	b.n	8001f26 <NVIC_EncodePriority+0x32>
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	401a      	ands	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	43d9      	mvns	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	4313      	orrs	r3, r2
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3724      	adds	r7, #36	@ 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f68:	d301      	bcc.n	8001f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00f      	b.n	8001f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f98 <SysTick_Config+0x40>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f76:	210f      	movs	r1, #15
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f7ff ff90 	bl	8001ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <SysTick_Config+0x40>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f86:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <SysTick_Config+0x40>)
 8001f88:	2207      	movs	r2, #7
 8001f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	e000e010 	.word	0xe000e010

08001f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff2d 	bl	8001e04 <__NVIC_SetPriorityGrouping>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b086      	sub	sp, #24
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc4:	f7ff ff42 	bl	8001e4c <__NVIC_GetPriorityGrouping>
 8001fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	6978      	ldr	r0, [r7, #20]
 8001fd0:	f7ff ff90 	bl	8001ef4 <NVIC_EncodePriority>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff5f 	bl	8001ea0 <__NVIC_SetPriority>
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff35 	bl	8001e68 <__NVIC_EnableIRQ>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ffa2 	bl	8001f58 <SysTick_Config>
 8002014:	4603      	mov	r3, r0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800201e:	b480      	push	{r7}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d008      	beq.n	8002048 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2204      	movs	r2, #4
 800203a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e020      	b.n	800208a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 020e 	bic.w	r2, r2, #14
 8002056:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002070:	2101      	movs	r1, #1
 8002072:	fa01 f202 	lsl.w	r2, r1, r2
 8002076:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002088:	7bfb      	ldrb	r3, [r7, #15]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d005      	beq.n	80020b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2204      	movs	r2, #4
 80020b0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	e051      	b.n	800215c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 020e 	bic.w	r2, r2, #14
 80020c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a22      	ldr	r2, [pc, #136]	@ (8002168 <HAL_DMA_Abort_IT+0xd4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d029      	beq.n	8002136 <HAL_DMA_Abort_IT+0xa2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a21      	ldr	r2, [pc, #132]	@ (800216c <HAL_DMA_Abort_IT+0xd8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d022      	beq.n	8002132 <HAL_DMA_Abort_IT+0x9e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002170 <HAL_DMA_Abort_IT+0xdc>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01a      	beq.n	800212c <HAL_DMA_Abort_IT+0x98>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002174 <HAL_DMA_Abort_IT+0xe0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d012      	beq.n	8002126 <HAL_DMA_Abort_IT+0x92>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1c      	ldr	r2, [pc, #112]	@ (8002178 <HAL_DMA_Abort_IT+0xe4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00a      	beq.n	8002120 <HAL_DMA_Abort_IT+0x8c>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1b      	ldr	r2, [pc, #108]	@ (800217c <HAL_DMA_Abort_IT+0xe8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d102      	bne.n	800211a <HAL_DMA_Abort_IT+0x86>
 8002114:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002118:	e00e      	b.n	8002138 <HAL_DMA_Abort_IT+0xa4>
 800211a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800211e:	e00b      	b.n	8002138 <HAL_DMA_Abort_IT+0xa4>
 8002120:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002124:	e008      	b.n	8002138 <HAL_DMA_Abort_IT+0xa4>
 8002126:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800212a:	e005      	b.n	8002138 <HAL_DMA_Abort_IT+0xa4>
 800212c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002130:	e002      	b.n	8002138 <HAL_DMA_Abort_IT+0xa4>
 8002132:	2310      	movs	r3, #16
 8002134:	e000      	b.n	8002138 <HAL_DMA_Abort_IT+0xa4>
 8002136:	2301      	movs	r3, #1
 8002138:	4a11      	ldr	r2, [pc, #68]	@ (8002180 <HAL_DMA_Abort_IT+0xec>)
 800213a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
    } 
  }
  return status;
 800215c:	7bfb      	ldrb	r3, [r7, #15]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40020008 	.word	0x40020008
 800216c:	4002001c 	.word	0x4002001c
 8002170:	40020030 	.word	0x40020030
 8002174:	40020044 	.word	0x40020044
 8002178:	40020058 	.word	0x40020058
 800217c:	4002006c 	.word	0x4002006c
 8002180:	40020000 	.word	0x40020000

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b08b      	sub	sp, #44	@ 0x2c
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002196:	e161      	b.n	800245c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002198:	2201      	movs	r2, #1
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	f040 8150 	bne.w	8002456 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4a97      	ldr	r2, [pc, #604]	@ (8002418 <HAL_GPIO_Init+0x294>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d05e      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021c0:	4a95      	ldr	r2, [pc, #596]	@ (8002418 <HAL_GPIO_Init+0x294>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d875      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021c6:	4a95      	ldr	r2, [pc, #596]	@ (800241c <HAL_GPIO_Init+0x298>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d058      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021cc:	4a93      	ldr	r2, [pc, #588]	@ (800241c <HAL_GPIO_Init+0x298>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d86f      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021d2:	4a93      	ldr	r2, [pc, #588]	@ (8002420 <HAL_GPIO_Init+0x29c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d052      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021d8:	4a91      	ldr	r2, [pc, #580]	@ (8002420 <HAL_GPIO_Init+0x29c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d869      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021de:	4a91      	ldr	r2, [pc, #580]	@ (8002424 <HAL_GPIO_Init+0x2a0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d04c      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021e4:	4a8f      	ldr	r2, [pc, #572]	@ (8002424 <HAL_GPIO_Init+0x2a0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d863      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021ea:	4a8f      	ldr	r2, [pc, #572]	@ (8002428 <HAL_GPIO_Init+0x2a4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d046      	beq.n	800227e <HAL_GPIO_Init+0xfa>
 80021f0:	4a8d      	ldr	r2, [pc, #564]	@ (8002428 <HAL_GPIO_Init+0x2a4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d85d      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021f6:	2b12      	cmp	r3, #18
 80021f8:	d82a      	bhi.n	8002250 <HAL_GPIO_Init+0xcc>
 80021fa:	2b12      	cmp	r3, #18
 80021fc:	d859      	bhi.n	80022b2 <HAL_GPIO_Init+0x12e>
 80021fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002204 <HAL_GPIO_Init+0x80>)
 8002200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002204:	0800227f 	.word	0x0800227f
 8002208:	08002259 	.word	0x08002259
 800220c:	0800226b 	.word	0x0800226b
 8002210:	080022ad 	.word	0x080022ad
 8002214:	080022b3 	.word	0x080022b3
 8002218:	080022b3 	.word	0x080022b3
 800221c:	080022b3 	.word	0x080022b3
 8002220:	080022b3 	.word	0x080022b3
 8002224:	080022b3 	.word	0x080022b3
 8002228:	080022b3 	.word	0x080022b3
 800222c:	080022b3 	.word	0x080022b3
 8002230:	080022b3 	.word	0x080022b3
 8002234:	080022b3 	.word	0x080022b3
 8002238:	080022b3 	.word	0x080022b3
 800223c:	080022b3 	.word	0x080022b3
 8002240:	080022b3 	.word	0x080022b3
 8002244:	080022b3 	.word	0x080022b3
 8002248:	08002261 	.word	0x08002261
 800224c:	08002275 	.word	0x08002275
 8002250:	4a76      	ldr	r2, [pc, #472]	@ (800242c <HAL_GPIO_Init+0x2a8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002256:	e02c      	b.n	80022b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	623b      	str	r3, [r7, #32]
          break;
 800225e:	e029      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	3304      	adds	r3, #4
 8002266:	623b      	str	r3, [r7, #32]
          break;
 8002268:	e024      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	3308      	adds	r3, #8
 8002270:	623b      	str	r3, [r7, #32]
          break;
 8002272:	e01f      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	330c      	adds	r3, #12
 800227a:	623b      	str	r3, [r7, #32]
          break;
 800227c:	e01a      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002286:	2304      	movs	r3, #4
 8002288:	623b      	str	r3, [r7, #32]
          break;
 800228a:	e013      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002294:	2308      	movs	r3, #8
 8002296:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	611a      	str	r2, [r3, #16]
          break;
 800229e:	e009      	b.n	80022b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a0:	2308      	movs	r3, #8
 80022a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	615a      	str	r2, [r3, #20]
          break;
 80022aa:	e003      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
          break;
 80022b0:	e000      	b.n	80022b4 <HAL_GPIO_Init+0x130>
          break;
 80022b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2bff      	cmp	r3, #255	@ 0xff
 80022b8:	d801      	bhi.n	80022be <HAL_GPIO_Init+0x13a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	e001      	b.n	80022c2 <HAL_GPIO_Init+0x13e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3304      	adds	r3, #4
 80022c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2bff      	cmp	r3, #255	@ 0xff
 80022c8:	d802      	bhi.n	80022d0 <HAL_GPIO_Init+0x14c>
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	e002      	b.n	80022d6 <HAL_GPIO_Init+0x152>
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	3b08      	subs	r3, #8
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	210f      	movs	r1, #15
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	401a      	ands	r2, r3
 80022e8:	6a39      	ldr	r1, [r7, #32]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	431a      	orrs	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80a9 	beq.w	8002456 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002304:	4b4a      	ldr	r3, [pc, #296]	@ (8002430 <HAL_GPIO_Init+0x2ac>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4a49      	ldr	r2, [pc, #292]	@ (8002430 <HAL_GPIO_Init+0x2ac>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6193      	str	r3, [r2, #24]
 8002310:	4b47      	ldr	r3, [pc, #284]	@ (8002430 <HAL_GPIO_Init+0x2ac>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800231c:	4a45      	ldr	r2, [pc, #276]	@ (8002434 <HAL_GPIO_Init+0x2b0>)
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3302      	adds	r3, #2
 8002324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002328:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4013      	ands	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a3d      	ldr	r2, [pc, #244]	@ (8002438 <HAL_GPIO_Init+0x2b4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00d      	beq.n	8002364 <HAL_GPIO_Init+0x1e0>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a3c      	ldr	r2, [pc, #240]	@ (800243c <HAL_GPIO_Init+0x2b8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d007      	beq.n	8002360 <HAL_GPIO_Init+0x1dc>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3b      	ldr	r2, [pc, #236]	@ (8002440 <HAL_GPIO_Init+0x2bc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_GPIO_Init+0x1d8>
 8002358:	2302      	movs	r3, #2
 800235a:	e004      	b.n	8002366 <HAL_GPIO_Init+0x1e2>
 800235c:	2303      	movs	r3, #3
 800235e:	e002      	b.n	8002366 <HAL_GPIO_Init+0x1e2>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_GPIO_Init+0x1e2>
 8002364:	2300      	movs	r3, #0
 8002366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002368:	f002 0203 	and.w	r2, r2, #3
 800236c:	0092      	lsls	r2, r2, #2
 800236e:	4093      	lsls	r3, r2
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002376:	492f      	ldr	r1, [pc, #188]	@ (8002434 <HAL_GPIO_Init+0x2b0>)
 8002378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002390:	4b2c      	ldr	r3, [pc, #176]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	492b      	ldr	r1, [pc, #172]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]
 800239c:	e006      	b.n	80023ac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800239e:	4b29      	ldr	r3, [pc, #164]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	4927      	ldr	r1, [pc, #156]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d006      	beq.n	80023c6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023b8:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	4921      	ldr	r1, [pc, #132]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60cb      	str	r3, [r1, #12]
 80023c4:	e006      	b.n	80023d4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	491d      	ldr	r1, [pc, #116]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023e0:	4b18      	ldr	r3, [pc, #96]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	4917      	ldr	r1, [pc, #92]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ee:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	4913      	ldr	r1, [pc, #76]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01f      	beq.n	8002448 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002408:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	490d      	ldr	r1, [pc, #52]	@ (8002444 <HAL_GPIO_Init+0x2c0>)
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
 8002414:	e01f      	b.n	8002456 <HAL_GPIO_Init+0x2d2>
 8002416:	bf00      	nop
 8002418:	10320000 	.word	0x10320000
 800241c:	10310000 	.word	0x10310000
 8002420:	10220000 	.word	0x10220000
 8002424:	10210000 	.word	0x10210000
 8002428:	10120000 	.word	0x10120000
 800242c:	10110000 	.word	0x10110000
 8002430:	40021000 	.word	0x40021000
 8002434:	40010000 	.word	0x40010000
 8002438:	40010800 	.word	0x40010800
 800243c:	40010c00 	.word	0x40010c00
 8002440:	40011000 	.word	0x40011000
 8002444:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002448:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <HAL_GPIO_Init+0x2f4>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	43db      	mvns	r3, r3
 8002450:	4909      	ldr	r1, [pc, #36]	@ (8002478 <HAL_GPIO_Init+0x2f4>)
 8002452:	4013      	ands	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	3301      	adds	r3, #1
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	f47f ae96 	bne.w	8002198 <HAL_GPIO_Init+0x14>
  }
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	372c      	adds	r7, #44	@ 0x2c
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	40010400 	.word	0x40010400

0800247c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
 8002488:	4613      	mov	r3, r2
 800248a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800248c:	787b      	ldrb	r3, [r7, #1]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002498:	e003      	b.n	80024a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800249a:	887b      	ldrh	r3, [r7, #2]
 800249c:	041a      	lsls	r2, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	611a      	str	r2, [r3, #16]
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024be:	887a      	ldrh	r2, [r7, #2]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4013      	ands	r3, r2
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43d9      	mvns	r1, r3
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	400b      	ands	r3, r1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	611a      	str	r2, [r3, #16]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e272      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8087 	beq.w	800260e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002500:	4b92      	ldr	r3, [pc, #584]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b04      	cmp	r3, #4
 800250a:	d00c      	beq.n	8002526 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800250c:	4b8f      	ldr	r3, [pc, #572]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b08      	cmp	r3, #8
 8002516:	d112      	bne.n	800253e <HAL_RCC_OscConfig+0x5e>
 8002518:	4b8c      	ldr	r3, [pc, #560]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002524:	d10b      	bne.n	800253e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002526:	4b89      	ldr	r3, [pc, #548]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d06c      	beq.n	800260c <HAL_RCC_OscConfig+0x12c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d168      	bne.n	800260c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e24c      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x76>
 8002548:	4b80      	ldr	r3, [pc, #512]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a7f      	ldr	r2, [pc, #508]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e02e      	b.n	80025b4 <HAL_RCC_OscConfig+0xd4>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x98>
 800255e:	4b7b      	ldr	r3, [pc, #492]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a7a      	ldr	r2, [pc, #488]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b78      	ldr	r3, [pc, #480]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a77      	ldr	r2, [pc, #476]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002570:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e01d      	b.n	80025b4 <HAL_RCC_OscConfig+0xd4>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0xbc>
 8002582:	4b72      	ldr	r3, [pc, #456]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a71      	ldr	r2, [pc, #452]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b6f      	ldr	r3, [pc, #444]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a6e      	ldr	r2, [pc, #440]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0xd4>
 800259c:	4b6b      	ldr	r3, [pc, #428]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a6a      	ldr	r2, [pc, #424]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b68      	ldr	r3, [pc, #416]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a67      	ldr	r2, [pc, #412]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80025ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fdd8 	bl	8001170 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fdd4 	bl	8001170 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e200      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b5d      	ldr	r3, [pc, #372]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0xe4>
 80025e2:	e014      	b.n	800260e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fdc4 	bl	8001170 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fdc0 	bl	8001170 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	@ 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e1ec      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	4b53      	ldr	r3, [pc, #332]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x10c>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d063      	beq.n	80026e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800261a:	4b4c      	ldr	r3, [pc, #304]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002626:	4b49      	ldr	r3, [pc, #292]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b08      	cmp	r3, #8
 8002630:	d11c      	bne.n	800266c <HAL_RCC_OscConfig+0x18c>
 8002632:	4b46      	ldr	r3, [pc, #280]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d116      	bne.n	800266c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	4b43      	ldr	r3, [pc, #268]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x176>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e1c0      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002656:	4b3d      	ldr	r3, [pc, #244]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4939      	ldr	r1, [pc, #228]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	e03a      	b.n	80026e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002674:	4b36      	ldr	r3, [pc, #216]	@ (8002750 <HAL_RCC_OscConfig+0x270>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267a:	f7fe fd79 	bl	8001170 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002682:	f7fe fd75 	bl	8001170 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e1a1      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	4b2d      	ldr	r3, [pc, #180]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4b2a      	ldr	r3, [pc, #168]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4927      	ldr	r1, [pc, #156]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
 80026b4:	e015      	b.n	80026e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b6:	4b26      	ldr	r3, [pc, #152]	@ (8002750 <HAL_RCC_OscConfig+0x270>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe fd58 	bl	8001170 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c4:	f7fe fd54 	bl	8001170 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e180      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d03a      	beq.n	8002764 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d019      	beq.n	800272a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f6:	4b17      	ldr	r3, [pc, #92]	@ (8002754 <HAL_RCC_OscConfig+0x274>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fc:	f7fe fd38 	bl	8001170 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002704:	f7fe fd34 	bl	8001170 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e160      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <HAL_RCC_OscConfig+0x26c>)
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002722:	2001      	movs	r0, #1
 8002724:	f000 face 	bl	8002cc4 <RCC_Delay>
 8002728:	e01c      	b.n	8002764 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272a:	4b0a      	ldr	r3, [pc, #40]	@ (8002754 <HAL_RCC_OscConfig+0x274>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002730:	f7fe fd1e 	bl	8001170 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002736:	e00f      	b.n	8002758 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002738:	f7fe fd1a 	bl	8001170 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d908      	bls.n	8002758 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e146      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	42420000 	.word	0x42420000
 8002754:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002758:	4b92      	ldr	r3, [pc, #584]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e9      	bne.n	8002738 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80a6 	beq.w	80028be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b8b      	ldr	r3, [pc, #556]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10d      	bne.n	800279e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	4b88      	ldr	r3, [pc, #544]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4a87      	ldr	r2, [pc, #540]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800278c:	61d3      	str	r3, [r2, #28]
 800278e:	4b85      	ldr	r3, [pc, #532]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279a:	2301      	movs	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279e:	4b82      	ldr	r3, [pc, #520]	@ (80029a8 <HAL_RCC_OscConfig+0x4c8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d118      	bne.n	80027dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027aa:	4b7f      	ldr	r3, [pc, #508]	@ (80029a8 <HAL_RCC_OscConfig+0x4c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7e      	ldr	r2, [pc, #504]	@ (80029a8 <HAL_RCC_OscConfig+0x4c8>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b6:	f7fe fcdb 	bl	8001170 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027be:	f7fe fcd7 	bl	8001170 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	@ 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e103      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	4b75      	ldr	r3, [pc, #468]	@ (80029a8 <HAL_RCC_OscConfig+0x4c8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x312>
 80027e4:	4b6f      	ldr	r3, [pc, #444]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a6e      	ldr	r2, [pc, #440]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6213      	str	r3, [r2, #32]
 80027f0:	e02d      	b.n	800284e <HAL_RCC_OscConfig+0x36e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x334>
 80027fa:	4b6a      	ldr	r3, [pc, #424]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a69      	ldr	r2, [pc, #420]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6213      	str	r3, [r2, #32]
 8002806:	4b67      	ldr	r3, [pc, #412]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4a66      	ldr	r2, [pc, #408]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	f023 0304 	bic.w	r3, r3, #4
 8002810:	6213      	str	r3, [r2, #32]
 8002812:	e01c      	b.n	800284e <HAL_RCC_OscConfig+0x36e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b05      	cmp	r3, #5
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0x356>
 800281c:	4b61      	ldr	r3, [pc, #388]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4a60      	ldr	r2, [pc, #384]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	6213      	str	r3, [r2, #32]
 8002828:	4b5e      	ldr	r3, [pc, #376]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	4a5d      	ldr	r2, [pc, #372]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6213      	str	r3, [r2, #32]
 8002834:	e00b      	b.n	800284e <HAL_RCC_OscConfig+0x36e>
 8002836:	4b5b      	ldr	r3, [pc, #364]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4a5a      	ldr	r2, [pc, #360]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	6213      	str	r3, [r2, #32]
 8002842:	4b58      	ldr	r3, [pc, #352]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4a57      	ldr	r2, [pc, #348]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f023 0304 	bic.w	r3, r3, #4
 800284c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d015      	beq.n	8002882 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002856:	f7fe fc8b 	bl	8001170 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7fe fc87 	bl	8001170 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0b1      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	4b4b      	ldr	r3, [pc, #300]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ee      	beq.n	800285e <HAL_RCC_OscConfig+0x37e>
 8002880:	e014      	b.n	80028ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe fc75 	bl	8001170 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7fe fc71 	bl	8001170 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e09b      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	4b40      	ldr	r3, [pc, #256]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ee      	bne.n	800288a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d105      	bne.n	80028be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4b3c      	ldr	r3, [pc, #240]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4a3b      	ldr	r2, [pc, #236]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8087 	beq.w	80029d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c8:	4b36      	ldr	r3, [pc, #216]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d061      	beq.n	8002998 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d146      	bne.n	800296a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028dc:	4b33      	ldr	r3, [pc, #204]	@ (80029ac <HAL_RCC_OscConfig+0x4cc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe fc45 	bl	8001170 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe fc41 	bl	8001170 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e06d      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fc:	4b29      	ldr	r3, [pc, #164]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002910:	d108      	bne.n	8002924 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002912:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4921      	ldr	r1, [pc, #132]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002924:	4b1f      	ldr	r3, [pc, #124]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a19      	ldr	r1, [r3, #32]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	430b      	orrs	r3, r1
 8002936:	491b      	ldr	r1, [pc, #108]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800293c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x4cc>)
 800293e:	2201      	movs	r2, #1
 8002940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7fe fc15 	bl	8001170 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294a:	f7fe fc11 	bl	8001170 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e03d      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800295c:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x46a>
 8002968:	e035      	b.n	80029d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <HAL_RCC_OscConfig+0x4cc>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe fbfe 	bl	8001170 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe fbfa 	bl	8001170 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e026      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x498>
 8002996:	e01e      	b.n	80029d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e019      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40007000 	.word	0x40007000
 80029ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029b0:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <HAL_RCC_OscConfig+0x500>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000

080029e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0d0      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f8:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d910      	bls.n	8002a28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b67      	ldr	r3, [pc, #412]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 0207 	bic.w	r2, r3, #7
 8002a0e:	4965      	ldr	r1, [pc, #404]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b63      	ldr	r3, [pc, #396]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0b8      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a40:	4b59      	ldr	r3, [pc, #356]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a58      	ldr	r2, [pc, #352]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a58:	4b53      	ldr	r3, [pc, #332]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a52      	ldr	r2, [pc, #328]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a64:	4b50      	ldr	r3, [pc, #320]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	494d      	ldr	r1, [pc, #308]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d040      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d115      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e07f      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa2:	4b41      	ldr	r3, [pc, #260]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e073      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e06b      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac2:	4b39      	ldr	r3, [pc, #228]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4936      	ldr	r1, [pc, #216]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad4:	f7fe fb4c 	bl	8001170 <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002adc:	f7fe fb48 	bl	8001170 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e053      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 020c 	and.w	r2, r3, #12
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d1eb      	bne.n	8002adc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b04:	4b27      	ldr	r3, [pc, #156]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d210      	bcs.n	8002b34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 0207 	bic.w	r2, r3, #7
 8002b1a:	4922      	ldr	r1, [pc, #136]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b20      	ldr	r3, [pc, #128]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e032      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b40:	4b19      	ldr	r3, [pc, #100]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4916      	ldr	r1, [pc, #88]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	490e      	ldr	r1, [pc, #56]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b72:	f000 f821 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002b76:	4602      	mov	r2, r0
 8002b78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	490a      	ldr	r1, [pc, #40]	@ (8002bac <HAL_RCC_ClockConfig+0x1c8>)
 8002b84:	5ccb      	ldrb	r3, [r1, r3]
 8002b86:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8a:	4a09      	ldr	r2, [pc, #36]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b8e:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1d0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe faaa 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40022000 	.word	0x40022000
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	08004b78 	.word	0x08004b78
 8002bb0:	20000004 	.word	0x20000004
 8002bb4:	20000008 	.word	0x20000008

08002bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	d002      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x30>
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d003      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x36>
 8002be6:	e027      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002be8:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bea:	613b      	str	r3, [r7, #16]
      break;
 8002bec:	e027      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	0c9b      	lsrs	r3, r3, #18
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	4a17      	ldr	r2, [pc, #92]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bf8:	5cd3      	ldrb	r3, [r2, r3]
 8002bfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d010      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c06:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0c5b      	lsrs	r3, r3, #17
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	4a11      	ldr	r2, [pc, #68]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c12:	5cd3      	ldrb	r3, [r2, r3]
 8002c14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a0d      	ldr	r2, [pc, #52]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c1a:	fb03 f202 	mul.w	r2, r3, r2
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	e004      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c2c:	fb02 f303 	mul.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	613b      	str	r3, [r7, #16]
      break;
 8002c36:	e002      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c38:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c3a:	613b      	str	r3, [r7, #16]
      break;
 8002c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3e:	693b      	ldr	r3, [r7, #16]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	007a1200 	.word	0x007a1200
 8002c54:	08004b90 	.word	0x08004b90
 8002c58:	08004ba0 	.word	0x08004ba0
 8002c5c:	003d0900 	.word	0x003d0900

08002c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c64:	4b02      	ldr	r3, [pc, #8]	@ (8002c70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	20000004 	.word	0x20000004

08002c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c78:	f7ff fff2 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b05      	ldr	r3, [pc, #20]	@ (8002c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	4903      	ldr	r1, [pc, #12]	@ (8002c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c8a:	5ccb      	ldrb	r3, [r1, r3]
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08004b88 	.word	0x08004b88

08002c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca0:	f7ff ffde 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b05      	ldr	r3, [pc, #20]	@ (8002cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	0adb      	lsrs	r3, r3, #11
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4903      	ldr	r1, [pc, #12]	@ (8002cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	08004b88 	.word	0x08004b88

08002cc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <RCC_Delay+0x34>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cfc <RCC_Delay+0x38>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	0a5b      	lsrs	r3, r3, #9
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ce0:	bf00      	nop
  }
  while (Delay --);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1e5a      	subs	r2, r3, #1
 8002ce6:	60fa      	str	r2, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f9      	bne.n	8002ce0 <RCC_Delay+0x1c>
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	20000004 	.word	0x20000004
 8002cfc:	10624dd3 	.word	0x10624dd3

08002d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e041      	b.n	8002d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe f89c 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4610      	mov	r0, r2
 8002d40:	f000 fa6e 	bl	8003220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d001      	beq.n	8002db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e035      	b.n	8002e24 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a16      	ldr	r2, [pc, #88]	@ (8002e30 <HAL_TIM_Base_Start_IT+0x90>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d009      	beq.n	8002dee <HAL_TIM_Base_Start_IT+0x4e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002de2:	d004      	beq.n	8002dee <HAL_TIM_Base_Start_IT+0x4e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a12      	ldr	r2, [pc, #72]	@ (8002e34 <HAL_TIM_Base_Start_IT+0x94>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d111      	bne.n	8002e12 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b06      	cmp	r3, #6
 8002dfe:	d010      	beq.n	8002e22 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e10:	e007      	b.n	8002e22 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0201 	orr.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40000400 	.word	0x40000400

08002e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d122      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d11b      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0202 	mvn.w	r2, #2
 8002e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f9b4 	bl	80031e8 <HAL_TIM_IC_CaptureCallback>
 8002e80:	e005      	b.n	8002e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f9a7 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f9b6 	bl	80031fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d122      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d11b      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f06f 0204 	mvn.w	r2, #4
 8002eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f98a 	bl	80031e8 <HAL_TIM_IC_CaptureCallback>
 8002ed4:	e005      	b.n	8002ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f97d 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f98c 	bl	80031fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d122      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d11b      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0208 	mvn.w	r2, #8
 8002f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2204      	movs	r2, #4
 8002f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f960 	bl	80031e8 <HAL_TIM_IC_CaptureCallback>
 8002f28:	e005      	b.n	8002f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f953 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f962 	bl	80031fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d122      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d11b      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0210 	mvn.w	r2, #16
 8002f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2208      	movs	r2, #8
 8002f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f936 	bl	80031e8 <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e005      	b.n	8002f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f929 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f938 	bl	80031fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d10e      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0201 	mvn.w	r2, #1
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fd feb2 	bl	8000d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc6:	2b80      	cmp	r3, #128	@ 0x80
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd4:	2b80      	cmp	r3, #128	@ 0x80
 8002fd6:	d107      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fa6b 	bl	80034be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff2:	2b40      	cmp	r3, #64	@ 0x40
 8002ff4:	d10e      	bne.n	8003014 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003000:	2b40      	cmp	r3, #64	@ 0x40
 8003002:	d107      	bne.n	8003014 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800300c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f8fc 	bl	800320c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b20      	cmp	r3, #32
 8003020:	d10e      	bne.n	8003040 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b20      	cmp	r3, #32
 800302e:	d107      	bne.n	8003040 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0220 	mvn.w	r2, #32
 8003038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fa36 	bl	80034ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_TIM_ConfigClockSource+0x1c>
 8003060:	2302      	movs	r3, #2
 8003062:	e0b4      	b.n	80031ce <HAL_TIM_ConfigClockSource+0x186>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800308a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800309c:	d03e      	beq.n	800311c <HAL_TIM_ConfigClockSource+0xd4>
 800309e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030a2:	f200 8087 	bhi.w	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030aa:	f000 8086 	beq.w	80031ba <HAL_TIM_ConfigClockSource+0x172>
 80030ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b2:	d87f      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030b4:	2b70      	cmp	r3, #112	@ 0x70
 80030b6:	d01a      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0xa6>
 80030b8:	2b70      	cmp	r3, #112	@ 0x70
 80030ba:	d87b      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030bc:	2b60      	cmp	r3, #96	@ 0x60
 80030be:	d050      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x11a>
 80030c0:	2b60      	cmp	r3, #96	@ 0x60
 80030c2:	d877      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030c4:	2b50      	cmp	r3, #80	@ 0x50
 80030c6:	d03c      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0xfa>
 80030c8:	2b50      	cmp	r3, #80	@ 0x50
 80030ca:	d873      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030cc:	2b40      	cmp	r3, #64	@ 0x40
 80030ce:	d058      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x13a>
 80030d0:	2b40      	cmp	r3, #64	@ 0x40
 80030d2:	d86f      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030d4:	2b30      	cmp	r3, #48	@ 0x30
 80030d6:	d064      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x15a>
 80030d8:	2b30      	cmp	r3, #48	@ 0x30
 80030da:	d86b      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d060      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x15a>
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d867      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d05c      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x15a>
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d05a      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x15a>
 80030ec:	e062      	b.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030fe:	f000 f95e 	bl	80033be <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	609a      	str	r2, [r3, #8]
      break;
 800311a:	e04f      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800312c:	f000 f947 	bl	80033be <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800313e:	609a      	str	r2, [r3, #8]
      break;
 8003140:	e03c      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800314e:	461a      	mov	r2, r3
 8003150:	f000 f8be 	bl	80032d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2150      	movs	r1, #80	@ 0x50
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f915 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 8003160:	e02c      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800316e:	461a      	mov	r2, r3
 8003170:	f000 f8dc 	bl	800332c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2160      	movs	r1, #96	@ 0x60
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f905 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 8003180:	e01c      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800318e:	461a      	mov	r2, r3
 8003190:	f000 f89e 	bl	80032d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2140      	movs	r1, #64	@ 0x40
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f8f5 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 80031a0:	e00c      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4619      	mov	r1, r3
 80031ac:	4610      	mov	r0, r2
 80031ae:	f000 f8ec 	bl	800338a <TIM_ITRx_SetConfig>
      break;
 80031b2:	e003      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
      break;
 80031b8:	e000      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
	...

08003220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a25      	ldr	r2, [pc, #148]	@ (80032c8 <TIM_Base_SetConfig+0xa8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <TIM_Base_SetConfig+0x28>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323e:	d003      	beq.n	8003248 <TIM_Base_SetConfig+0x28>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a22      	ldr	r2, [pc, #136]	@ (80032cc <TIM_Base_SetConfig+0xac>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d108      	bne.n	800325a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800324e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1a      	ldr	r2, [pc, #104]	@ (80032c8 <TIM_Base_SetConfig+0xa8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <TIM_Base_SetConfig+0x52>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003268:	d003      	beq.n	8003272 <TIM_Base_SetConfig+0x52>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a17      	ldr	r2, [pc, #92]	@ (80032cc <TIM_Base_SetConfig+0xac>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d108      	bne.n	8003284 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a07      	ldr	r2, [pc, #28]	@ (80032c8 <TIM_Base_SetConfig+0xa8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d103      	bne.n	80032b8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	615a      	str	r2, [r3, #20]
}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40000400 	.word	0x40000400

080032d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	f023 0201 	bic.w	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f023 030a 	bic.w	r3, r3, #10
 800330c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f023 0210 	bic.w	r2, r3, #16
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	031b      	lsls	r3, r3, #12
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003368:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	621a      	str	r2, [r3, #32]
}
 8003380:	bf00      	nop
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800338a:	b480      	push	{r7}
 800338c:	b085      	sub	sp, #20
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f043 0307 	orr.w	r3, r3, #7
 80033ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	609a      	str	r2, [r3, #8]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr

080033be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033be:	b480      	push	{r7}
 80033c0:	b087      	sub	sp, #28
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	021a      	lsls	r2, r3, #8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	609a      	str	r2, [r3, #8]
}
 80033f2:	bf00      	nop
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003410:	2302      	movs	r3, #2
 8003412:	e041      	b.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800343a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a14      	ldr	r2, [pc, #80]	@ (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003460:	d004      	beq.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a10      	ldr	r2, [pc, #64]	@ (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d10c      	bne.n	8003486 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003472:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	4313      	orrs	r3, r2
 800347c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40000400 	.word	0x40000400

080034ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e042      	b.n	8003568 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd fcd8 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2224      	movs	r2, #36	@ 0x24
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fdc5 	bl	80040a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	@ 0x28
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b20      	cmp	r3, #32
 800358e:	d16d      	bne.n	800366c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_UART_Transmit+0x2c>
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e066      	b.n	800366e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2221      	movs	r2, #33	@ 0x21
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ae:	f7fd fddf 	bl	8001170 <HAL_GetTick>
 80035b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	88fa      	ldrh	r2, [r7, #6]
 80035b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c8:	d108      	bne.n	80035dc <HAL_UART_Transmit+0x6c>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	e003      	b.n	80035e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035e4:	e02a      	b.n	800363c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2200      	movs	r2, #0
 80035ee:	2180      	movs	r1, #128	@ 0x80
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 fb14 	bl	8003c1e <UART_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e036      	b.n	800366e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10b      	bne.n	800361e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003614:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	3302      	adds	r3, #2
 800361a:	61bb      	str	r3, [r7, #24]
 800361c:	e007      	b.n	800362e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	3301      	adds	r3, #1
 800362c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1cf      	bne.n	80035e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2200      	movs	r2, #0
 800364e:	2140      	movs	r1, #64	@ 0x40
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 fae4 	bl	8003c1e <UART_WaitOnFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e006      	b.n	800366e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	4613      	mov	r3, r2
 8003682:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b20      	cmp	r3, #32
 800368e:	d112      	bne.n	80036b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_UART_Receive_IT+0x26>
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e00b      	b.n	80036b8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036a6:	88fb      	ldrh	r3, [r7, #6]
 80036a8:	461a      	mov	r2, r3
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fb24 	bl	8003cfa <UART_Start_Receive_IT>
 80036b2:	4603      	mov	r3, r0
 80036b4:	e000      	b.n	80036b8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036b6:	2302      	movs	r3, #2
  }
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b0ba      	sub	sp, #232	@ 0xe8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80036fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_UART_IRQHandler+0x66>
 8003712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fc01 	bl	8003f26 <UART_Receive_IT>
      return;
 8003724:	e25b      	b.n	8003bde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80de 	beq.w	80038ec <HAL_UART_IRQHandler+0x22c>
 8003730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d106      	bne.n	800374a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800373c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003740:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80d1 	beq.w	80038ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800374a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <HAL_UART_IRQHandler+0xae>
 8003756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800375a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800376e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <HAL_UART_IRQHandler+0xd2>
 800377a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378a:	f043 0202 	orr.w	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_UART_IRQHandler+0xf6>
 800379e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ae:	f043 0204 	orr.w	r2, r3, #4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d011      	beq.n	80037e6 <HAL_UART_IRQHandler+0x126>
 80037c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	f043 0208 	orr.w	r2, r3, #8
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 81f2 	beq.w	8003bd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_UART_IRQHandler+0x14e>
 80037fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fb8c 	bl	8003f26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <HAL_UART_IRQHandler+0x17a>
 8003832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d04f      	beq.n	80038da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fa96 	bl	8003d6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d041      	beq.n	80038d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3314      	adds	r3, #20
 8003854:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003864:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800386c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3314      	adds	r3, #20
 8003876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800387a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800387e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003886:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1d9      	bne.n	800384e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d013      	beq.n	80038ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a6:	4a7e      	ldr	r2, [pc, #504]	@ (8003aa0 <HAL_UART_IRQHandler+0x3e0>)
 80038a8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe fbf0 	bl	8002094 <HAL_DMA_Abort_IT>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d016      	beq.n	80038e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038c4:	4610      	mov	r0, r2
 80038c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	e00e      	b.n	80038e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f993 	bl	8003bf6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	e00a      	b.n	80038e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f98f 	bl	8003bf6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	e006      	b.n	80038e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f98b 	bl	8003bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80038e6:	e175      	b.n	8003bd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	bf00      	nop
    return;
 80038ea:	e173      	b.n	8003bd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	f040 814f 	bne.w	8003b94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8148 	beq.w	8003b94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8141 	beq.w	8003b94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80b6 	beq.w	8003aa4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003944:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8145 	beq.w	8003bd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003956:	429a      	cmp	r2, r3
 8003958:	f080 813e 	bcs.w	8003bd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003962:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b20      	cmp	r3, #32
 800396c:	f000 8088 	beq.w	8003a80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	330c      	adds	r3, #12
 8003976:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003986:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800398a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800398e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	330c      	adds	r3, #12
 8003998:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800399c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039ac:	e841 2300 	strex	r3, r2, [r1]
 80039b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1d9      	bne.n	8003970 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3314      	adds	r3, #20
 80039c2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039c6:	e853 3f00 	ldrex	r3, [r3]
 80039ca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3314      	adds	r3, #20
 80039dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039e0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e1      	bne.n	80039bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3314      	adds	r3, #20
 80039fe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3314      	adds	r3, #20
 8003a18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a1c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a1e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a22:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a24:	e841 2300 	strex	r3, r2, [r1]
 8003a28:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e3      	bne.n	80039f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a50:	f023 0310 	bic.w	r3, r3, #16
 8003a54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a62:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a64:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e3      	bne.n	8003a3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe facf 	bl	800201e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	4619      	mov	r1, r3
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8b6 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a9c:	e09c      	b.n	8003bd8 <HAL_UART_IRQHandler+0x518>
 8003a9e:	bf00      	nop
 8003aa0:	08003e31 	.word	0x08003e31
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 808e 	beq.w	8003bdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8089 	beq.w	8003bdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	330c      	adds	r3, #12
 8003ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003adc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ae0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003aee:	647a      	str	r2, [r7, #68]	@ 0x44
 8003af0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003af4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e3      	bne.n	8003aca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3314      	adds	r3, #20
 8003b08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	623b      	str	r3, [r7, #32]
   return(result);
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3314      	adds	r3, #20
 8003b22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b26:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e3      	bne.n	8003b02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0310 	bic.w	r3, r3, #16
 8003b5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	330c      	adds	r3, #12
 8003b68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b6c:	61fa      	str	r2, [r7, #28]
 8003b6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	69b9      	ldr	r1, [r7, #24]
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	617b      	str	r3, [r7, #20]
   return(result);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e3      	bne.n	8003b48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f83b 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b92:	e023      	b.n	8003bdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x4f4>
 8003ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f953 	bl	8003e58 <UART_Transmit_IT>
    return;
 8003bb2:	e014      	b.n	8003bde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <HAL_UART_IRQHandler+0x51e>
 8003bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f992 	bl	8003ef6 <UART_EndTransmit_IT>
    return;
 8003bd2:	e004      	b.n	8003bde <HAL_UART_IRQHandler+0x51e>
    return;
 8003bd4:	bf00      	nop
 8003bd6:	e002      	b.n	8003bde <HAL_UART_IRQHandler+0x51e>
      return;
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <HAL_UART_IRQHandler+0x51e>
      return;
 8003bdc:	bf00      	nop
  }
}
 8003bde:	37e8      	adds	r7, #232	@ 0xe8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr

08003c1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b090      	sub	sp, #64	@ 0x40
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	603b      	str	r3, [r7, #0]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2e:	e050      	b.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c36:	d04c      	beq.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c3e:	f7fd fa97 	bl	8001170 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d241      	bcs.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c6e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003c70:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e5      	bne.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3314      	adds	r3, #20
 8003c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	613b      	str	r3, [r7, #16]
   return(result);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ca2:	623a      	str	r2, [r7, #32]
 8003ca4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	69f9      	ldr	r1, [r7, #28]
 8003ca8:	6a3a      	ldr	r2, [r7, #32]
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e5      	bne.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e00f      	b.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d09f      	beq.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3740      	adds	r7, #64	@ 0x40
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	4613      	mov	r3, r2
 8003d06:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	88fa      	ldrh	r2, [r7, #6]
 8003d12:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	88fa      	ldrh	r2, [r7, #6]
 8003d18:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2222      	movs	r2, #34	@ 0x22
 8003d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d3e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0220 	orr.w	r2, r2, #32
 8003d5e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr

08003d6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b095      	sub	sp, #84	@ 0x54
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d94:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e5      	bne.n	8003d74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3314      	adds	r3, #20
 8003dae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e5      	bne.n	8003da8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d119      	bne.n	8003e18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f023 0310 	bic.w	r3, r3, #16
 8003dfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e04:	61ba      	str	r2, [r7, #24]
 8003e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6979      	ldr	r1, [r7, #20]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	613b      	str	r3, [r7, #16]
   return(result);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e5      	bne.n	8003de4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e26:	bf00      	nop
 8003e28:	3754      	adds	r7, #84	@ 0x54
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7ff fed3 	bl	8003bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e50:	bf00      	nop
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b21      	cmp	r3, #33	@ 0x21
 8003e6a:	d13e      	bne.n	8003eea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e74:	d114      	bne.n	8003ea0 <UART_Transmit_IT+0x48>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d110      	bne.n	8003ea0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e92:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	1c9a      	adds	r2, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	621a      	str	r2, [r3, #32]
 8003e9e:	e008      	b.n	8003eb2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	1c59      	adds	r1, r3, #1
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6211      	str	r1, [r2, #32]
 8003eaa:	781a      	ldrb	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10f      	bne.n	8003ee6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ed4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ee4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e000      	b.n	8003eec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fe64 	bl	8003be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b08c      	sub	sp, #48	@ 0x30
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b22      	cmp	r3, #34	@ 0x22
 8003f38:	f040 80ae 	bne.w	8004098 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f44:	d117      	bne.n	8003f76 <UART_Receive_IT+0x50>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d113      	bne.n	8003f76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f56:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	1c9a      	adds	r2, r3, #2
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f74:	e026      	b.n	8003fc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f88:	d007      	beq.n	8003f9a <UART_Receive_IT+0x74>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <UART_Receive_IT+0x82>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e008      	b.n	8003fba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d15d      	bne.n	8004094 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0220 	bic.w	r2, r2, #32
 8003fe6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ff6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	2b01      	cmp	r3, #1
 800401c:	d135      	bne.n	800408a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	613b      	str	r3, [r7, #16]
   return(result);
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f023 0310 	bic.w	r3, r3, #16
 800403a:	627b      	str	r3, [r7, #36]	@ 0x24
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	330c      	adds	r3, #12
 8004042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004044:	623a      	str	r2, [r7, #32]
 8004046:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	69f9      	ldr	r1, [r7, #28]
 800404a:	6a3a      	ldr	r2, [r7, #32]
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	61bb      	str	r3, [r7, #24]
   return(result);
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e5      	bne.n	8004024 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b10      	cmp	r3, #16
 8004064:	d10a      	bne.n	800407c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004080:	4619      	mov	r1, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff fdc0 	bl	8003c08 <HAL_UARTEx_RxEventCallback>
 8004088:	e002      	b.n	8004090 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc fe3a 	bl	8000d04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	e002      	b.n	800409a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e000      	b.n	800409a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004098:	2302      	movs	r3, #2
  }
}
 800409a:	4618      	mov	r0, r3
 800409c:	3730      	adds	r7, #48	@ 0x30
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80040de:	f023 030c 	bic.w	r3, r3, #12
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	430b      	orrs	r3, r1
 80040ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a2c      	ldr	r2, [pc, #176]	@ (80041b8 <UART_SetConfig+0x114>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d103      	bne.n	8004114 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800410c:	f7fe fdc6 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	e002      	b.n	800411a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004114:	f7fe fdae 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8004118:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	009a      	lsls	r2, r3, #2
 8004124:	441a      	add	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	4a22      	ldr	r2, [pc, #136]	@ (80041bc <UART_SetConfig+0x118>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	0119      	lsls	r1, r3, #4
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	009a      	lsls	r2, r3, #2
 8004144:	441a      	add	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004150:	4b1a      	ldr	r3, [pc, #104]	@ (80041bc <UART_SetConfig+0x118>)
 8004152:	fba3 0302 	umull	r0, r3, r3, r2
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	2064      	movs	r0, #100	@ 0x64
 800415a:	fb00 f303 	mul.w	r3, r0, r3
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	3332      	adds	r3, #50	@ 0x32
 8004164:	4a15      	ldr	r2, [pc, #84]	@ (80041bc <UART_SetConfig+0x118>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004170:	4419      	add	r1, r3
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	009a      	lsls	r2, r3, #2
 800417c:	441a      	add	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	fbb2 f2f3 	udiv	r2, r2, r3
 8004188:	4b0c      	ldr	r3, [pc, #48]	@ (80041bc <UART_SetConfig+0x118>)
 800418a:	fba3 0302 	umull	r0, r3, r3, r2
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	2064      	movs	r0, #100	@ 0x64
 8004192:	fb00 f303 	mul.w	r3, r0, r3
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	3332      	adds	r3, #50	@ 0x32
 800419c:	4a07      	ldr	r2, [pc, #28]	@ (80041bc <UART_SetConfig+0x118>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	f003 020f 	and.w	r2, r3, #15
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	440a      	add	r2, r1
 80041ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40013800 	.word	0x40013800
 80041bc:	51eb851f 	.word	0x51eb851f

080041c0 <siprintf>:
 80041c0:	b40e      	push	{r1, r2, r3}
 80041c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041c6:	b500      	push	{lr}
 80041c8:	b09c      	sub	sp, #112	@ 0x70
 80041ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80041cc:	9002      	str	r0, [sp, #8]
 80041ce:	9006      	str	r0, [sp, #24]
 80041d0:	9107      	str	r1, [sp, #28]
 80041d2:	9104      	str	r1, [sp, #16]
 80041d4:	4808      	ldr	r0, [pc, #32]	@ (80041f8 <siprintf+0x38>)
 80041d6:	4909      	ldr	r1, [pc, #36]	@ (80041fc <siprintf+0x3c>)
 80041d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80041dc:	9105      	str	r1, [sp, #20]
 80041de:	6800      	ldr	r0, [r0, #0]
 80041e0:	a902      	add	r1, sp, #8
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	f000 f992 	bl	800450c <_svfiprintf_r>
 80041e8:	2200      	movs	r2, #0
 80041ea:	9b02      	ldr	r3, [sp, #8]
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	b01c      	add	sp, #112	@ 0x70
 80041f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041f4:	b003      	add	sp, #12
 80041f6:	4770      	bx	lr
 80041f8:	20000010 	.word	0x20000010
 80041fc:	ffff0208 	.word	0xffff0208

08004200 <memset>:
 8004200:	4603      	mov	r3, r0
 8004202:	4402      	add	r2, r0
 8004204:	4293      	cmp	r3, r2
 8004206:	d100      	bne.n	800420a <memset+0xa>
 8004208:	4770      	bx	lr
 800420a:	f803 1b01 	strb.w	r1, [r3], #1
 800420e:	e7f9      	b.n	8004204 <memset+0x4>

08004210 <__errno>:
 8004210:	4b01      	ldr	r3, [pc, #4]	@ (8004218 <__errno+0x8>)
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000010 	.word	0x20000010

0800421c <__libc_init_array>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	2600      	movs	r6, #0
 8004220:	4d0c      	ldr	r5, [pc, #48]	@ (8004254 <__libc_init_array+0x38>)
 8004222:	4c0d      	ldr	r4, [pc, #52]	@ (8004258 <__libc_init_array+0x3c>)
 8004224:	1b64      	subs	r4, r4, r5
 8004226:	10a4      	asrs	r4, r4, #2
 8004228:	42a6      	cmp	r6, r4
 800422a:	d109      	bne.n	8004240 <__libc_init_array+0x24>
 800422c:	f000 fc78 	bl	8004b20 <_init>
 8004230:	2600      	movs	r6, #0
 8004232:	4d0a      	ldr	r5, [pc, #40]	@ (800425c <__libc_init_array+0x40>)
 8004234:	4c0a      	ldr	r4, [pc, #40]	@ (8004260 <__libc_init_array+0x44>)
 8004236:	1b64      	subs	r4, r4, r5
 8004238:	10a4      	asrs	r4, r4, #2
 800423a:	42a6      	cmp	r6, r4
 800423c:	d105      	bne.n	800424a <__libc_init_array+0x2e>
 800423e:	bd70      	pop	{r4, r5, r6, pc}
 8004240:	f855 3b04 	ldr.w	r3, [r5], #4
 8004244:	4798      	blx	r3
 8004246:	3601      	adds	r6, #1
 8004248:	e7ee      	b.n	8004228 <__libc_init_array+0xc>
 800424a:	f855 3b04 	ldr.w	r3, [r5], #4
 800424e:	4798      	blx	r3
 8004250:	3601      	adds	r6, #1
 8004252:	e7f2      	b.n	800423a <__libc_init_array+0x1e>
 8004254:	08004be0 	.word	0x08004be0
 8004258:	08004be0 	.word	0x08004be0
 800425c:	08004be0 	.word	0x08004be0
 8004260:	08004be4 	.word	0x08004be4

08004264 <__retarget_lock_acquire_recursive>:
 8004264:	4770      	bx	lr

08004266 <__retarget_lock_release_recursive>:
 8004266:	4770      	bx	lr

08004268 <_free_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4605      	mov	r5, r0
 800426c:	2900      	cmp	r1, #0
 800426e:	d040      	beq.n	80042f2 <_free_r+0x8a>
 8004270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004274:	1f0c      	subs	r4, r1, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	bfb8      	it	lt
 800427a:	18e4      	addlt	r4, r4, r3
 800427c:	f000 f8de 	bl	800443c <__malloc_lock>
 8004280:	4a1c      	ldr	r2, [pc, #112]	@ (80042f4 <_free_r+0x8c>)
 8004282:	6813      	ldr	r3, [r2, #0]
 8004284:	b933      	cbnz	r3, 8004294 <_free_r+0x2c>
 8004286:	6063      	str	r3, [r4, #4]
 8004288:	6014      	str	r4, [r2, #0]
 800428a:	4628      	mov	r0, r5
 800428c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004290:	f000 b8da 	b.w	8004448 <__malloc_unlock>
 8004294:	42a3      	cmp	r3, r4
 8004296:	d908      	bls.n	80042aa <_free_r+0x42>
 8004298:	6820      	ldr	r0, [r4, #0]
 800429a:	1821      	adds	r1, r4, r0
 800429c:	428b      	cmp	r3, r1
 800429e:	bf01      	itttt	eq
 80042a0:	6819      	ldreq	r1, [r3, #0]
 80042a2:	685b      	ldreq	r3, [r3, #4]
 80042a4:	1809      	addeq	r1, r1, r0
 80042a6:	6021      	streq	r1, [r4, #0]
 80042a8:	e7ed      	b.n	8004286 <_free_r+0x1e>
 80042aa:	461a      	mov	r2, r3
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	b10b      	cbz	r3, 80042b4 <_free_r+0x4c>
 80042b0:	42a3      	cmp	r3, r4
 80042b2:	d9fa      	bls.n	80042aa <_free_r+0x42>
 80042b4:	6811      	ldr	r1, [r2, #0]
 80042b6:	1850      	adds	r0, r2, r1
 80042b8:	42a0      	cmp	r0, r4
 80042ba:	d10b      	bne.n	80042d4 <_free_r+0x6c>
 80042bc:	6820      	ldr	r0, [r4, #0]
 80042be:	4401      	add	r1, r0
 80042c0:	1850      	adds	r0, r2, r1
 80042c2:	4283      	cmp	r3, r0
 80042c4:	6011      	str	r1, [r2, #0]
 80042c6:	d1e0      	bne.n	800428a <_free_r+0x22>
 80042c8:	6818      	ldr	r0, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4408      	add	r0, r1
 80042ce:	6010      	str	r0, [r2, #0]
 80042d0:	6053      	str	r3, [r2, #4]
 80042d2:	e7da      	b.n	800428a <_free_r+0x22>
 80042d4:	d902      	bls.n	80042dc <_free_r+0x74>
 80042d6:	230c      	movs	r3, #12
 80042d8:	602b      	str	r3, [r5, #0]
 80042da:	e7d6      	b.n	800428a <_free_r+0x22>
 80042dc:	6820      	ldr	r0, [r4, #0]
 80042de:	1821      	adds	r1, r4, r0
 80042e0:	428b      	cmp	r3, r1
 80042e2:	bf01      	itttt	eq
 80042e4:	6819      	ldreq	r1, [r3, #0]
 80042e6:	685b      	ldreq	r3, [r3, #4]
 80042e8:	1809      	addeq	r1, r1, r0
 80042ea:	6021      	streq	r1, [r4, #0]
 80042ec:	6063      	str	r3, [r4, #4]
 80042ee:	6054      	str	r4, [r2, #4]
 80042f0:	e7cb      	b.n	800428a <_free_r+0x22>
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
 80042f4:	2000038c 	.word	0x2000038c

080042f8 <sbrk_aligned>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	4e0f      	ldr	r6, [pc, #60]	@ (8004338 <sbrk_aligned+0x40>)
 80042fc:	460c      	mov	r4, r1
 80042fe:	6831      	ldr	r1, [r6, #0]
 8004300:	4605      	mov	r5, r0
 8004302:	b911      	cbnz	r1, 800430a <sbrk_aligned+0x12>
 8004304:	f000 fbaa 	bl	8004a5c <_sbrk_r>
 8004308:	6030      	str	r0, [r6, #0]
 800430a:	4621      	mov	r1, r4
 800430c:	4628      	mov	r0, r5
 800430e:	f000 fba5 	bl	8004a5c <_sbrk_r>
 8004312:	1c43      	adds	r3, r0, #1
 8004314:	d103      	bne.n	800431e <sbrk_aligned+0x26>
 8004316:	f04f 34ff 	mov.w	r4, #4294967295
 800431a:	4620      	mov	r0, r4
 800431c:	bd70      	pop	{r4, r5, r6, pc}
 800431e:	1cc4      	adds	r4, r0, #3
 8004320:	f024 0403 	bic.w	r4, r4, #3
 8004324:	42a0      	cmp	r0, r4
 8004326:	d0f8      	beq.n	800431a <sbrk_aligned+0x22>
 8004328:	1a21      	subs	r1, r4, r0
 800432a:	4628      	mov	r0, r5
 800432c:	f000 fb96 	bl	8004a5c <_sbrk_r>
 8004330:	3001      	adds	r0, #1
 8004332:	d1f2      	bne.n	800431a <sbrk_aligned+0x22>
 8004334:	e7ef      	b.n	8004316 <sbrk_aligned+0x1e>
 8004336:	bf00      	nop
 8004338:	20000388 	.word	0x20000388

0800433c <_malloc_r>:
 800433c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004340:	1ccd      	adds	r5, r1, #3
 8004342:	f025 0503 	bic.w	r5, r5, #3
 8004346:	3508      	adds	r5, #8
 8004348:	2d0c      	cmp	r5, #12
 800434a:	bf38      	it	cc
 800434c:	250c      	movcc	r5, #12
 800434e:	2d00      	cmp	r5, #0
 8004350:	4606      	mov	r6, r0
 8004352:	db01      	blt.n	8004358 <_malloc_r+0x1c>
 8004354:	42a9      	cmp	r1, r5
 8004356:	d904      	bls.n	8004362 <_malloc_r+0x26>
 8004358:	230c      	movs	r3, #12
 800435a:	6033      	str	r3, [r6, #0]
 800435c:	2000      	movs	r0, #0
 800435e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004362:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004438 <_malloc_r+0xfc>
 8004366:	f000 f869 	bl	800443c <__malloc_lock>
 800436a:	f8d8 3000 	ldr.w	r3, [r8]
 800436e:	461c      	mov	r4, r3
 8004370:	bb44      	cbnz	r4, 80043c4 <_malloc_r+0x88>
 8004372:	4629      	mov	r1, r5
 8004374:	4630      	mov	r0, r6
 8004376:	f7ff ffbf 	bl	80042f8 <sbrk_aligned>
 800437a:	1c43      	adds	r3, r0, #1
 800437c:	4604      	mov	r4, r0
 800437e:	d158      	bne.n	8004432 <_malloc_r+0xf6>
 8004380:	f8d8 4000 	ldr.w	r4, [r8]
 8004384:	4627      	mov	r7, r4
 8004386:	2f00      	cmp	r7, #0
 8004388:	d143      	bne.n	8004412 <_malloc_r+0xd6>
 800438a:	2c00      	cmp	r4, #0
 800438c:	d04b      	beq.n	8004426 <_malloc_r+0xea>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	4639      	mov	r1, r7
 8004392:	4630      	mov	r0, r6
 8004394:	eb04 0903 	add.w	r9, r4, r3
 8004398:	f000 fb60 	bl	8004a5c <_sbrk_r>
 800439c:	4581      	cmp	r9, r0
 800439e:	d142      	bne.n	8004426 <_malloc_r+0xea>
 80043a0:	6821      	ldr	r1, [r4, #0]
 80043a2:	4630      	mov	r0, r6
 80043a4:	1a6d      	subs	r5, r5, r1
 80043a6:	4629      	mov	r1, r5
 80043a8:	f7ff ffa6 	bl	80042f8 <sbrk_aligned>
 80043ac:	3001      	adds	r0, #1
 80043ae:	d03a      	beq.n	8004426 <_malloc_r+0xea>
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	442b      	add	r3, r5
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	f8d8 3000 	ldr.w	r3, [r8]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	bb62      	cbnz	r2, 8004418 <_malloc_r+0xdc>
 80043be:	f8c8 7000 	str.w	r7, [r8]
 80043c2:	e00f      	b.n	80043e4 <_malloc_r+0xa8>
 80043c4:	6822      	ldr	r2, [r4, #0]
 80043c6:	1b52      	subs	r2, r2, r5
 80043c8:	d420      	bmi.n	800440c <_malloc_r+0xd0>
 80043ca:	2a0b      	cmp	r2, #11
 80043cc:	d917      	bls.n	80043fe <_malloc_r+0xc2>
 80043ce:	1961      	adds	r1, r4, r5
 80043d0:	42a3      	cmp	r3, r4
 80043d2:	6025      	str	r5, [r4, #0]
 80043d4:	bf18      	it	ne
 80043d6:	6059      	strne	r1, [r3, #4]
 80043d8:	6863      	ldr	r3, [r4, #4]
 80043da:	bf08      	it	eq
 80043dc:	f8c8 1000 	streq.w	r1, [r8]
 80043e0:	5162      	str	r2, [r4, r5]
 80043e2:	604b      	str	r3, [r1, #4]
 80043e4:	4630      	mov	r0, r6
 80043e6:	f000 f82f 	bl	8004448 <__malloc_unlock>
 80043ea:	f104 000b 	add.w	r0, r4, #11
 80043ee:	1d23      	adds	r3, r4, #4
 80043f0:	f020 0007 	bic.w	r0, r0, #7
 80043f4:	1ac2      	subs	r2, r0, r3
 80043f6:	bf1c      	itt	ne
 80043f8:	1a1b      	subne	r3, r3, r0
 80043fa:	50a3      	strne	r3, [r4, r2]
 80043fc:	e7af      	b.n	800435e <_malloc_r+0x22>
 80043fe:	6862      	ldr	r2, [r4, #4]
 8004400:	42a3      	cmp	r3, r4
 8004402:	bf0c      	ite	eq
 8004404:	f8c8 2000 	streq.w	r2, [r8]
 8004408:	605a      	strne	r2, [r3, #4]
 800440a:	e7eb      	b.n	80043e4 <_malloc_r+0xa8>
 800440c:	4623      	mov	r3, r4
 800440e:	6864      	ldr	r4, [r4, #4]
 8004410:	e7ae      	b.n	8004370 <_malloc_r+0x34>
 8004412:	463c      	mov	r4, r7
 8004414:	687f      	ldr	r7, [r7, #4]
 8004416:	e7b6      	b.n	8004386 <_malloc_r+0x4a>
 8004418:	461a      	mov	r2, r3
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	42a3      	cmp	r3, r4
 800441e:	d1fb      	bne.n	8004418 <_malloc_r+0xdc>
 8004420:	2300      	movs	r3, #0
 8004422:	6053      	str	r3, [r2, #4]
 8004424:	e7de      	b.n	80043e4 <_malloc_r+0xa8>
 8004426:	230c      	movs	r3, #12
 8004428:	4630      	mov	r0, r6
 800442a:	6033      	str	r3, [r6, #0]
 800442c:	f000 f80c 	bl	8004448 <__malloc_unlock>
 8004430:	e794      	b.n	800435c <_malloc_r+0x20>
 8004432:	6005      	str	r5, [r0, #0]
 8004434:	e7d6      	b.n	80043e4 <_malloc_r+0xa8>
 8004436:	bf00      	nop
 8004438:	2000038c 	.word	0x2000038c

0800443c <__malloc_lock>:
 800443c:	4801      	ldr	r0, [pc, #4]	@ (8004444 <__malloc_lock+0x8>)
 800443e:	f7ff bf11 	b.w	8004264 <__retarget_lock_acquire_recursive>
 8004442:	bf00      	nop
 8004444:	20000384 	.word	0x20000384

08004448 <__malloc_unlock>:
 8004448:	4801      	ldr	r0, [pc, #4]	@ (8004450 <__malloc_unlock+0x8>)
 800444a:	f7ff bf0c 	b.w	8004266 <__retarget_lock_release_recursive>
 800444e:	bf00      	nop
 8004450:	20000384 	.word	0x20000384

08004454 <__ssputs_r>:
 8004454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004458:	461f      	mov	r7, r3
 800445a:	688e      	ldr	r6, [r1, #8]
 800445c:	4682      	mov	sl, r0
 800445e:	42be      	cmp	r6, r7
 8004460:	460c      	mov	r4, r1
 8004462:	4690      	mov	r8, r2
 8004464:	680b      	ldr	r3, [r1, #0]
 8004466:	d82d      	bhi.n	80044c4 <__ssputs_r+0x70>
 8004468:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800446c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004470:	d026      	beq.n	80044c0 <__ssputs_r+0x6c>
 8004472:	6965      	ldr	r5, [r4, #20]
 8004474:	6909      	ldr	r1, [r1, #16]
 8004476:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800447a:	eba3 0901 	sub.w	r9, r3, r1
 800447e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004482:	1c7b      	adds	r3, r7, #1
 8004484:	444b      	add	r3, r9
 8004486:	106d      	asrs	r5, r5, #1
 8004488:	429d      	cmp	r5, r3
 800448a:	bf38      	it	cc
 800448c:	461d      	movcc	r5, r3
 800448e:	0553      	lsls	r3, r2, #21
 8004490:	d527      	bpl.n	80044e2 <__ssputs_r+0x8e>
 8004492:	4629      	mov	r1, r5
 8004494:	f7ff ff52 	bl	800433c <_malloc_r>
 8004498:	4606      	mov	r6, r0
 800449a:	b360      	cbz	r0, 80044f6 <__ssputs_r+0xa2>
 800449c:	464a      	mov	r2, r9
 800449e:	6921      	ldr	r1, [r4, #16]
 80044a0:	f000 fafa 	bl	8004a98 <memcpy>
 80044a4:	89a3      	ldrh	r3, [r4, #12]
 80044a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80044aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ae:	81a3      	strh	r3, [r4, #12]
 80044b0:	6126      	str	r6, [r4, #16]
 80044b2:	444e      	add	r6, r9
 80044b4:	6026      	str	r6, [r4, #0]
 80044b6:	463e      	mov	r6, r7
 80044b8:	6165      	str	r5, [r4, #20]
 80044ba:	eba5 0509 	sub.w	r5, r5, r9
 80044be:	60a5      	str	r5, [r4, #8]
 80044c0:	42be      	cmp	r6, r7
 80044c2:	d900      	bls.n	80044c6 <__ssputs_r+0x72>
 80044c4:	463e      	mov	r6, r7
 80044c6:	4632      	mov	r2, r6
 80044c8:	4641      	mov	r1, r8
 80044ca:	6820      	ldr	r0, [r4, #0]
 80044cc:	f000 faac 	bl	8004a28 <memmove>
 80044d0:	2000      	movs	r0, #0
 80044d2:	68a3      	ldr	r3, [r4, #8]
 80044d4:	1b9b      	subs	r3, r3, r6
 80044d6:	60a3      	str	r3, [r4, #8]
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	4433      	add	r3, r6
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e2:	462a      	mov	r2, r5
 80044e4:	f000 fae6 	bl	8004ab4 <_realloc_r>
 80044e8:	4606      	mov	r6, r0
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d1e0      	bne.n	80044b0 <__ssputs_r+0x5c>
 80044ee:	4650      	mov	r0, sl
 80044f0:	6921      	ldr	r1, [r4, #16]
 80044f2:	f7ff feb9 	bl	8004268 <_free_r>
 80044f6:	230c      	movs	r3, #12
 80044f8:	f8ca 3000 	str.w	r3, [sl]
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004506:	81a3      	strh	r3, [r4, #12]
 8004508:	e7e9      	b.n	80044de <__ssputs_r+0x8a>
	...

0800450c <_svfiprintf_r>:
 800450c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004510:	4698      	mov	r8, r3
 8004512:	898b      	ldrh	r3, [r1, #12]
 8004514:	4607      	mov	r7, r0
 8004516:	061b      	lsls	r3, r3, #24
 8004518:	460d      	mov	r5, r1
 800451a:	4614      	mov	r4, r2
 800451c:	b09d      	sub	sp, #116	@ 0x74
 800451e:	d510      	bpl.n	8004542 <_svfiprintf_r+0x36>
 8004520:	690b      	ldr	r3, [r1, #16]
 8004522:	b973      	cbnz	r3, 8004542 <_svfiprintf_r+0x36>
 8004524:	2140      	movs	r1, #64	@ 0x40
 8004526:	f7ff ff09 	bl	800433c <_malloc_r>
 800452a:	6028      	str	r0, [r5, #0]
 800452c:	6128      	str	r0, [r5, #16]
 800452e:	b930      	cbnz	r0, 800453e <_svfiprintf_r+0x32>
 8004530:	230c      	movs	r3, #12
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
 8004538:	b01d      	add	sp, #116	@ 0x74
 800453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800453e:	2340      	movs	r3, #64	@ 0x40
 8004540:	616b      	str	r3, [r5, #20]
 8004542:	2300      	movs	r3, #0
 8004544:	9309      	str	r3, [sp, #36]	@ 0x24
 8004546:	2320      	movs	r3, #32
 8004548:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800454c:	2330      	movs	r3, #48	@ 0x30
 800454e:	f04f 0901 	mov.w	r9, #1
 8004552:	f8cd 800c 	str.w	r8, [sp, #12]
 8004556:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80046f0 <_svfiprintf_r+0x1e4>
 800455a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800455e:	4623      	mov	r3, r4
 8004560:	469a      	mov	sl, r3
 8004562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004566:	b10a      	cbz	r2, 800456c <_svfiprintf_r+0x60>
 8004568:	2a25      	cmp	r2, #37	@ 0x25
 800456a:	d1f9      	bne.n	8004560 <_svfiprintf_r+0x54>
 800456c:	ebba 0b04 	subs.w	fp, sl, r4
 8004570:	d00b      	beq.n	800458a <_svfiprintf_r+0x7e>
 8004572:	465b      	mov	r3, fp
 8004574:	4622      	mov	r2, r4
 8004576:	4629      	mov	r1, r5
 8004578:	4638      	mov	r0, r7
 800457a:	f7ff ff6b 	bl	8004454 <__ssputs_r>
 800457e:	3001      	adds	r0, #1
 8004580:	f000 80a7 	beq.w	80046d2 <_svfiprintf_r+0x1c6>
 8004584:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004586:	445a      	add	r2, fp
 8004588:	9209      	str	r2, [sp, #36]	@ 0x24
 800458a:	f89a 3000 	ldrb.w	r3, [sl]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 809f 	beq.w	80046d2 <_svfiprintf_r+0x1c6>
 8004594:	2300      	movs	r3, #0
 8004596:	f04f 32ff 	mov.w	r2, #4294967295
 800459a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800459e:	f10a 0a01 	add.w	sl, sl, #1
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	9307      	str	r3, [sp, #28]
 80045a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80045ac:	4654      	mov	r4, sl
 80045ae:	2205      	movs	r2, #5
 80045b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045b4:	484e      	ldr	r0, [pc, #312]	@ (80046f0 <_svfiprintf_r+0x1e4>)
 80045b6:	f000 fa61 	bl	8004a7c <memchr>
 80045ba:	9a04      	ldr	r2, [sp, #16]
 80045bc:	b9d8      	cbnz	r0, 80045f6 <_svfiprintf_r+0xea>
 80045be:	06d0      	lsls	r0, r2, #27
 80045c0:	bf44      	itt	mi
 80045c2:	2320      	movmi	r3, #32
 80045c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045c8:	0711      	lsls	r1, r2, #28
 80045ca:	bf44      	itt	mi
 80045cc:	232b      	movmi	r3, #43	@ 0x2b
 80045ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045d2:	f89a 3000 	ldrb.w	r3, [sl]
 80045d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80045d8:	d015      	beq.n	8004606 <_svfiprintf_r+0xfa>
 80045da:	4654      	mov	r4, sl
 80045dc:	2000      	movs	r0, #0
 80045de:	f04f 0c0a 	mov.w	ip, #10
 80045e2:	9a07      	ldr	r2, [sp, #28]
 80045e4:	4621      	mov	r1, r4
 80045e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045ea:	3b30      	subs	r3, #48	@ 0x30
 80045ec:	2b09      	cmp	r3, #9
 80045ee:	d94b      	bls.n	8004688 <_svfiprintf_r+0x17c>
 80045f0:	b1b0      	cbz	r0, 8004620 <_svfiprintf_r+0x114>
 80045f2:	9207      	str	r2, [sp, #28]
 80045f4:	e014      	b.n	8004620 <_svfiprintf_r+0x114>
 80045f6:	eba0 0308 	sub.w	r3, r0, r8
 80045fa:	fa09 f303 	lsl.w	r3, r9, r3
 80045fe:	4313      	orrs	r3, r2
 8004600:	46a2      	mov	sl, r4
 8004602:	9304      	str	r3, [sp, #16]
 8004604:	e7d2      	b.n	80045ac <_svfiprintf_r+0xa0>
 8004606:	9b03      	ldr	r3, [sp, #12]
 8004608:	1d19      	adds	r1, r3, #4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	9103      	str	r1, [sp, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	bfbb      	ittet	lt
 8004612:	425b      	neglt	r3, r3
 8004614:	f042 0202 	orrlt.w	r2, r2, #2
 8004618:	9307      	strge	r3, [sp, #28]
 800461a:	9307      	strlt	r3, [sp, #28]
 800461c:	bfb8      	it	lt
 800461e:	9204      	strlt	r2, [sp, #16]
 8004620:	7823      	ldrb	r3, [r4, #0]
 8004622:	2b2e      	cmp	r3, #46	@ 0x2e
 8004624:	d10a      	bne.n	800463c <_svfiprintf_r+0x130>
 8004626:	7863      	ldrb	r3, [r4, #1]
 8004628:	2b2a      	cmp	r3, #42	@ 0x2a
 800462a:	d132      	bne.n	8004692 <_svfiprintf_r+0x186>
 800462c:	9b03      	ldr	r3, [sp, #12]
 800462e:	3402      	adds	r4, #2
 8004630:	1d1a      	adds	r2, r3, #4
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	9203      	str	r2, [sp, #12]
 8004636:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800463a:	9305      	str	r3, [sp, #20]
 800463c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80046f4 <_svfiprintf_r+0x1e8>
 8004640:	2203      	movs	r2, #3
 8004642:	4650      	mov	r0, sl
 8004644:	7821      	ldrb	r1, [r4, #0]
 8004646:	f000 fa19 	bl	8004a7c <memchr>
 800464a:	b138      	cbz	r0, 800465c <_svfiprintf_r+0x150>
 800464c:	2240      	movs	r2, #64	@ 0x40
 800464e:	9b04      	ldr	r3, [sp, #16]
 8004650:	eba0 000a 	sub.w	r0, r0, sl
 8004654:	4082      	lsls	r2, r0
 8004656:	4313      	orrs	r3, r2
 8004658:	3401      	adds	r4, #1
 800465a:	9304      	str	r3, [sp, #16]
 800465c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004660:	2206      	movs	r2, #6
 8004662:	4825      	ldr	r0, [pc, #148]	@ (80046f8 <_svfiprintf_r+0x1ec>)
 8004664:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004668:	f000 fa08 	bl	8004a7c <memchr>
 800466c:	2800      	cmp	r0, #0
 800466e:	d036      	beq.n	80046de <_svfiprintf_r+0x1d2>
 8004670:	4b22      	ldr	r3, [pc, #136]	@ (80046fc <_svfiprintf_r+0x1f0>)
 8004672:	bb1b      	cbnz	r3, 80046bc <_svfiprintf_r+0x1b0>
 8004674:	9b03      	ldr	r3, [sp, #12]
 8004676:	3307      	adds	r3, #7
 8004678:	f023 0307 	bic.w	r3, r3, #7
 800467c:	3308      	adds	r3, #8
 800467e:	9303      	str	r3, [sp, #12]
 8004680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004682:	4433      	add	r3, r6
 8004684:	9309      	str	r3, [sp, #36]	@ 0x24
 8004686:	e76a      	b.n	800455e <_svfiprintf_r+0x52>
 8004688:	460c      	mov	r4, r1
 800468a:	2001      	movs	r0, #1
 800468c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004690:	e7a8      	b.n	80045e4 <_svfiprintf_r+0xd8>
 8004692:	2300      	movs	r3, #0
 8004694:	f04f 0c0a 	mov.w	ip, #10
 8004698:	4619      	mov	r1, r3
 800469a:	3401      	adds	r4, #1
 800469c:	9305      	str	r3, [sp, #20]
 800469e:	4620      	mov	r0, r4
 80046a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046a4:	3a30      	subs	r2, #48	@ 0x30
 80046a6:	2a09      	cmp	r2, #9
 80046a8:	d903      	bls.n	80046b2 <_svfiprintf_r+0x1a6>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0c6      	beq.n	800463c <_svfiprintf_r+0x130>
 80046ae:	9105      	str	r1, [sp, #20]
 80046b0:	e7c4      	b.n	800463c <_svfiprintf_r+0x130>
 80046b2:	4604      	mov	r4, r0
 80046b4:	2301      	movs	r3, #1
 80046b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80046ba:	e7f0      	b.n	800469e <_svfiprintf_r+0x192>
 80046bc:	ab03      	add	r3, sp, #12
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	462a      	mov	r2, r5
 80046c2:	4638      	mov	r0, r7
 80046c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004700 <_svfiprintf_r+0x1f4>)
 80046c6:	a904      	add	r1, sp, #16
 80046c8:	f3af 8000 	nop.w
 80046cc:	1c42      	adds	r2, r0, #1
 80046ce:	4606      	mov	r6, r0
 80046d0:	d1d6      	bne.n	8004680 <_svfiprintf_r+0x174>
 80046d2:	89ab      	ldrh	r3, [r5, #12]
 80046d4:	065b      	lsls	r3, r3, #25
 80046d6:	f53f af2d 	bmi.w	8004534 <_svfiprintf_r+0x28>
 80046da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046dc:	e72c      	b.n	8004538 <_svfiprintf_r+0x2c>
 80046de:	ab03      	add	r3, sp, #12
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	462a      	mov	r2, r5
 80046e4:	4638      	mov	r0, r7
 80046e6:	4b06      	ldr	r3, [pc, #24]	@ (8004700 <_svfiprintf_r+0x1f4>)
 80046e8:	a904      	add	r1, sp, #16
 80046ea:	f000 f87d 	bl	80047e8 <_printf_i>
 80046ee:	e7ed      	b.n	80046cc <_svfiprintf_r+0x1c0>
 80046f0:	08004ba2 	.word	0x08004ba2
 80046f4:	08004ba8 	.word	0x08004ba8
 80046f8:	08004bac 	.word	0x08004bac
 80046fc:	00000000 	.word	0x00000000
 8004700:	08004455 	.word	0x08004455

08004704 <_printf_common>:
 8004704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	4616      	mov	r6, r2
 800470a:	4698      	mov	r8, r3
 800470c:	688a      	ldr	r2, [r1, #8]
 800470e:	690b      	ldr	r3, [r1, #16]
 8004710:	4607      	mov	r7, r0
 8004712:	4293      	cmp	r3, r2
 8004714:	bfb8      	it	lt
 8004716:	4613      	movlt	r3, r2
 8004718:	6033      	str	r3, [r6, #0]
 800471a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800471e:	460c      	mov	r4, r1
 8004720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004724:	b10a      	cbz	r2, 800472a <_printf_common+0x26>
 8004726:	3301      	adds	r3, #1
 8004728:	6033      	str	r3, [r6, #0]
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	0699      	lsls	r1, r3, #26
 800472e:	bf42      	ittt	mi
 8004730:	6833      	ldrmi	r3, [r6, #0]
 8004732:	3302      	addmi	r3, #2
 8004734:	6033      	strmi	r3, [r6, #0]
 8004736:	6825      	ldr	r5, [r4, #0]
 8004738:	f015 0506 	ands.w	r5, r5, #6
 800473c:	d106      	bne.n	800474c <_printf_common+0x48>
 800473e:	f104 0a19 	add.w	sl, r4, #25
 8004742:	68e3      	ldr	r3, [r4, #12]
 8004744:	6832      	ldr	r2, [r6, #0]
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	42ab      	cmp	r3, r5
 800474a:	dc2b      	bgt.n	80047a4 <_printf_common+0xa0>
 800474c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004750:	6822      	ldr	r2, [r4, #0]
 8004752:	3b00      	subs	r3, #0
 8004754:	bf18      	it	ne
 8004756:	2301      	movne	r3, #1
 8004758:	0692      	lsls	r2, r2, #26
 800475a:	d430      	bmi.n	80047be <_printf_common+0xba>
 800475c:	4641      	mov	r1, r8
 800475e:	4638      	mov	r0, r7
 8004760:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004764:	47c8      	blx	r9
 8004766:	3001      	adds	r0, #1
 8004768:	d023      	beq.n	80047b2 <_printf_common+0xae>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	6922      	ldr	r2, [r4, #16]
 800476e:	f003 0306 	and.w	r3, r3, #6
 8004772:	2b04      	cmp	r3, #4
 8004774:	bf14      	ite	ne
 8004776:	2500      	movne	r5, #0
 8004778:	6833      	ldreq	r3, [r6, #0]
 800477a:	f04f 0600 	mov.w	r6, #0
 800477e:	bf08      	it	eq
 8004780:	68e5      	ldreq	r5, [r4, #12]
 8004782:	f104 041a 	add.w	r4, r4, #26
 8004786:	bf08      	it	eq
 8004788:	1aed      	subeq	r5, r5, r3
 800478a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800478e:	bf08      	it	eq
 8004790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004794:	4293      	cmp	r3, r2
 8004796:	bfc4      	itt	gt
 8004798:	1a9b      	subgt	r3, r3, r2
 800479a:	18ed      	addgt	r5, r5, r3
 800479c:	42b5      	cmp	r5, r6
 800479e:	d11a      	bne.n	80047d6 <_printf_common+0xd2>
 80047a0:	2000      	movs	r0, #0
 80047a2:	e008      	b.n	80047b6 <_printf_common+0xb2>
 80047a4:	2301      	movs	r3, #1
 80047a6:	4652      	mov	r2, sl
 80047a8:	4641      	mov	r1, r8
 80047aa:	4638      	mov	r0, r7
 80047ac:	47c8      	blx	r9
 80047ae:	3001      	adds	r0, #1
 80047b0:	d103      	bne.n	80047ba <_printf_common+0xb6>
 80047b2:	f04f 30ff 	mov.w	r0, #4294967295
 80047b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ba:	3501      	adds	r5, #1
 80047bc:	e7c1      	b.n	8004742 <_printf_common+0x3e>
 80047be:	2030      	movs	r0, #48	@ 0x30
 80047c0:	18e1      	adds	r1, r4, r3
 80047c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047cc:	4422      	add	r2, r4
 80047ce:	3302      	adds	r3, #2
 80047d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047d4:	e7c2      	b.n	800475c <_printf_common+0x58>
 80047d6:	2301      	movs	r3, #1
 80047d8:	4622      	mov	r2, r4
 80047da:	4641      	mov	r1, r8
 80047dc:	4638      	mov	r0, r7
 80047de:	47c8      	blx	r9
 80047e0:	3001      	adds	r0, #1
 80047e2:	d0e6      	beq.n	80047b2 <_printf_common+0xae>
 80047e4:	3601      	adds	r6, #1
 80047e6:	e7d9      	b.n	800479c <_printf_common+0x98>

080047e8 <_printf_i>:
 80047e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047ec:	7e0f      	ldrb	r7, [r1, #24]
 80047ee:	4691      	mov	r9, r2
 80047f0:	2f78      	cmp	r7, #120	@ 0x78
 80047f2:	4680      	mov	r8, r0
 80047f4:	460c      	mov	r4, r1
 80047f6:	469a      	mov	sl, r3
 80047f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047fe:	d807      	bhi.n	8004810 <_printf_i+0x28>
 8004800:	2f62      	cmp	r7, #98	@ 0x62
 8004802:	d80a      	bhi.n	800481a <_printf_i+0x32>
 8004804:	2f00      	cmp	r7, #0
 8004806:	f000 80d3 	beq.w	80049b0 <_printf_i+0x1c8>
 800480a:	2f58      	cmp	r7, #88	@ 0x58
 800480c:	f000 80ba 	beq.w	8004984 <_printf_i+0x19c>
 8004810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004818:	e03a      	b.n	8004890 <_printf_i+0xa8>
 800481a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800481e:	2b15      	cmp	r3, #21
 8004820:	d8f6      	bhi.n	8004810 <_printf_i+0x28>
 8004822:	a101      	add	r1, pc, #4	@ (adr r1, 8004828 <_printf_i+0x40>)
 8004824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004828:	08004881 	.word	0x08004881
 800482c:	08004895 	.word	0x08004895
 8004830:	08004811 	.word	0x08004811
 8004834:	08004811 	.word	0x08004811
 8004838:	08004811 	.word	0x08004811
 800483c:	08004811 	.word	0x08004811
 8004840:	08004895 	.word	0x08004895
 8004844:	08004811 	.word	0x08004811
 8004848:	08004811 	.word	0x08004811
 800484c:	08004811 	.word	0x08004811
 8004850:	08004811 	.word	0x08004811
 8004854:	08004997 	.word	0x08004997
 8004858:	080048bf 	.word	0x080048bf
 800485c:	08004951 	.word	0x08004951
 8004860:	08004811 	.word	0x08004811
 8004864:	08004811 	.word	0x08004811
 8004868:	080049b9 	.word	0x080049b9
 800486c:	08004811 	.word	0x08004811
 8004870:	080048bf 	.word	0x080048bf
 8004874:	08004811 	.word	0x08004811
 8004878:	08004811 	.word	0x08004811
 800487c:	08004959 	.word	0x08004959
 8004880:	6833      	ldr	r3, [r6, #0]
 8004882:	1d1a      	adds	r2, r3, #4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6032      	str	r2, [r6, #0]
 8004888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800488c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004890:	2301      	movs	r3, #1
 8004892:	e09e      	b.n	80049d2 <_printf_i+0x1ea>
 8004894:	6833      	ldr	r3, [r6, #0]
 8004896:	6820      	ldr	r0, [r4, #0]
 8004898:	1d19      	adds	r1, r3, #4
 800489a:	6031      	str	r1, [r6, #0]
 800489c:	0606      	lsls	r6, r0, #24
 800489e:	d501      	bpl.n	80048a4 <_printf_i+0xbc>
 80048a0:	681d      	ldr	r5, [r3, #0]
 80048a2:	e003      	b.n	80048ac <_printf_i+0xc4>
 80048a4:	0645      	lsls	r5, r0, #25
 80048a6:	d5fb      	bpl.n	80048a0 <_printf_i+0xb8>
 80048a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048ac:	2d00      	cmp	r5, #0
 80048ae:	da03      	bge.n	80048b8 <_printf_i+0xd0>
 80048b0:	232d      	movs	r3, #45	@ 0x2d
 80048b2:	426d      	negs	r5, r5
 80048b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048b8:	230a      	movs	r3, #10
 80048ba:	4859      	ldr	r0, [pc, #356]	@ (8004a20 <_printf_i+0x238>)
 80048bc:	e011      	b.n	80048e2 <_printf_i+0xfa>
 80048be:	6821      	ldr	r1, [r4, #0]
 80048c0:	6833      	ldr	r3, [r6, #0]
 80048c2:	0608      	lsls	r0, r1, #24
 80048c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80048c8:	d402      	bmi.n	80048d0 <_printf_i+0xe8>
 80048ca:	0649      	lsls	r1, r1, #25
 80048cc:	bf48      	it	mi
 80048ce:	b2ad      	uxthmi	r5, r5
 80048d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80048d2:	6033      	str	r3, [r6, #0]
 80048d4:	bf14      	ite	ne
 80048d6:	230a      	movne	r3, #10
 80048d8:	2308      	moveq	r3, #8
 80048da:	4851      	ldr	r0, [pc, #324]	@ (8004a20 <_printf_i+0x238>)
 80048dc:	2100      	movs	r1, #0
 80048de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048e2:	6866      	ldr	r6, [r4, #4]
 80048e4:	2e00      	cmp	r6, #0
 80048e6:	bfa8      	it	ge
 80048e8:	6821      	ldrge	r1, [r4, #0]
 80048ea:	60a6      	str	r6, [r4, #8]
 80048ec:	bfa4      	itt	ge
 80048ee:	f021 0104 	bicge.w	r1, r1, #4
 80048f2:	6021      	strge	r1, [r4, #0]
 80048f4:	b90d      	cbnz	r5, 80048fa <_printf_i+0x112>
 80048f6:	2e00      	cmp	r6, #0
 80048f8:	d04b      	beq.n	8004992 <_printf_i+0x1aa>
 80048fa:	4616      	mov	r6, r2
 80048fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004900:	fb03 5711 	mls	r7, r3, r1, r5
 8004904:	5dc7      	ldrb	r7, [r0, r7]
 8004906:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800490a:	462f      	mov	r7, r5
 800490c:	42bb      	cmp	r3, r7
 800490e:	460d      	mov	r5, r1
 8004910:	d9f4      	bls.n	80048fc <_printf_i+0x114>
 8004912:	2b08      	cmp	r3, #8
 8004914:	d10b      	bne.n	800492e <_printf_i+0x146>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	07df      	lsls	r7, r3, #31
 800491a:	d508      	bpl.n	800492e <_printf_i+0x146>
 800491c:	6923      	ldr	r3, [r4, #16]
 800491e:	6861      	ldr	r1, [r4, #4]
 8004920:	4299      	cmp	r1, r3
 8004922:	bfde      	ittt	le
 8004924:	2330      	movle	r3, #48	@ 0x30
 8004926:	f806 3c01 	strble.w	r3, [r6, #-1]
 800492a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800492e:	1b92      	subs	r2, r2, r6
 8004930:	6122      	str	r2, [r4, #16]
 8004932:	464b      	mov	r3, r9
 8004934:	4621      	mov	r1, r4
 8004936:	4640      	mov	r0, r8
 8004938:	f8cd a000 	str.w	sl, [sp]
 800493c:	aa03      	add	r2, sp, #12
 800493e:	f7ff fee1 	bl	8004704 <_printf_common>
 8004942:	3001      	adds	r0, #1
 8004944:	d14a      	bne.n	80049dc <_printf_i+0x1f4>
 8004946:	f04f 30ff 	mov.w	r0, #4294967295
 800494a:	b004      	add	sp, #16
 800494c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	f043 0320 	orr.w	r3, r3, #32
 8004956:	6023      	str	r3, [r4, #0]
 8004958:	2778      	movs	r7, #120	@ 0x78
 800495a:	4832      	ldr	r0, [pc, #200]	@ (8004a24 <_printf_i+0x23c>)
 800495c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	6831      	ldr	r1, [r6, #0]
 8004964:	061f      	lsls	r7, r3, #24
 8004966:	f851 5b04 	ldr.w	r5, [r1], #4
 800496a:	d402      	bmi.n	8004972 <_printf_i+0x18a>
 800496c:	065f      	lsls	r7, r3, #25
 800496e:	bf48      	it	mi
 8004970:	b2ad      	uxthmi	r5, r5
 8004972:	6031      	str	r1, [r6, #0]
 8004974:	07d9      	lsls	r1, r3, #31
 8004976:	bf44      	itt	mi
 8004978:	f043 0320 	orrmi.w	r3, r3, #32
 800497c:	6023      	strmi	r3, [r4, #0]
 800497e:	b11d      	cbz	r5, 8004988 <_printf_i+0x1a0>
 8004980:	2310      	movs	r3, #16
 8004982:	e7ab      	b.n	80048dc <_printf_i+0xf4>
 8004984:	4826      	ldr	r0, [pc, #152]	@ (8004a20 <_printf_i+0x238>)
 8004986:	e7e9      	b.n	800495c <_printf_i+0x174>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	f023 0320 	bic.w	r3, r3, #32
 800498e:	6023      	str	r3, [r4, #0]
 8004990:	e7f6      	b.n	8004980 <_printf_i+0x198>
 8004992:	4616      	mov	r6, r2
 8004994:	e7bd      	b.n	8004912 <_printf_i+0x12a>
 8004996:	6833      	ldr	r3, [r6, #0]
 8004998:	6825      	ldr	r5, [r4, #0]
 800499a:	1d18      	adds	r0, r3, #4
 800499c:	6961      	ldr	r1, [r4, #20]
 800499e:	6030      	str	r0, [r6, #0]
 80049a0:	062e      	lsls	r6, r5, #24
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	d501      	bpl.n	80049aa <_printf_i+0x1c2>
 80049a6:	6019      	str	r1, [r3, #0]
 80049a8:	e002      	b.n	80049b0 <_printf_i+0x1c8>
 80049aa:	0668      	lsls	r0, r5, #25
 80049ac:	d5fb      	bpl.n	80049a6 <_printf_i+0x1be>
 80049ae:	8019      	strh	r1, [r3, #0]
 80049b0:	2300      	movs	r3, #0
 80049b2:	4616      	mov	r6, r2
 80049b4:	6123      	str	r3, [r4, #16]
 80049b6:	e7bc      	b.n	8004932 <_printf_i+0x14a>
 80049b8:	6833      	ldr	r3, [r6, #0]
 80049ba:	2100      	movs	r1, #0
 80049bc:	1d1a      	adds	r2, r3, #4
 80049be:	6032      	str	r2, [r6, #0]
 80049c0:	681e      	ldr	r6, [r3, #0]
 80049c2:	6862      	ldr	r2, [r4, #4]
 80049c4:	4630      	mov	r0, r6
 80049c6:	f000 f859 	bl	8004a7c <memchr>
 80049ca:	b108      	cbz	r0, 80049d0 <_printf_i+0x1e8>
 80049cc:	1b80      	subs	r0, r0, r6
 80049ce:	6060      	str	r0, [r4, #4]
 80049d0:	6863      	ldr	r3, [r4, #4]
 80049d2:	6123      	str	r3, [r4, #16]
 80049d4:	2300      	movs	r3, #0
 80049d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049da:	e7aa      	b.n	8004932 <_printf_i+0x14a>
 80049dc:	4632      	mov	r2, r6
 80049de:	4649      	mov	r1, r9
 80049e0:	4640      	mov	r0, r8
 80049e2:	6923      	ldr	r3, [r4, #16]
 80049e4:	47d0      	blx	sl
 80049e6:	3001      	adds	r0, #1
 80049e8:	d0ad      	beq.n	8004946 <_printf_i+0x15e>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	079b      	lsls	r3, r3, #30
 80049ee:	d413      	bmi.n	8004a18 <_printf_i+0x230>
 80049f0:	68e0      	ldr	r0, [r4, #12]
 80049f2:	9b03      	ldr	r3, [sp, #12]
 80049f4:	4298      	cmp	r0, r3
 80049f6:	bfb8      	it	lt
 80049f8:	4618      	movlt	r0, r3
 80049fa:	e7a6      	b.n	800494a <_printf_i+0x162>
 80049fc:	2301      	movs	r3, #1
 80049fe:	4632      	mov	r2, r6
 8004a00:	4649      	mov	r1, r9
 8004a02:	4640      	mov	r0, r8
 8004a04:	47d0      	blx	sl
 8004a06:	3001      	adds	r0, #1
 8004a08:	d09d      	beq.n	8004946 <_printf_i+0x15e>
 8004a0a:	3501      	adds	r5, #1
 8004a0c:	68e3      	ldr	r3, [r4, #12]
 8004a0e:	9903      	ldr	r1, [sp, #12]
 8004a10:	1a5b      	subs	r3, r3, r1
 8004a12:	42ab      	cmp	r3, r5
 8004a14:	dcf2      	bgt.n	80049fc <_printf_i+0x214>
 8004a16:	e7eb      	b.n	80049f0 <_printf_i+0x208>
 8004a18:	2500      	movs	r5, #0
 8004a1a:	f104 0619 	add.w	r6, r4, #25
 8004a1e:	e7f5      	b.n	8004a0c <_printf_i+0x224>
 8004a20:	08004bb3 	.word	0x08004bb3
 8004a24:	08004bc4 	.word	0x08004bc4

08004a28 <memmove>:
 8004a28:	4288      	cmp	r0, r1
 8004a2a:	b510      	push	{r4, lr}
 8004a2c:	eb01 0402 	add.w	r4, r1, r2
 8004a30:	d902      	bls.n	8004a38 <memmove+0x10>
 8004a32:	4284      	cmp	r4, r0
 8004a34:	4623      	mov	r3, r4
 8004a36:	d807      	bhi.n	8004a48 <memmove+0x20>
 8004a38:	1e43      	subs	r3, r0, #1
 8004a3a:	42a1      	cmp	r1, r4
 8004a3c:	d008      	beq.n	8004a50 <memmove+0x28>
 8004a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a46:	e7f8      	b.n	8004a3a <memmove+0x12>
 8004a48:	4601      	mov	r1, r0
 8004a4a:	4402      	add	r2, r0
 8004a4c:	428a      	cmp	r2, r1
 8004a4e:	d100      	bne.n	8004a52 <memmove+0x2a>
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a5a:	e7f7      	b.n	8004a4c <memmove+0x24>

08004a5c <_sbrk_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	2300      	movs	r3, #0
 8004a60:	4d05      	ldr	r5, [pc, #20]	@ (8004a78 <_sbrk_r+0x1c>)
 8004a62:	4604      	mov	r4, r0
 8004a64:	4608      	mov	r0, r1
 8004a66:	602b      	str	r3, [r5, #0]
 8004a68:	f7fc fac8 	bl	8000ffc <_sbrk>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d102      	bne.n	8004a76 <_sbrk_r+0x1a>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	b103      	cbz	r3, 8004a76 <_sbrk_r+0x1a>
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	20000380 	.word	0x20000380

08004a7c <memchr>:
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	b510      	push	{r4, lr}
 8004a80:	b2c9      	uxtb	r1, r1
 8004a82:	4402      	add	r2, r0
 8004a84:	4293      	cmp	r3, r2
 8004a86:	4618      	mov	r0, r3
 8004a88:	d101      	bne.n	8004a8e <memchr+0x12>
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e003      	b.n	8004a96 <memchr+0x1a>
 8004a8e:	7804      	ldrb	r4, [r0, #0]
 8004a90:	3301      	adds	r3, #1
 8004a92:	428c      	cmp	r4, r1
 8004a94:	d1f6      	bne.n	8004a84 <memchr+0x8>
 8004a96:	bd10      	pop	{r4, pc}

08004a98 <memcpy>:
 8004a98:	440a      	add	r2, r1
 8004a9a:	4291      	cmp	r1, r2
 8004a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004aa0:	d100      	bne.n	8004aa4 <memcpy+0xc>
 8004aa2:	4770      	bx	lr
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aaa:	4291      	cmp	r1, r2
 8004aac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ab0:	d1f9      	bne.n	8004aa6 <memcpy+0xe>
 8004ab2:	bd10      	pop	{r4, pc}

08004ab4 <_realloc_r>:
 8004ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab8:	4680      	mov	r8, r0
 8004aba:	4615      	mov	r5, r2
 8004abc:	460c      	mov	r4, r1
 8004abe:	b921      	cbnz	r1, 8004aca <_realloc_r+0x16>
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac6:	f7ff bc39 	b.w	800433c <_malloc_r>
 8004aca:	b92a      	cbnz	r2, 8004ad8 <_realloc_r+0x24>
 8004acc:	f7ff fbcc 	bl	8004268 <_free_r>
 8004ad0:	2400      	movs	r4, #0
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad8:	f000 f81a 	bl	8004b10 <_malloc_usable_size_r>
 8004adc:	4285      	cmp	r5, r0
 8004ade:	4606      	mov	r6, r0
 8004ae0:	d802      	bhi.n	8004ae8 <_realloc_r+0x34>
 8004ae2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ae6:	d8f4      	bhi.n	8004ad2 <_realloc_r+0x1e>
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4640      	mov	r0, r8
 8004aec:	f7ff fc26 	bl	800433c <_malloc_r>
 8004af0:	4607      	mov	r7, r0
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d0ec      	beq.n	8004ad0 <_realloc_r+0x1c>
 8004af6:	42b5      	cmp	r5, r6
 8004af8:	462a      	mov	r2, r5
 8004afa:	4621      	mov	r1, r4
 8004afc:	bf28      	it	cs
 8004afe:	4632      	movcs	r2, r6
 8004b00:	f7ff ffca 	bl	8004a98 <memcpy>
 8004b04:	4621      	mov	r1, r4
 8004b06:	4640      	mov	r0, r8
 8004b08:	f7ff fbae 	bl	8004268 <_free_r>
 8004b0c:	463c      	mov	r4, r7
 8004b0e:	e7e0      	b.n	8004ad2 <_realloc_r+0x1e>

08004b10 <_malloc_usable_size_r>:
 8004b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b14:	1f18      	subs	r0, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bfbc      	itt	lt
 8004b1a:	580b      	ldrlt	r3, [r1, r0]
 8004b1c:	18c0      	addlt	r0, r0, r3
 8004b1e:	4770      	bx	lr

08004b20 <_init>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	bf00      	nop
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr

08004b2c <_fini>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	bf00      	nop
 8004b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b32:	bc08      	pop	{r3}
 8004b34:	469e      	mov	lr, r3
 8004b36:	4770      	bx	lr
